@model OrderFilterViewModel

<div class="col-md-12">
    <div class="well bg-white shadow-b">
        <div class="ibox mb0">
            <div class="ibox-content no-border no-padding">
                <div id="buyer-order-div" class="table-responsive">
                    <table id="buyerorder-datatable" data-gridname="@GridName.BuyerOrder" class="table table-striped table-bordered table-hover">
                        <thead>
                            <tr>
                                <th data-key="GroupPoNumber">@Resource.gridColumnCustomerPo</th>
                                <th data-key="PoNumber">@Resource.gridColumnPoNumber</th>
                                <th data-key="OrderType">@Resource.gridColumnOrderType <i class="fa fa-question-circle ml2" data-toggle="tooltip" data-placement="top" title="@Resource.tooltipOrderType"></i></th>
                                <th data-key="DeliveryType">@Resource.gridColumnDeliveryType <i class="fa fa-question-circle ml2" data-toggle="tooltip" data-placement="top" title="@Resource.tooltipDeliveryType"></i></th>
                                <th data-key="Supplier">@Resource.gridColumnSupplier</th>
                                <th data-key="DBE">@Resource.gridColumnDBE <i class="fa fa-question-circle ml2" data-toggle="tooltip" data-placement="top" title="@Resource.tooltipDBE"></i></th>
                                <th data-key="FuelType" class="no-break">@Resource.gridColumnFuelType</th>
                                <th data-key="AssetAllocated">@Resource.lblAssetsAllocated</th>
                                @*<th data-key="GallonsRequested" class="quantity-requested">@Resource.lblGallonsRequested</th>*@
                                <th data-key="RequestedQuantity">@Resource.lblQuantityRequested</th>
                                @*<th data-key="RackPPG" class="rackprice-per-qty">@Resource.lblRackPPG (@Resource.lblCurrencyCode)</th>*@
                                <th class="rack-ppg-by-country"></th>
                                @*<th data-key="TotalAmount" class="total-amount">@Resource.lblTotalAmount (@Resource.lblCurrencyCode)</th>*@
                                <th data-key="OrderCompleted">@Resource.gridColumnOrderCompleted</th>
                                <th data-key="VesselName">@Resource.gridColumnVesselName</th>
                                <th data-key="Status">@Resource.gridColumnStatus</th>
                                <th data-key="Id" class="exclude-export">@Resource.gridColumnId</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var buyerOrdersGrid;
    var ClearFilter, exportColumns = { columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] };
    var dataGridRq;
    $(document).ready(function () {
        SetUoMCurrencyAndRacklables();
        ExportGrid();
        var buyorderlocations = 'order-locations';
        var buyorderfilter = 'order-filterType';
        var fromDate = GetLocalStorage('txtBuyerOrderFromDate'), toDate = GetLocalStorage('txtBuyerOrderToDate');
        if (fromDate != undefined && !isNaN(fromDate)) $('#txtBuyerOrderFromDate').val(fromDate);
        if (toDate != undefined && !isNaN(toDate)) $('#txtBuyerOrderToDate').val(toDate);
        ClearFilter = function() {
            $('#txtBuyerOrderFromDate').val('');
            $('#txtBuyerOrderToDate').val('');
            $('#txtBuyerOrderToDate').data("DateTimePicker").minDate($("#txtBuyerOrderFromDate").datetimepicker("minDate"));
            ReloadDataTable();
        }

        if ($('#txtBuyerOrderFromDate').length > 0 && $('#txtBuyerOrderToDate').length > 0) {
            $("#txtBuyerOrderFromDate").on('dp.change dp.show', function (e) {
                if (e.date == false)
                    $('#txtBuyerOrderToDate').data("DateTimePicker").minDate($("#txtBuyerOrderFromDate").datetimepicker("minDate"));
                else
                    $('#txtBuyerOrderToDate').data("DateTimePicker").minDate(moment($('#txtBuyerOrderFromDate').val()));
            });
        }
        //$('#txtBuyerOrderFromDate').val('01/01/2018');
        //$('#txtBuyerOrderToDate').val(moment().format('MM/DD/YYYY'));
        buyerOrdersGrid = $('#buyerorder-datatable').DataTable({
            "ajax": {
                "url": "@Url.Action("OrdersGrid", "Order", new { area = "Buyer" })",
                "type": "POST",
                "datatype": "json",
                "data": function (data) {
                    data.JobId = '@Model.JobId';
                    data.Filter = '@Model.Filter';
                    data.FuelTypeId = '@Model.FuelTypeId';
                    data.StartDate = $('#txtBuyerOrderFromDate').val() == 'undefined' ? "" : $('#txtBuyerOrderFromDate').val();
                    data.EndDate = $('#txtBuyerOrderToDate').val() == 'undefined' ? "" : $('#txtBuyerOrderToDate').val();
                    data.Currency = getSelectedCountryAndCurrency().currencyType;
                    data.CountryId = getSelectedCountryAndCurrency().countryId;
                    data.GroupIds = getCompanyGroup().groupIds;
                    data.LocationIds = JSON.parse(localStorage.getItem(buyorderlocations)) || [];
                    data.VesselIds = $("#filter-data-list").find(".ordervessels").val() || [];
                    data.IsMarine = (localStorage.getItem(buyorderfilter));
                    dataGridRq = data;
                    $('#buyer-order-div').append("<div class='pa bg-white top0 left0 z-index5 loading-wrapper'><span class='spinner-dashboard pa'></span></div>");
                },
				"dataSrc": function (json) {
					$("#buyer-order-div").find('.loading-wrapper').remove();
					return json.data;
				}
			},
			'lengthMenu': [[10, 25, 50, 100, 99999999], [10, 25, 50, 100, "All"]],
			aaSorting: [[]],
            "serverSide": true,
            "searchDelay": 500,
			processing: true,
			"searching": { "regex": true },
			"bProcessing": true,
			lengthChange: true,
            "columns": [
                        { "data": "GroupPoNumber", "autoWidth": true },
                        {
                            "data": function (data, type, row, meta) {
                                return '<a href="@Url.Action("Details", "Order", new { area = "Buyer" })/' + data.Id + '">' + data.PoNumber + '</a>';
                            }, "autoWidth": true
                        },
                        { "data": "OrderType", "autoWidth": true },
                        { "data": "DeliveryType", "autoWidth": true },
                        { "data": "Supplier", "autoWidth": true },
                        { "data": "Eligibility", "autoWidth": true },
						{ "data": "FuelType", "autoWidth": true, className: "break-word" },
                        { "data": "AssetsAssigned", "autoWidth": true, render: $.fn.dataTable.render.number(',', '.', 0, '') },
                        { "data": "Quantity", "autoWidth": true },
                        { "data": "PricePerGallon", "autoWidth": true },
						@*{
                                "data": function (data, type, row, meta) {
                                    if (data.TotalAmount == '@Resource.lblHyphen') {
                                    return data.TotalAmount;
                                }
                                else {
                                        return '@Resource.constSymbolCurrency' + data.TotalAmount;
                                }
                            }, "autoWidth": true
                        },*@
                        {
                            "data": function (data, type, row, meta) {
                                if (data.FuelDeliveredPercentage == '@Resource.lblHyphen') {
                                    return data.FuelDeliveredPercentage;
                                }
                                else {
                                    return data.FuelDeliveredPercentage + '@Resource.constSymbolPercent';
                                }
                            }, "autoWidth": true
                        },
                        { "data": "VesselName", "autoWidth": true},
                        { "data": "Status", "autoWidth": true },
						{ "data": "Id", "autoWidth": true }
            ],
            pageLength: 10,
            responsive: true,
			"order": [[12, 'desc']],
            "initComplete": function (settings, json) {
                wrapperHeight();
                tabGridHeader(this);
            },
            "drawCallback": function (settings, json) {
                hideLinksForCompanyGroup(this);
            },
			"columnDefs": [
                { "name": "GroupPoNumber", "targets": 0, "visible": false, "searchable": false,"regex": false },
                { "name": "PoNumber", "targets": 1, "regex": false },
                { "name": "OrderType", "targets": 2 },
                { "name": "DeliveryType", "targets": 3 },
				{ "name": "Supplier", "targets": 4 },
				{ "name": "Eligibility", "targets": 5 },
				{ "name": "FuelType", "targets": 6 },
                { "name": "AssetsAssigned", "targets": 7 },
				{ "name": "Quantity", "targets": 8 },
                { "name": "PricePerGallon", "targets": 9 },
                //{ "name": "TotalAmount", "targets": 9 },
                { "name": "FuelDeliveredPercentage", "targets": 10 },
                { "name": "VesselName", "targets": 11, "visible": false},
                { "name": "Status", "targets": 12 },
				{ "targets": [13], "visible": false, "searchable": false }
			],
            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                { extend: 'colvis', columns: exportColumns.columns },
				{ extend: 'csv', exportOptions: exportColumns },
				{ extend: 'excel', title: 'Orders', exportOptions: exportColumns },
				//{ extend: 'pdf', title: 'Orders', orientation: 'landscape', exportOptions: exportColumns },
                {
                    extend: 'print',
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');

                        $(win.document.body).find('table')
                                .addClass('compact')
                                .css('font-size', 'inherit');
                    }
                }
            ],
            language: {
                sLoadingRecords: "<div class='spinner-small'></div><div class='fs14'>@Resource.lblLoading</div>",
                search: "<button class='btn btn-primary' id='btnsearch12'> <i class='fa fa-search'></i></button>"
            },
            initComplete: function (settings, json) {
                var api = this.api();
                var textBox = $('#buyerorder-datatable_filter .input-sm');
                textBox.unbind();
                textBox.bind('keyup input', function (e) {
                    if (e.keyCode == 8 && !textBox.val() || e.keyCode == 46 && !textBox.val()) {
                    } else if (e.keyCode == 13 || !textBox.val()) {
                        api.search(this.value).draw();
                    }
                });

                $("#btnsearch12").click(function () {
                    api.search(textBox[0].value).draw();
                });
            }
        });
    });

    function ReloadDataTable() {
        SetLocalStorage('txtBuyerOrderFromDate', $('#txtBuyerOrderFromDate').val());
        SetLocalStorage('txtBuyerOrderToDate', $('#txtBuyerOrderToDate').val());
        buyerOrdersGrid.ajax.reload();
        ReloadBuyerOrderMap();
    }

    function ExportGrid() {
        ExportDataEvent('#buyerorder-datatable',  @ApplicationConstants.ExportRestrictionCount,
            '@Url.Action("OrdersGrid", "Order", new { area = "Buyer" })',
            '@string.Format(Resource.messageExportRestrictionCount, ApplicationConstants.ExportRestrictionCount)'
        );
    }
</script>