@model FuelRequestFilterViewModel
<div class="row">
    <div class="col-md-12">
        <div class="well bg-white shadow-b">
            <div class="ibox mb0">
                <div class="ibox-content no-border no-padding">
                    <div id="buyer-fuelrequest-div" class="table-responsive">
                        <table id="buyer-fuelrequest-datatable" class="table table-striped table-bordered table-hover pb0">
                            <thead>
                                <tr>
                                    <th>@Resource.gridColumnRequestNumber</th>
                                    <th>@Resource.gridColumnJob</th>
                                    <th>@Resource.gridColumnAddress</th>
                                    <th class="no-break">@Resource.gridColumnFuelType</th>
                                    <th>@Resource.lblQuantityRequested</th>
                                    <th class="rack-ppg-by-country"></th>
                                    <th>@Resource.lblOnsiteContact</th>
                                    <th>@Resource.gridColumnType <i class="fa fa-question-circle ml2" data-toggle="tooltip" data-placement="top" title="@Resource.tooltipDeliveryType"></i></th>
                                    <th>@Resource.gridColumnStatus</th>
                                    <th class="exclude-export col-group-company-hide">@Resource.gridColumnCounterOffer</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var buyerFuelRequestGrid, exportColumns = { columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] };
    var ClearFilter;
    var dataGridRq;
    $(document).ready(function () {
        ExportGrid();
        $('#txtBuyerFRFromDate').val(GetLocalStorage('txtBuyerFRFromDate'));
        $('#txtBuyerFRToDate').val(GetLocalStorage('txtBuyerFRToDate'));
        SetUoMCurrencyAndRacklables();
        ClearFilter = function () {
            $('#txtBuyerFRFromDate').val('');
            $('#txtBuyerFRToDate').val('');
            $('#txtBuyerFRToDate').data("DateTimePicker").minDate($("#txtBuyerFRFromDate").datetimepicker("minDate"));
            ReloadDataTable();
        }

        if ($('#txtBuyerFRFromDate').length > 0 && $('#txtBuyerFRToDate').length > 0) {
            $("#txtBuyerFRFromDate").on('dp.change dp.show', function (e) {
                if (e.date == false)
                    $('#txtBuyerFRToDate').data("DateTimePicker").minDate($("#txtBuyerFRFromDate").datetimepicker("minDate"));
                else
                    $('#txtBuyerFRToDate').data("DateTimePicker").minDate(moment($('#txtBuyerFRFromDate').val()));
            });
        }

        buyerFuelRequestGrid = $('#buyer-fuelrequest-datatable').DataTable({
            "ajax": {
                "url": "@Url.Action("FuelRequestGrid", "FuelRequest", new { area ="Buyer" })",
                "type": "POST",
                "datatype": "json",
                "data": function (data) {
                    data.BrodcastType = $('.broadcastType:checked').attr('id');
                    data.JobId = '@Model.JobId';
                    data.Filter = '@Model.Filter';
                    data.FromDate = $('#txtBuyerFRFromDate').val() == 'undefined' ? '' : $('#txtBuyerFRFromDate').val();
                    data.ToDate = $('#txtBuyerFRToDate').val() == 'undefined' ? '' : $('#txtBuyerFRToDate').val();
                    data.Currency = getSelectedCountryAndCurrency().currencyType;
                    data.CountryId = getSelectedCountryAndCurrency().countryId;
                    data.GroupIds = getCompanyGroup().groupIds;
                    dataGridRq = data;
                    $('#buyer-fuelrequest-div').append("<div class='pa bg-white top0 left0 z-index5 loading-wrapper'><span class='spinner-dashboard pa'></span></div>");
                },
                "dataSrc": function (json) {
                    $("#buyer-fuelrequest-div").find('.loading-wrapper').remove();
                    return json.data;
                }
            },
            'lengthMenu': [[10, 25, 50, 100, 99999999], [10, 25, 50, 100, "All"]],
            aaSorting: [[0, 'desc']],
            "serverSide": true,
            "searchDelay": 500,
            processing: true,
            "searching": { "regex": true },
            "bProcessing": true,
            lengthChange: true,
            "columns": [
                {
                    "data": function (data, type, row, meta) {
                        var url = (data.Status.toLowerCase() == '@FuelRequestStatus.Draft.ToString().ToLower()') ?
                            '@Url.Action(CurrentUser.IsBuyerAdmin || CurrentUser.IsBuyer ? "Edit" : "Details", "FuelRequest", new { area = "Buyer" })' :
                            '@Url.Action("Details", "FuelRequest", new { area = "Buyer" })';
                        return '<a href="' + url + '?id=' + data.FuelRequestId + '">' + data.RequestNumber + '</a>';
                    }, "autoWidth": true
                },
                {
                    "data": function (data, type, row, meta) {
                        return '<a href="@Url.Action("Details", "Job", new { area = "Buyer" })?id=' + data.JobId + '">' + data.JobName + '</a>';
                    }, "autoWidth": true
                },

                { "data": "Address", "autoWidth": true },

                { "data": "FuelType", "autoWidth": true, className: "break-word" },

                { "data": "GallonsNeeded", "autoWidth": true },

                { "data": "PricePerGallon", "autoWidth": true },
                
                {
                    "data": function (data) {
                        return data.ContactPerson == null ? '<div class="text-center">@Resource.lblHyphen<div>' : data.ContactPerson.substring(0, data.ContactPerson.length - 1).replace(/\;/g, '<br/><br/>');
                    }, "autoWidth": true, "className": "contact-person"
                },

                { "data": "DeliveryType", "autoWidth": true },

                { "data": "Status", "autoWidth": true },

                {
                    "data": function (data, type, row, meta) {
                        return data.IsCounterOfferAvailable == true && data.StatusId == @((int)FuelRequestStatus.Open) ? '<a href="#CounterOfferGrid" class="btn btn-warning btn-xs pntr-auto" title="@Resource.lblViewCounterOfferForFuelRequest" onclick="ReloadCounterOfferGrid(' + data.FuelRequestId + ')" >@Resource.btnLabelShowCounterOffer</a>' : '<div class="text-center">@Resource.lblHyphen<div>';
                    }, "autoWidth": true, className: "col-group-company-hide"
                },

            ],
            pageLength: 10,
            responsive: true,
            "order": [],
            "initComplete": function (settings, json) {
                wrapperHeight();
                $('#buyer-fuelrequest-datatable th:eq(8)').addClass('filtering-disabled');
                tabGridHeader(this);
            },
            "drawCallback": function (settings, json) {
                hideLinksForCompanyGroup(this);
            },
            "columnDefs": [
                { "name": "FuelRequestNumber", "targets": 0, "regex": false },
                { "name": "JobName", "targets": 1 },
                { "name": "Address", "targets": 2 },
                { "name": "FuelType", "targets": 3 },
                { "name": "Gallons", "targets": 4 },
                { "name": "Price", "targets": 5 },
                { "name": "Contact", "targets": 6, className: 'phone' },
                { "name": "DeliveryType", "targets": 7 },
                { "name": "Status", "targets": 8 },
                { "name": "CounterOffer", "targets": 9, "regex": false }
            ],

            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                { extend: 'csv', title: '@Resource.headingFuelRequestSummary', exportOptions: exportColumns },
                { extend: 'excel', title: '@Resource.headingFuelRequestSummary', exportOptions: exportColumns },
                @*{ extend: 'pdf', title: '@Resource.headingFuelRequestSummary', exportOptions: exportColumns, orientation: 'landscape' },*@
                {
                    extend: 'print', exportOptions: exportColumns,
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');

                        $(win.document.body).find('table')
                            .addClass('compact')
                            .css('font-size', 'inherit');
                    }
                }
            ],
            language: {
                sLoadingRecords: "<div class='spinner-small'></div><div class='fs14'>@Resource.lblLoading</div>",
                search: "<button class='btn btn-primary' id='btnsearch10'> <i class='fa fa-search'></i></button>"
            },
            initComplete: function (settings, json) {
                var api = this.api();
                var textBox = $('#buyer-fuelrequest-datatable_filter .input-sm');
                textBox.unbind();
                textBox.bind('keyup input', function (e) {
                    if (e.keyCode == 8 && !textBox.val() || e.keyCode == 46 && !textBox.val()) {
                    } else if (e.keyCode == 13 || !textBox.val()) {
                        api.search(this.value).draw();
                    }
                });

                $("#btnsearch10").click(function () {
                    api.search(textBox[0].value).draw();
                });
            }
        });

        $('.broadcastType').on('change', function () {
            ReloadDataTable();
        });
    });

    function ReloadDataTable() {
        SetLocalStorage('txtBuyerFRFromDate', $('#txtBuyerFRFromDate').val());
        SetLocalStorage('txtBuyerFRToDate', $('#txtBuyerFRToDate').val());
        buyerFuelRequestGrid.ajax.reload();
        buyerCounterOfferGrid.ajax.reload();
        frToggle();
    }

    function ReloadCounterOfferGrid(fuelRequestId) {
        var url = '@Url.Action("PartialCounterOfferGrid", "FuelRequest", new { area = "Buyer" })?fuelRequestId=' + fuelRequestId + '';
        buyerCounterOfferGrid.ajax.url(url);
        buyerCounterOfferGrid.ajax.reload();
    }

    function ExportGrid() {
        registerExportDataEvent('#buyer-fuelrequest-datatable',  @ApplicationConstants.ExportRestrictionCount,
            '@Url.Action("FuelRequestGrid", "FuelRequest", new { area = "Buyer" })',
            '@string.Format(Resource.messageExportRestrictionCount, ApplicationConstants.ExportRestrictionCount)',
            function callBack(jsonResult) {

               return $.map(jsonResult.responseJSON.data, function (item) {
                    return {
                        RequestNumber: item.RequestNumber,
                        JobName: item.JobName,
                        Address: item.Address,
                        FuelType: item.FuelType,
                        GallonsNeeded: item.GallonsNeeded,
                        PricePerGallon: item.PricePerGallon,
                        ContactPerson: item.ContactPerson == null ? '@Resource.lblHyphen' : item.ContactPerson.substring(0, item.ContactPerson.length - 1).replace(/\;/g, '<br/><br/>'),
                        DeliveryType: item.DeliveryType,
                        Status: item.Status
                    };
                });
            }
        );
    }
</script>

