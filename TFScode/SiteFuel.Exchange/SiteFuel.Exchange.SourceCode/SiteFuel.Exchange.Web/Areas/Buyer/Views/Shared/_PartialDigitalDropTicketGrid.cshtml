@model InvoiceFilterViewModel

<div class="col-md-12 pr0 pl0">
    <div class="well bg-white shadow-b">
        <div class="ibox mb0">
            <div class="ibox-content no-padding no-border">
                <div id="buyer-ddt-div" class="table-responsive">
                    <table id="Buyer-ddt-datatable" data-gridname="@GridName.BuyerDigitalDropTicket" class="table table-striped table-bordered table-hover">
                        <thead>
                            <tr>
                                <th data-key="DropTicketNumber">@Resource.gridColumnDropTicketNumber</th>
                                <th data-key="PoNumber">@Resource.gridColumnPoNumber</th>
                                <th data-key="BDRNumber">@Resource.lblBDRNo</th>
                                <th data-key="BolNumber">@Resource.gridColumnBolNumber</th>
                                <th data-key="DeliveryLevelPO">@Resource.lblDeliveryLevelPO</th>
                                <th data-key="LiftDate">@Resource.lblLiftDate</th>
                                <th data-key="Carrier"> @Resource.lblCarrier</th>
                                <th data-key="Job">@Resource.gridColumnLocationName</th>
                                <th data-key="Supplier">@Resource.gridColumnSupplier</th>
                                <th data-key="FuelType" class="no-break">@Resource.gridColumnFuelType</th>
                                <th class="uom-by-country"> <span class="uom-lbl"></span> @Resource.lblRequested</th>
                                <th data-key="PrePostValues">@Resource.gridColumnPrePostValues</th>
                                <th data-key="Terminal">@Resource.gridColumnTerminal</th>
                                <th data-key="AssetFilled">@Resource.lblAssetFilled</th>
                                <th data-key="InvoiceAmount" class="invoice-amount-grid">@Resource.gridColumnInvoiceAmount (@Currency.USD.ToString())</th>
                                <th data-key="DropDate">@Resource.gridColumnDropDate</th>
                                <th data-key="DropTime">@Resource.gridColumnDropTime</th>
                                <th data-key="DropTicketDate">@Resource.gridColumnDropTicketDate</th>
                                <th data-key="PaymentDueDate">@Resource.gridColumnPaymentDueDate</th>
                                <th data-key="VesselName">@Resource.gridColumnVesselName</th>
                                <th data-key="Status">@Resource.gridColumnStatus</th>
                                <th data-key="DropTicketNumber">@Resource.gridColumnProofofDelivery</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var buyerDropTicketGrid, exportDdtColumns = { columns: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14,15,16,17,18,19,20,21] };
    var clearDdtFilter;
    var dataGridRq;
    $(document).ready(function () {
        exportDdtGrid();
        initDateTimePicker();
        var buyddtlocations = 'ddt-locations';
        var buyddtfilter = 'ddt-filterType';
        
        $('#txtBuyerDropTicketFromDate').val(GetLocalStorage('txtBuyerDropTicketFromDate'));
        $('#txtBuyerDropTicketToDate').val(GetLocalStorage('txtBuyerDropTicketToDate'));
        SetUoMCurrencyAndRacklables();
        clearDdtFilter = function () {
            $('#txtBuyerDropTicketFromDate').val('');
            $('#txtBuyerDropTicketToDate').val('');
            $('#txtBuyerDropTicketToDate').data("DateTimePicker").minDate($("#txtBuyerDropTicketFromDate").datetimepicker("minDate"));
            reloadDdtDataTable();
        }

        if ($('#txtBuyerDropTicketFromDate').length > 0 && $('#txtBuyerDropTicketToDate').length > 0) {
            $("#txtBuyerDropTicketFromDate").on('dp.change dp.show', function (e) {
                if (e.date == false)
                    $('#txtBuyerDropTicketToDate').data("DateTimePicker").minDate($("#txtBuyerDropTicketFromDate").datetimepicker("minDate"));
                else
                    $('#txtBuyerDropTicketToDate').data("DateTimePicker").minDate(moment($('#txtBuyerDropTicketFromDate').val()));
            });
        }
        sdate = $('#txtBuyerDropTicketFromDate').val() == 'undefined' ? (GetLocalStorage('txtBuyerDropTicketFromDate')) : $('#txtBuyerDropTicketFromDate').val();
        edate = $('#txtBuyerDropTicketToDate').val() == 'undefined' ? (GetLocalStorage('txtBuyerDropTicketToDate')) : $('#txtBuyerDropTicketToDate').val();
        if (sdate == "undefined" || edate == "undefined" || sdate == "" || edate == "") {
            $('#txtBuyerDropTicketFromDate').val(moment().subtract(7, 'days').format('MM/DD/YYYY'));
            $('#txtBuyerDropTicketToDate').val(moment().format('MM/DD/YYYY'));
        }
        buyerDropTicketGrid = $('#Buyer-ddt-datatable').DataTable({
            colReorder: true,
            "ajax": {
                "url": "@Url.Action("DigitalDropTicketGrid", "Invoice", new { area = "Buyer" })",
                "type": "POST",
                "datatype": "json",
                "data": function (data) {
					data.JobId = '@Model.JobId';
					data.Filter = '@Model.Filter';
                    data.StartDate = $('#txtBuyerDropTicketFromDate').val() == 'undefined' ? "" : $('#txtBuyerDropTicketFromDate').val();
                    data.EndDate = $('#txtBuyerDropTicketToDate').val() == 'undefined' ? "" : $('#txtBuyerDropTicketToDate').val();
                    data.Currency = getSelectedCountryAndCurrency().currencyType;
                    data.CountryId = getSelectedCountryAndCurrency().countryId;
                    data.GroupIds = getCompanyGroup().groupIds;
                    data.LocationIds = JSON.parse(localStorage.getItem(buyddtlocations)) || [];
                    data.VesselIds = getAssetTankVessels();
                    data.IsMarine = (localStorage.getItem(buyddtfilter));
                    dataGridRq = data;
					$('#buyer-ddt-div').append("<div class='pa bg-white top0 left0 z-index5 loading-wrapper'><span class='spinner-dashboard pa'></span></div>");
                },
				"dataSrc": function (json) {
					$("#buyer-ddt-div").find('.loading-wrapper').remove();
					return json.data;
				}
			},
			'lengthMenu': [[10, 25, 50, 100, 99999999], [10, 25, 50, 100, "All"]],
			aaSorting: [[]],
			"serverSide": true,
			"searchDelay": 500,
			processing: true,
			"searching": { "regex": true },
			"bProcessing": true,
			lengthChange: true,
            "columns": [
                        {
                    "data": function (data, type, row, meta) {
                                var ids = data.Id.split(';');
                                return '<a href="@Url.Action("Details", "Invoice", new { area = "Buyer" })/' + ids[0] + '">' + data.InvoiceNumber + '</a>';
                            }, "autoWidth": true
                        },
                        {
                            "data": function (data, type, row, meta) {
                                var ids = data.OrderId.split(';');
                                var poNos = data.PoNumber.split(';');
                                if (ids && ids.length === 0)
                                    return '<a href="@Url.Action("Details", "Order", new { area = "Buyer" })/' + data.OrderId + '">' + data.PoNumber + '</a>';
                                else if (ids && ids.length > 0) {
                                    var returnUrl = '';
                                    for (var i = 0; i < ids.length; i++) {
                                        returnUrl += ' <a href="@Url.Action("Details", "Order", new { area = "Buyer"})/' + ids[i] + '">' + poNos[i] + '</a> ';
                                    }
                                }
                                return returnUrl;
                            }, "autoWidth": true
                        },
                        { "data": "BDRNumber", "autoWidth": true },
                        { "data": "BolNumber", "autoWidth": true },
                        {
                            "data": function (data) {
                                var deliveryLevelPO = data.DeliveryLevelPO.split(',');
                                if (deliveryLevelPO.length === 0) {
                                    return "<div>" + deliveryLevelPO + "</div>";
                                }
                                else {
                                    var deliveryReqInfo = '';
                                    for (var i = 0; i < deliveryLevelPO.length; i++) {
                                        deliveryReqInfo = deliveryReqInfo + "<div>" + deliveryLevelPO[i] + "</div>";
                                    }
                                    return deliveryReqInfo;
                                }
                            }, "autoWidth": true
                        },
                        { "data": "LiftDate", "autoWidth": true },
                        { "data": "Carrier", "autoWidth": true },
                        {
                            "data": function (data, type, row, meta) {
                                return '<a href="@Url.Action("Details", "Job", new { area = "Buyer" })/' + data.JobId + '">' + data.JobName + '</a>';
                            }, "autoWidth": true
                        },
                        { "data": "Supplier", "autoWidth": true },
                        { "data": "FuelType", "autoWidth": true, className: "break-word" },
                        { "data": "DroppedGallons", "autoWidth": true },
                        {
                            "data": function (data, type, row, meta) {
                                if (data.PrePostValues != null && data.PrePostValues != "") {
                                    var prePostData = data.PrePostValues.split(';');
                                    if (prePostData.length === 0)
                                        return data.prePostData;
                                    else if (prePostData.length > 0) {
                                        var returnUrl = '';
                                        for (var i = 0; i < prePostData.length; i++) {
                                            returnUrl += prePostData[i] + '<br />';
                                        }
                                        return returnUrl;
                                    }
                                } else {
                                    return "--";
                                }

                            }, "autoWidth": true, className: "no-wrap"
                        },
                        { "data": "TerminalName", "autoWidth": true },
						{ "data": "AssetCount", "autoWidth": true, render: $.fn.dataTable.render.number(',', '.', 0, '') },
						{ "data": "InvoiceAmount", "autoWidth": true },
                        { "data": "DropDate", "autoWidth": true },
                        { "data": "DropTime", "autoWidth": true },
						{ "data": "InvoiceDate", "autoWidth": true },
                        { "data": "PaymentDueDate", "autoWidth": true },
                        { "data": "VesselName", "autoWidth": true },
                        {
                            "data": function (data, type, row, meta)
                        {
                        if (data.WaitingFor == @((int)WaitingAction.UpdatedPrice)) {
                            return data.Status + ' <span class="fs12 text-info">@Resource.lblWaitingForPrice</span>';
                        }
                        else if (data.WaitingFor == @((int)WaitingAction.AvalaraTax)) {
                            return data.Status + ' <span class="fs12 text-info">@Resource.lblWaitingForTax</span>';
                        }
                        else if (data.WaitingFor == @((int)WaitingAction.CustomerApproval)) {
                            return ' <span class="fs12 text-info">' + data.Status +'</span>';
                        }
                        else if (data.WaitingFor == @((int)WaitingAction.BolDetails)) {
                            return data.Status + ' <span class="fs12 text-info">@Resource.lblWaitingForBol</span>';
                        }
                        else if (data.WaitingFor == @((int)WaitingAction.ExceptionApproval)) {
                            return data.Status +' <span class="fs12 text-info">Waiting for exception approval</span>';
                         }
                        else if (data.WaitingFor == @((int)WaitingAction.Images)) {
                            return data.Status + ' <span class="fs12 text-info">@Resource.lblWaitingForImage</span>';
                        }
                        else if (data.WaitingFor == @((int)WaitingAction.PrePostDipData)) {
                            return data.Status + ' <span class="fs12 text-info">@Resource.lblWaitingForPrePostData</span>';
                        }
                        else if (data.WaitingFor == @((int)WaitingAction.InventoryVerification)) {
                            return data.Status + ' <span class="fs12 text-info">@Resource.lblWaitingInventoryVerification</span>';
                        }
                        else if (data.WaitingFor == @((int)WaitingAction.AllDRCompletion)) {
                            return data.Status + ' <span class="fs12 text-info">@Resource.lblWaitingForOtherDrops</span>';
                        }
                        else if (data.WaitingFor == @((int)WaitingAction.FilldResponse)) {
                            return data.Status + ' <span class="fs12 text-info">@Resource.lblWaitingForFilldResponse</span>';
                        }
                        else if (data.WaitingFor == @((int)WaitingAction.BDNConfirmation)) {
                            return data.Status + ' <span class="fs12 text-info">@Resource.lblWaitingForBDNConfirmation</span>';
                        }
                        else if (data.WaitingFor == @((int)WaitingAction.InvoiceConfirmation)) {
                            return data.Status + ' <span class="fs12 text-info">@Resource.lblWaitingForInvoiceConfirmation</span>';
                        }
                        else {
                            return data.Status;
                        }
                    }, "autoWidth": true
                        },
                        { "data": "DropTicketNumber", "autoWidth": true },
            ],
            pageLength: 10,
            responsive: true,
            "order": [],
            "initComplete": function (settings, json) {
                wrapperHeight();
            },
            "drawCallback": function (settings, json) {
                hideLinksForCompanyGroup(this);
            },
			"columnDefs": [
				{ "name": "InvoiceNumber", "targets": 0, "regex": false },
                { "name": "PoNumber", "targets": 1 },
                { "name": "BDRNumber", "targets": 2, "visible": false },
                { "name": "BolNumber", "targets": 3 },
                { "name": "DeliveryLevelPO", "targets": 4, "visible": false  },
                { "name": "LiftDate", "targets": 5 },
                { "name": "Carrier", "targets": 6 },
				{ "name": "JobName", "targets": 7 },
				{ "name": "Supplier", "targets": 8 },
                { "name": "FuelType", "targets": 9 },
                { "name": "DroppedGallons", "targets": 10 },
                { "name": "PrePostValues", "targets": 11 },
				{ "name": "TerminalName", "targets": 12 },
				{ "name": "AssetCount", "targets": 13 },
				{ "name": "InvoiceAmount", "targets": 14, "visible": false,"searchable": false },
				{ "name": "DropDate", "targets": 15 },
				{ "name": "DropTime", "targets": 16 },
				{ "name": "InvoiceDate", "targets": 17 },
                { "name": "PaymentDueDate", "targets": 18, "visible": false, "searchable": false },
                { "name": "VesselName", "targets": 19, "visible": false },
                { "name": "Status", "targets": 20 },
                { "name": "DropTicketNumber", "targets": 21 },
                {
                    targets: [1, 3, 9, 10, 11,12, 15, 16],
                    //replace semicolons in each cell contents within columns 3, 4, 5 with new line tag `<br>`
                    //render: (data, type, row, meta) => data ? data.replace(/;/g, '<br>') : ''
                    render: function (data, type, row, meta) { if (data) return data.replace(/;/g, '<br>'); else return ''; }
                }
			],
            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                { extend: 'colvis', columns: exportDdtColumns.columns },
                { extend: 'csv', title: '@Resource.headingDigitalDropTicket', exportOptions: exportDdtColumns },
                { extend: 'excel', title: '@Resource.headingDigitalDropTicket', exportOptions: exportDdtColumns },
                @*{ extend: 'pdf', title: '@Resource.headingDigitalDropTicket', exportOptions: exportDdtColumns, orientation: 'landscape' },*@
                {
                    extend: 'print',
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');

                        $(win.document.body).find('table')
                                .addClass('compact')
                                .css('font-size', 'inherit');
                    }
                }
            ],
            language: {
                sLoadingRecords: "<div class='spinner-small'></div><div class='fs14'>@Resource.lblLoading</div>",
                search: "<button class='btn btn-primary' id='btnsearch14'> <i class='fa fa-search'></i></button>"
            },
            initComplete: function (settings, json) {
                var api = this.api();
                var textBox = $('#Buyer-ddt-datatable_filter .input-sm');
                textBox.unbind();
                textBox.bind('keyup input', function (e) {
                    if (e.keyCode == 8 && !textBox.val() || e.keyCode == 46 && !textBox.val()) {
                    } else if (e.keyCode == 13 || !textBox.val()) {
                        api.search(this.value).draw();
                    }
                });

                $("#btnsearch14").click(function () {
                    api.search(textBox[0].value).draw();
                });
            }
        });
    });

    function reloadDdtDataTable() {
        SetLocalStorage('txtBuyerDropTicketFromDate', $('#txtBuyerDropTicketFromDate').val());
        SetLocalStorage('txtBuyerDropTicketToDate', $('#txtBuyerDropTicketToDate').val());
        buyerDropTicketGrid.ajax.reload();
        //ReloadBuyerInvoiceMap();
    }

    function exportDdtGrid() {
        ExportDataEvent('#Buyer-ddt-datatable',  @ApplicationConstants.ExportRestrictionCount,
            '@Url.Action("DigitalDropTicketGrid", "Invoice", new { area = "Buyer" })',
            '@string.Format(Resource.messageExportRestrictionCount, ApplicationConstants.ExportRestrictionCount)'
        );
    }
    function getAssetTankVessels() {
        let orders = [];
        if (window.location.href.indexOf('Invoice/View') > -1)
        {
            orders = getSelectedAssets();
        }
        return orders;
    }
</script>
