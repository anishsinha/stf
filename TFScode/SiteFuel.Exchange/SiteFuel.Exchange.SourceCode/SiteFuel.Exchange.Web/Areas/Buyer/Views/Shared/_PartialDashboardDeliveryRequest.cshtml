
@model DashBoardDeliveryRequestViewModel
<div class="well mb0 mt5">
    <div class="m-b-md mb0">
        <h2 class="fs16 f-normal mt0 mb0 dib">
            <i class="fas fa-clipboard-list"></i> @Html.ActionLink(Resource.lblDeliveryRequests, "View", "DeliveryRequest", new { area = "Buyer" }, new { @class = "mt2" })
        </h2>
        <div class="pull-right">
            <a href="#." class="color-grey fs18 ml5 toggle-tiledata" onclick="toggleData(this,'@CommonHelperMethods.GenerateTileId(BuyerDashboardTiles.DeliveryRequests.ToString())'); updateTileSetting(this, false);"><i class="fa @(Model.IsCollapsed ? " fa-chevron-circle-down" : "fa-chevron-circle-up" )"></i></a>
            <a href="#." class="color-grey fs18 ml5" onclick="removeTile(this,'@CommonHelperMethods.GenerateTileId(BuyerDashboardTiles.DeliveryRequests.ToString())'); updateTileSetting(this, true);"><i class="fa fa-times-circle"></i></a>
        </div>
    </div>
    <div class="bottom-radius tile-content mt25 @(Model.IsCollapsed ? "hide-element":"")">
        <div>
            <canvas id="delReqbarChart"></canvas>
        </div>
        <div class="pr group-element">
            <small>@Resource.labRecentdeliveryRequest</small>
            <div class="overflow-x dashboard-grids">
                <table class="table table-hover margin bottom row-pointer" id="table-dr">
                    <thead>
                        <tr>
                            <th class="no-break p10">@Resource.lblJobName</th>
                            <th>@Resource.lblAddress</th>
                            <th>@Resource.lblQuantityRequested</th>
                            <th> @Resource.lblProductType</th>
                            <th>@Resource.lblStatus</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginScripts())
{
    <script type="text/javascript">

        $(document).ready(function () {
            var mustgodelreqCount = 0;
            var shouldgodelreqCount = 0;
            var couldgodelreqCount = 0;

            function findDelReqCount(response) {
                mustgodelreqCount = response.filter(t => t.Priority == 1).length;
                shouldgodelreqCount = response.filter(t => t.Priority == 2).length;
                couldgodelreqCount = response.filter(t => t.Priority == 3).length;
            }
            function convertPrioritiesToString(response) {
                if (response.length > 0) {
                    response.forEach(function (data) {
                        if ((data.Status == @((int)DeliveryReqStatus.None)) || (data.Status == @((int)DeliveryReqStatus.Pending)) || (data.Status == @((int)DeliveryReqStatus.Assigned))) {
                            data.Status = "Not Scheduled"
                        }
                        if (data.Status == @((int)DeliveryReqStatus.ScheduleCreated)) {
                            data.Status = "Scheduled"
                        }
                        if (data.Priority == @((int)DeliveryReqStatus.Draft)) {
                            data.Status = "Drafted"
                        }
                        if (data.Priority == 1) {
                            data.Priority = "Must Go"
                        }
                        if (data.Priority == 2) {
                            data.Priority ="Should Go"
                        }
                        if (data.Priority == 3) {
                            data.Priority = "Could Go"
                        }
                    });
                    return response;
                }
            }

            function setPriorityBasedRowColors() {
                var table = document.getElementById("table-dr");
                var rows = table.getElementsByTagName("tr");
                if (rows != undefined && rows.length > 0) {
                    for (i = 0; i < rows.length; i++) {
                        if ($(rows[i]).hasClass('Could Go')) {
                            rows[i].style.backgroundColor = "#e4e2e2";
                        }
                        else if ($(rows[i]).hasClass('Should Go')) {
                            rows[i].style.backgroundColor = "#f7e6a9";
                        }
                        else if ($(rows[i]).hasClass('Must Go')) {
                            rows[i].style.backgroundColor = "#f5d0d0";
                        }
                    }
                }              
            }


            $.ajax({
                type: "get",
                url: "@Url.Action("GetDeliveryRequests","Freight", new { area="Carrier"})",
                dataType: "json",
                success: function (response) {
                    if (response.length > 0) {
                        findDelReqCount(response);
                       var respo = convertPrioritiesToString(response);
                        for (i = 0; i < respo.length; i++) {
                            $("#table-dr tbody").append("<tr class='" + respo[i].Priority +"'><td class='break-word' p10'>" + respo[i].JobName + "</td>" +
                                "<td>" + respo[i].JobAddress + "</td>" +
                                "<td>" + respo[i].RequiredQuantity + "</td>" +
                                "<td>" + respo[i].ProductType + "</td>" +
                                "<td>" + respo[i].Status + "</td>"
                            );
                        }
                        setPriorityBasedRowColors();
                        wrapperHeight();
                    }
                    else {
                        $("#table-dr tbody").append("<tr><td colspan='5'>There are no items to display</td ></tr >")
                    }

                    var canvas = document.getElementById("delReqbarChart");
                    var ctx1 = canvas.getContext("2d");

                    var drchart = new Chart(ctx1, {
                        type: 'bar',
                        data: {
                            labels: [],
                            datasets: [{
                                label: "Must Go : " + mustgodelreqCount,
                                data: [mustgodelreqCount],
                                backgroundColor: [
                                    '#d95a67',
                                ],
                                borderColor: [
                                    '#d95a67',
                                ],
                                borderWidth: 1,
                            },
                            {
                                label: "Should Go : " + shouldgodelreqCount,
                                data: [shouldgodelreqCount],
                                backgroundColor: [
                                    '#ec9f5a',
                                ],
                                borderColor: [
                                    '#ec9f5a',
                                ],
                                borderWidth: 1,
                            },
                            {
                                label: "Could Go : " + couldgodelreqCount,
                                data: [couldgodelreqCount],
                                backgroundColor: [
                                    '#a5a5a5',
                                ],
                                borderColor: [
                                    '#a5a5a5',
                                ],
                                borderWidth: 1,
                            },
                            ]
                        },
                        options: {
                            responsive: true,
                            legend: {
                                position: 'right',
                                labels: {
                                    boxWidth: 5,
                                    boxHeight: 1,
                                    fontSize: 11
                                }
                            },
                            labels: { fontColor: "grey", },
                            scales: {
                                xAxes: [{
                                    barPercentage: 1,
                                    barThickness: 2,
                                    maxBarThickness: 4
                                }]
                            },
                            hover: {
                                mode: 'single',
                                onHover: function (e) {
                                    $("#delReqbarChart").css("cursor", e[0] ? "pointer" : "default");
                                }
                            }
                            ,
                            tooltips: {
                                callbacks: {
                                    label: function (tooltipItem, data) {
                                        return data.datasets[tooltipItem['datasetIndex']].label;
                                    }
                                }
                            }
                        }
                    });

                }
            });
    });

    </script>



}