@model AssetFilterViewModel
<div class="row">
    <div class="col-sm-6">
        <div class="tankgrid">
            @if (CurrentUser.IsBuyerAdmin || CurrentUser.IsBuyer)
            {
                if (Model.JobId > 0)
                {
                    if (Model.IsJobDetails)
                    {
                        @*<a href="javascript:void(0)" id="auto-linkAssignTanks" class="mt4 float-left mr20">
                                <span class="fa fa-check-circle fs18 float-left mt1"></span> @Resource.headingAssignTanks
                            </a>*@
                        <h3 class="mt0 f-light pb5 fs21 mb0 float-left mr20">@Resource.headingTanks</h3>
                        <a id="auto-linkcreatenew" onclick='LoadTank();' class="mt5 float-left">
                            <span class="fa fa-plus-circle fs18 pull-left mt1"></span> @Resource.btnLabelCreateNew
                        </a>
                    }
                }
            }
        </div>
    </div>
    <div class="col-sm-6 text-right">
        <div class="hidden" id="jobTankBulkUpload">
            @if (CurrentUser.IsBuyerAdmin || CurrentUser.IsBuyer)
            {
                <div class="float-right">
                    <button type="button" class="btn btn-default btn-sm"
                            onclick="openBuyerTankMakeGrid()">
                        <i class="fa fa fa-th-list"></i>
                        @Resource.btnTankDipCharts
                    </button>
                </div>
                    using (Html.BeginForm("TankBulkUpload", "Asset", new { area = "Buyer", jobId = Model.JobId }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                    @Html.AntiForgeryToken()
                    @Html.Partial("_PartialTankBulkUpload")
                    }
            }
        </div>
    </div>
</div>
<div class="row tankgrid mt10">
    <div class="col-md-12">
        <div class="well bg-white shadow-b pr">
            <div class="ibox mb0">
                <div class="ibox-content no-border no-padding">
                    <div class="table-responsive">
                        <table id="tank-datatable" class="table table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th class="no-break">@Resource.gridColumnTankName</th>
                                    <th class="no-break">@Resource.gridColumnTankID</th>
                                    <th class="no-break">@Resource.gridColumnStorageId</th>
                                    <th class="no-break">@Resource.gridColumnFuelCapacity</th>
                                    <th class="no-break">@Resource.gridColumnProductType</th>
                                    <th class="no-break">@Resource.gridColumnTankMakeModel</th>
                                    @*<th class="no-break">@Resource.gridColumnThreshold</th>*@
                                    <th>@Resource.gridColumnDateAdded</th>
                                    <th>@Resource.gridColumnDipTestMethod</th>
                                    <th>@Resource.gridColumnFuelType</th>
                                    <th>@Resource.gridColumnTanksConnected</th>
                                    @*<th>@Resource.gridColumnImage</th>*@
                                    <th>@Resource.gridColumnATGPolling</th>
                                    <th>@Resource.lblTankSequence</th>
                                    @*<th>@Resource.gridColumnAction</th>*@
                                    <th>@Resource.gridColumnDelete<input class="ml-2" type="checkbox" id="select-allTanks" /></th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
       
        <div class="row">
            <div class="col-sm-12 mt10 pr15 text-right mb10 btn-wrapper">
                <div class="form-group">
                    @if (CurrentUser.IsBuyerAdmin || CurrentUser.IsBuyer)
                    {
                        <input type="button" data-toggle="confirmation" data-popout="true" data-singleton="true" data-content="All history for this tank will be removed, are you sure you want to delete?" class="btn btn-danger" value="@Resource.btnLabelDelete" id="btnTankDelete" disabled="disabled" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (Model.IsJobDetails)
{
    <div class="row assignTanks hide-element">
        <div class="col-md-12">
            @Html.Partial("~/Areas/Buyer/Views/Job/AssignTanks.cshtml")
        </div>
    </div>
}
@Html.Partial("_PartialTankSequenceUpdate", Model.JobId)
    <div class="modal fade" id="duplicateSequenceForTankDetails" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
        <div class="modal-dialog modal-md" role="document">
            <div class="pa bg-white top0 left0 z-index5 loading-wrapper hide-element"><span class='spinner-dashboard pa'></span></div>
            <div class="modal-content">
                <div class="modal-body">
                    <label>@Resource.warningDuplicateTankSequence</label>
                    <div class="text-right">
                        <button type="button" class="btn btn-lg btn-success" onclick="ConfirmYesForTankDetails()">Yes</button>
                        <button type="button" class="btn btn-lg btn-danger" onclick="ConfirmNoForTankDetails()">No</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript">

	var tankDataTable, exportColumns = {
        columns: [0, 1, 2, 3, 4, 5,6, 7, 8, 9, 10], format: {
			body: function (data, row, col, node) {
				var elementType = node.firstChild;
				if (elementType != null) {
					if (elementType.nodeName == "SELECT")
						return $(elementType).find(':selected').text();
					else
						return $(elementType).text();
				}
				else
					return data;
			}
		}
	};

    // These columns should not be visible to accouting, reporting & onsite person
	var columnToggle = ('@(CurrentUser.IsAccountingPerson || CurrentUser.IsReportingPerson || CurrentUser.IsOnsitePerson || CurrentUser.IsBuyer)' == 'False');
    var ClearFilter;
    $(document).ready(function () {

        $('#txtTankFromDate').val(GetLocalStorage('txtTankFromDate'));
        $('#txtTankToDate').val(GetLocalStorage('txtTankToDate'));

        if ('@CurrentUser.IsBuyerAdmin' == 'True' || '@CurrentUser.IsBuyer' == 'True') {
            $("#jobTankBulkUpload").removeClass('hidden');
            $("#lnkTankBulkUploadTemplate").html('@Resource.btnLabelDownloadTankSample');
            $(".btn-download").click(function () {
                hideLoader();
            });
        }

        if (@Model.JobId > 0 ? true : false) {
            $("#select-allTanks").attr("disabled", true);
        }
        else {
            $("#select-allTanks").removeAttr("disabled");
        }
        tankDocumentReady();

        ClearFilter = function () {
            $('#txtTankFromDate').val('');
            $('#txtTankToDate').val('');
            $('#txtTankToDate').data("DateTimePicker").minDate($("#txtTankFromDate").datetimepicker("minDate"));
            ReloadTankDataTable();
        }

        if ($('#txtTankFromDate').length > 0 && $('#txtTankToDate').length > 0) {
            $("#txtTankFromDate").on('dp.change dp.show', function (e) {
                if (e.date == false)
                    $('#txtTankToDate').data("DateTimePicker").minDate($("#txtTankFromDate").datetimepicker("minDate"));
                else
                    $('#txtTankToDate').data("DateTimePicker").minDate(moment($('#txtTankFromDate').val()));
            });
        }

        $('#auto-linkAssignTanks').click(function () {
            $('.tankgrid').hide();
            $('.assignTanks').show();
        });
    });

    function ReloadTankDataTable() {
        SetLocalStorage('txtTankFromDate', $('#txtTankFromDate').val());
        SetLocalStorage('txtTankToDate', $('#txtTankToDate').val());
        tankDataTable.ajax.reload();
    }

        function LoadTank() {
        var url = '@Url.Action("CreateAsset", "Job", new { area = "Buyer" })?jobId='+@Model.JobId+'&type='+@((int)AssetType.Tank)+'';
        $.get(url, function (response) {
            if (response != null || response != "") {
                $("#slider-heading").text('Create New Tank');
                $("#slider-content").html(response);
                parseForm();
                slidePanel("#sliderpanel");
                $(".lblforcastingNote").text('');
                $(".lblforcastingNote").hide();
                $("#createAssetForm").closest(".side-panel-wrapper").addClass("newasset")
            }
        }).always(
            function () {
                $("#slider-loader").hide();
            }
        );
    }

	function updateSelectAllTanksOnPageChange() {
		var allChecked = true, anyOneChecked = false;

		$('#tank-datatable tbody tr').each(function () {
			$(this).find('.chk-tank').not(":disabled").each(function () {
				if (!$(this).is(':checked')) {
					allChecked = false;
				}
				else if (anyOneChecked == false)
				{
					anyOneChecked = true;
				}
			});
		});
		$('#select-allTanks').prop('checked', allChecked);
		if (anyOneChecked == true)
		{
			$("#btnTankDelete").attr("disabled", false);
		}
		else {
			$("#btnTankDelete").attr("disabled", true);
		}
	}

    function tankDocumentReady() {
        var visible = false;
        if (@Model.IsJobDetails == 'True') {
            visible = true;
        }

                   tankDataTable = $('#tank-datatable').DataTable({
                       "ajax": {
                           "url": "@Url.Action("AssetGrid", "Asset", new { area = "Buyer" })",
                    "type": "GET",
                    "datatype": "json",
                    "data": function () {
                               var assetFilter = {
                            JobId: '@Model.JobId',
                            Filter: '@Model.Filter',
                            Type: '@((int)@AssetType.Tank)',
                            StartDate: $('#txtTankFromDate').val(),
                            EndDate: $('#txtTankToDate').val()
                        };
                           return assetFilter;
                       },
                    "dataSrc": "",

                },
                "columns": [
                            {
                                "data": function (data, type, row, meta) {
                                    if (data.IsActive) {
                                        var allowEdit = ('@CurrentUser.IsBuyerAdmin' == 'True' || '@CurrentUser.IsBuyer' == 'True') ? true : false;
                                         var isJobDetails = ('@Model.IsJobDetails' == 'True') ? true : false;
                                        return `<a onclick="slideAssetTankDetails(` + data.Id + `,2,` + allowEdit + `,`+ isJobDetails +`,true)">` + data.Name + `</a>`;
                                    }
                                    else {
                                        return data.Name;
                                    }
                                        }, "autoWidth": true
                            },
                            {
                                "data": function (data, type, row, meta) {
                                    return data.VehicleId == null ? 'aaaa' : data.VehicleId;
                                }, "autoWidth": true
                            },
                            {
                                "data": function (data, type, row, meta) {
                                    return data.Vendor == null ? 'bbbbb' : data.Vendor;
                                }, "autoWidth": true
                            },
                            { "data": "FuelCapacity", "autoWidth": true },
                            { "data": "FuelType", "autoWidth": true },
                            {
                                "data": function (data, type, row, meta) {
                                    return '<a href="' + data.TankChart + '" target="_blank">' + data.TankType + '</a>';
                                }, "autoWidth": true
                            },
                            //{ "data": "Threshold", "autoWidth": true },
							{ "data": "DateAdded", "autoWidth": true, "sType": 'date', },
                            { "data": "DipTestMethod", "autoWidth": true },
                            { "data": "TFXFuelType", "autoWidth": true },
                             {
                                "data": function (data, type, row, meta) {
                                    return data.TanksConnectedNames == null ? '@Resource.lblHyphen' : data.TanksConnectedNames;
                                }, "autoWidth": true
                             },
                            @*{
                                "data": function (data, type, row, meta) {
                                    if (data.ImageId > 0) {
                                        return "<img id='image-" + data.ImageId + "' class='img-max50' src='" + data.AzureBlobImageURL + "'/>";
                                    }
                                    else {
                                        return '@Resource.lblHyphen';
                                    }
                                }, "autoWidth": true
							},*@
                             {
                                "data": function (data, type, row, meta) {
                                    return data.IsStopATGPolling == false ? '@Resource.lblEnabled' : '@Resource.lblDisabled';
                                }, "autoWidth": true
                             },
                            {
                                "data": function (data, type, row, meta) {
                                    var allowEdit = ('@CurrentUser.IsBuyerAdmin' == 'True' || '@CurrentUser.IsBuyer' == 'True') ? true : false;
                                    if (allowEdit && data.IsActive) {
                                        if (data.TankSequence == null) {
                                            return '<span id="spntank' + data.Id + '">--</span>&nbsp;' +
                                                '<a onclick="setTankIdToChange(' + data.Id + ',' + data.TankSequence + ',' + data.CurrentJobId +');" class="ml5 " data-toggle="modal" data-target="#edit-tankSequence"><i class="fas fa-edit"></i></a>';
                                        } else {
                                            return '<span id="spntank' + data.Id + '">' + data.TankSequence + '</span>&nbsp;' +
                                                '<a onclick="setTankIdToChange(' + data.Id + ',' + data.TankSequence + ','+data.CurrentJobId+');" class="ml5 " data-toggle="modal" data-target="#edit-tankSequence"><i class="fas fa-edit"></i></a>';
                                        }
                                    } else {
                                        if (data.TankSequence == null) {
                                            return '<span id="spntank' + data.Id + '">--</span>&nbsp;'
                                        } else {
                                            return '<span id="spntank' + data.Id + '">' + data.TankSequence + '</span>&nbsp;'
                                        }
                                    }

                                }, "autoWidth": true
                            },
                            {
                                "data": function (data, type, row, meta) {
                                    return '<input type="checkbox" class = "chk-tank" id="' + data.Id + '" value = "' + data.Active + '"/>';
                                }, "autoWidth": true, "bSortable": false
                            }
                ],
                pageLength: 10,
                responsive: true,
                "order": [],
                "initComplete": function (settings, json) {
                    $('[data-toggle=confirmation]').confirmation({
                        rootSelector: '[data-toggle=confirmation]'
					});
					updateSelectAllTanksCheckboxStatus(json);
                    wrapperHeight();
                    tabGridHeader(this);
                },
				"fnDrawCallback": function (settings) {
                    $('[data-toggle=confirmation]').confirmation({
                        rootSelector: '[data-toggle=confirmation]',
                        html: true
					});
					updateSelectAllTanksOnPageChange();
					updateSelectAllTanksCheckboxStatus();
                },
                "columnDefs": [
                    { "targets": [10], "visible": columnToggle, "searchable": columnToggle },
                     ],
                dom: '<"html5buttons"B>lTfgitp',
                buttons: [
                    { extend: 'csv', title: '@Resource.headingTanks', exportOptions: exportColumns },
                    { extend: 'excel', title: '@Resource.headingTanks', exportOptions: exportColumns },
                    { extend: 'pdf', title: '@Resource.headingTanks', exportOptions: exportColumns, orientation: 'landscape' },
                    {
                        extend: 'print', exportOptions: exportColumns,
                        customize: function (win) {
                            $(win.document.body).addClass('white-bg');
                            $(win.document.body).css('font-size', '10px');

                            $(win.document.body).find('table')
                                    .addClass('compact')
                                    .css('font-size', 'inherit');
                        }
                    }
                ],
                language: {
                    sLoadingRecords: "<div class='spinner-small'></div><div class='fs14'>@Resource.lblLoading</div>"
                }
             });

            tankDataTable.on("init.dt", function () { showAjaxImages(); });

            $("#btnTankDelete").click(function () {
                var data = [], url = '@Url.Action("DeleteAssets", "Asset", new { area="Buyer"})';
				var anNodes = $("#tank-datatable tbody tr");

				for (var i = 0; i < anNodes.length; ++i) {
					if ($(anNodes[i]).find('input:checkbox').is(':checked')) {
						data.push($(anNodes[i]).find('input:checkbox').attr('id'));
					}
				}
                var model = {
                    assets: data
                };

                $.post(url, model, function (response) {
                    if (response == 0) {
                        //window.location.href = '@Url.Action("View", "Asset", new { area = "Buyer", id = Model.JobId, filter = (int)Model.Filter })';
                        window.location.reload(true);
                    }
                }, 'json');
            })
        }

		function updateSelectAllTanksCheckboxStatus()
		{
            $('#select-allTanks').click(function () {
                if ($(this).prop("checked") == true) {
					$("#btnTankDelete").attr("disabled", false);
                }
                else if ($(this).prop("checked") == false) {
					$("#btnTankDelete").attr("disabled", true);
                }
                var status = $(this).prop('checked');
                $(".chk-tank").each(function () {
                    $(this).not(":disabled").prop("checked", status);
                });
			});

            $(".chk-tank").change(function () {
                if ($(".chk-tank:checked").length > 0) {
                    $("#btnTankDelete").attr("disabled", false)
                }
                else {
                    $("#btnTankDelete").attr("disabled", true)
                }

				if ($('.chk-tank').not(":disabled").length == $(".chk-tank:checked").length) {
                    $('#select-allTanks').prop("checked", true);
                }
                else {
                    $('#select-allTanks').prop("checked", false);
                }
            });
        }
    </script>
