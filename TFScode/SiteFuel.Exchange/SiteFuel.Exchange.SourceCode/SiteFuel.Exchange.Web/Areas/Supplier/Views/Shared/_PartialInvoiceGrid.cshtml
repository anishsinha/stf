@model InvoiceFilterViewModel
<div class="row">
    <div class="col-sm-12">
        <div class="well bg-white shadow-b">
            <div class="ibox mb0">
                <div class="ibox-content no-padding no-border">
                    <div id="supplierinvoice-div" class="table-responsive">
                        <table id="supplierinvoice-datatable" data-gridname="@GridName.SupplierInvoice" class="table table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th data-key="InvoiceNumber">@Resource.gridColumnInvoiceNumber</th>
                                    <th data-key="PoNumber">@Resource.gridColumnPoNumber</th>
                                    <th data-key="UniqueDrId">@Resource.gridColumnDRID</th>
                                    <th data-key="SourcingRequestId">@Resource.gridColumnSouringRequestId</th>
                                    <th data-key="QbInvoiceNumber">@Resource.lblQuickbooksInvoiceNumber</th>
                                    <th data-key="BDRNumber">@Resource.lblBDRNo</th>
                                    <th data-key="BolNumber">@Resource.gridColumnBolLiftNumber</th>
                                    <th data-key="DeliveryLevelPO">@Resource.lblDeliveryLevelPO</th>
                                    <th data-key="LiftDate">@Resource.lblLiftDate</th>
                                    <th data-key="Carrier">@Resource.lblCarrier</th>
                                    <th data-key="BadgeNumber">@Resource.lblBadgeNumber</th>
                                    <th data-key="SupplierCustomer" nowrap>@(Model.Filter == InvoiceFilterType.BrokerInvoices ? Resource.gridColumnSupplier : Resource.gridColumnCustomer)</th>
                                    <th data-key="Location">@Resource.gridColumnLocationName</th>
                                    <th data-key="FuelType" class="no-break">@Resource.gridColumnFuelType</th>
                                    <th data-key="QuantityDelivered" class="quantity-delivered-grid uom-by-country"><span class="uom-lbl"></span>&nbsp;@Resource.lblDelivered</th>
                                    <th data-key="PrePostValues">@Resource.gridColumnPrePostValues</th>
                                    <th data-key="Terminal">@Resource.gridColumnTerminalBulkPlant</th>
                                    <th data-key="InvoiceAmount" class="invoice-amount-grid">@Resource.gridColumnInvoiceAmount (<span class="currency-by-country"></span>)</th>
                                    <th data-key="DropDate">@Resource.gridColumnDropDate</th>
                                    <th data-key="DropTime">@Resource.gridColumnDropTime</th>
                                    <th data-key="RackPPG" class="rackprice-per-qty"><span class="rack-ppg-by-country"></span></th>
                                    <th data-key="InvoiceDate">@Resource.gridColumnInvoiceDate</th>
                                    <th data-key="PaymentDueDate">@Resource.gridColumnPaymentDueDate</th>
                                    <th data-key="Driver">@Resource.gridColumnDriver</th>
                                    @*<th data-key="LiftTicketNumber">@Resource.gridColumnLiftTicketNumber</th>*@
                                    <th data-key="DropTicketNumber">@Resource.gridColumnProofofDelivery</th>
                                    <th data-key="CreationMethod">@Resource.gridColumnCreationMethod</th>
                                    <th data-key="PickupAddress">@Resource.gridColumnPickupAddress</th>
                                    <th data-key="PDIOrderNumber">@Resource.gridColumnPDIOrderID</th>
                                    <th data-key="ExternalPDIException">@Resource.gridColumnException</th>
                                    <th data-key="NetQuantity">@Resource.lblNet</th>
                                    <th data-key="GrossQuantity">@Resource.lblGross</th>
                                    <th data-key="HasAttachments">@Resource.headingAttachments</th>
                                    <th data-key="VesselName">@Resource.gridColumnVesselName</th>
                                    <th data-key="Status">@Resource.gridColumnStatus</th>
                                    <th data-key="TimeToInvoice">@Resource.gridTimeToInvoice</th>
                                    <th data-key="SelectInvoices" class="exclude-export col-hide hide"><input type="checkbox" id="select-all-invoices" /></th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<div id="invoiceModal" class="modal fade" role="dialog" data-keyboard="true" tabindex="-1">
    <div class="modal-dialog  modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="col-xs-1 pa0 inv-retry-pdi-loader" hidden>
                <span class='spinner-small'></span>
            </div>
            <div class="modal-header">
                <h4 class="modal-title">@Resource.lblExceptionDetails</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <p id="inv-exception-details" style="word-wrap: break-word;"></p>
                @Html.Hidden("inv-headerid")
                @Html.Hidden("inv-displayNumber")
                @*<p id="inv-headerid" hidden style="word-wrap: break-word;"></p>
                    <p id="inv-displayNumber" hidden style="word-wrap: break-word;"></p>*@
            </div>
            <div class="modal-footer">
                <button type="button" onclick="retryInvSendingDeliveryDetailsToPdi();" class="btn btn-default" data-dismiss="modal">Retry</button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var supplierinvoice, clearInvoiceFilter, exportInvoiceColumns = { columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34] };
    var dataGridRq;
    $(document).ready(function () {
        var invoiceSRGridColumn = '@CurrentUser.IsSalesUser' == 'True';
        var supinvoicecustomers = 'invoices-customers';
        var supinvoicelocations = 'invoices-locations';
        var supinvoicefiltertype = 'invoices-filterType'
        initDateTimePicker();
        exportInvoiceGrid();
        $('#txtSupplierInvoiceFromDate').val(GetLocalStorage('txtSupplierInvoiceFromDate'));
        $('#txtSupplierInvoiceToDate').val(GetLocalStorage('txtSupplierInvoiceToDate'));
         if(@Model.CarrierCompanyId>0)
        {
                var reportDate = '@Model.ReportDate';
             $('#txtSupplierInvoiceFromDate').val(reportDate);
             $('#txtSupplierInvoiceToDate').val(reportDate);
       }
        SetUoMCurrencyAndRacklables();
        clearInvoiceFilter = function () {
            $('#txtSupplierInvoiceFromDate').val(moment().subtract(7, 'days').format('MM/DD/YYYY'));
            $('#txtSupplierInvoiceToDate').val(moment().format('MM/DD/YYYY'));
            //$('#txtSupplierInvoiceToDate').data("DateTimePicker").minDate($("#txtSupplierInvoiceFromDate").datetimepicker("minDate"));
            reloadInvoiceDataTable();
        }

        if ($('#txtSupplierInvoiceFromDate').length > 0 && $('#txtSupplierInvoiceToDate').length > 0) {
            $("#txtSupplierInvoiceFromDate").on('dp.change dp.show', function (e) {
                if (e.date == false)
                    $('#txtSupplierInvoiceToDate').data("DateTimePicker").minDate($("#txtSupplierInvoiceFromDate").datetimepicker("minDate"));
                else
                    $('#txtSupplierInvoiceToDate').data("DateTimePicker").minDate(moment($('#txtSupplierInvoiceFromDate').val()));
            });
        }

        var startDate = "";
        function getStartDate() {
            if (window.location.href.indexOf("Broker") >= 0) {
                return $('#txtBrokerFromDate').val() == 'undefined' ? "" : $('#txtBrokerFromDate').val();
            }
            else if (window.location.href.indexOf("Invoice") >= 0 || window.location.href.indexOf("Order") >= 0) {
                return $('#txtSupplierInvoiceFromDate').val() == 'undefined' ? "" : $('#txtSupplierInvoiceFromDate').val();
            }
        }

        var endDate = "";
        function getEndDate() {
            if (window.location.href.indexOf("Broker") >= 0) {
                return $('#txtBrokerToDate').val() == 'undefined' ? "" : $('#txtBrokerToDate').val();
            }
            else if (window.location.href.indexOf("Invoice") >= 0 || window.location.href.indexOf("Order") >= 0) {
                return $('#txtSupplierInvoiceToDate').val() == 'undefined' ? "" : $('#txtSupplierInvoiceToDate').val();
            }
        }
        var sdate = getStartDate();
        var edate = getEndDate();
         var OId = '@Model.OrderId' == '' ? '@(ViewContext.RouteData.Values["id"] ?? Request.QueryString["id"])' : '@Model.OrderId';
        if ((sdate == "undefined" || edate == "undefined" || sdate == "" || edate == "") && (OId == 0)) {
            if (window.location.href.indexOf("Invoice") >= 0) {
                $('#txtSupplierInvoiceFromDate').val(moment().subtract(7, 'days').format('MM/DD/YYYY'));
                $('#txtSupplierInvoiceToDate').val(moment().format('MM/DD/YYYY'));
            }
            else if (window.location.href.indexOf("Broker") >= 0) {
                $('#txtBrokerFromDate').val(moment().subtract(7, 'days').format('MM/DD/YYYY'));
                $('#txtBrokerToDate').val(moment().format('MM/DD/YYYY'));
            }
        }
        supplierinvoice = $('#supplierinvoice-datatable').DataTable({
            "ajax": {
                "url": "@Url.Action("InvoiceGrid", "Invoice", new { area = "Supplier" })",
                "type": "POST",
                "datatype": "json",
                "data": function (data) {
                    data.OrderId = '@Model.OrderId' == '' ? '@(ViewContext.RouteData.Values["id"] ?? Request.QueryString["id"])' : '@Model.OrderId';
                    data.Filter = '@Model.Filter';
                    data.StartDate = getStartDate();
                    data.EndDate = getEndDate();
                    data.GroupIds = getCompanyGroup().groupIds;
                    data.Currency = getSelectedCountryAndCurrency().currencyType;
                    data.CountryId = getSelectedCountryAndCurrency().countryId;
                    data.CarrierCompanyId = @Model.CarrierCompanyId;
                    data.CustomerIds = JSON.parse(localStorage.getItem(supinvoicecustomers)) || [];
                    data.LocationIds = JSON.parse(localStorage.getItem(supinvoicelocations)) || [];
                    data.VesselIds = getAssetTankVessels() /*$("#filter-data-list").find(".ordervessels").val();*/
                    data.IsMarine = localStorage.getItem(supinvoicefiltertype);
                    dataGridRq = data; // for export csv,excel and print
                    $('#supplierinvoice-div').append("<div class='pa bg-white top0 left0 z-index5 loading-wrapper'><span class='spinner-dashboard pa'></span></div>");
                },
                "dataSrc": function (json) {
                    $("#supplierinvoice-div").find('.loading-wrapper').remove();
                    return json.data;
                }
            },
            'lengthMenu': [[10, 25, 50, 100, 99999999], [10, 25, 50, 100, "All"]],
            aaSorting: [[]],
            "serverSide": true,
            "searchDelay": 500,
            processing: true,
            "searching": { "regex": true },
            "bProcessing": true,
            lengthChange: true,
            "columns": [
                {
                    "data": function (data, type, row, meta) {
                        var ids = data.Id.split(';').reverse();
                        return '<a onclick="slideInvoiceDetails(' + ids[0] + ')">' + data.InvoiceNumber + '</a>' +
                            '<a onclick="setNumberToChange(' + ids[0] + ',' + "'" + data.InvoiceNumber + "'" + ');" class="ml5 broker-edit-invoice-number" data-toggle="modal" data-target="#grid-invNumberChangeModal"><i class="fas fa-edit"></i></a>';
                    }, "autoWidth": true, className: "no-wrap"
                },
                {
                    "data": function (data, type, row, meta) {
                        if (data.OrderId == 0) {
                            return data.PoNumber;
                        }
                        else {
                            var ids = data.OrderId.split(';');
                            var poNos = data.PoNumber.split(';');
                            if (ids && ids.length === 0)
                                return '<a href="@Url.Action("Details", "Order", new { area = "Supplier", id= "" })/' + data.OrderId + '">' + data.PoNumber + '</a>';
                            else if (ids && ids.length > 0) {
                                var returnUrl = '';
                                for (var i = 0; i < ids.length; i++) {
                                    returnUrl += ' <a href="@Url.Action("Details", "Order", new { area = "Supplier", id= "" })/' + ids[i] + '">' + poNos[i] + '</a> ';
                                }
                                return returnUrl;
                            }
                        }
                    }, "autoWidth": true
                },
                { "data": "UniqueDrId", "autoWidth": true },
                {
                    "data": function (data, type, row, meta) {
                        if ('@CurrentUser.IsSalesUser' == 'True' && data.SourcingRequestId != null && data.SourcingRequestId != "") {
                            return data.SourcingRequestId;
                        }
                        else {
                            return "--";
                        }
                    }, "autoWidth": true
                },
                { "data": "QbInvoiceNumber", "autoWidth": true },
                { "data": "BDRNumber", "autoWidth": true },
                { "data": "BolNumber", "autoWidth": true },
                {
                    "data": function (data) {
                        var deliveryLevelPO = data.DeliveryLevelPO.split(',');
                        if (deliveryLevelPO.length === 0) {
                            return "<div>" + deliveryLevelPO + "</div>";
                        }
                        else {
                            var deliveryReqInfo = '';
                            for (var i = 0; i < deliveryLevelPO.length; i++) {
                                deliveryReqInfo = deliveryReqInfo + "<div>" + deliveryLevelPO[i] + "</div>";
                            }
                            return deliveryReqInfo;
                        }
                    }, "autoWidth": true
                },
                { "data": "LiftDate", "autoWidth": true },
                { "data": "Carrier", "autoWidth": true },
                { "data": "BadgeNumber", "autoWidth": true },
                { "data": "Supplier", "autoWidth": true },
                { "data": "Location", "autoWidth": true },
                { "data": "FuelType", "autoWidth": true, className: "break-word" },
                { "data": "DroppedGallons", "autoWidth": true },
                {
                    "data": function (data, type, row, meta) {
                        if (data.PrePostValues != null && data.PrePostValues != "") {
                            var prePostData = data.PrePostValues.split(';');
                            if (prePostData.length === 0)
                                return data.prePostData;
                            else if (prePostData.length > 0) {
                                var returnUrl = '';
                                for (var i = 0; i < prePostData.length; i++) {
                                    returnUrl += prePostData[i] + '<br />';
                                }
                                return returnUrl;
                            }
                        } else {
                            return "--";
                        }

                    }, "autoWidth": true, className: "no-wrap"
                },
                { "data": "TerminalName", "autoWidth": true },
                { "data": "InvoiceAmount", "autoWidth": true, render: $.fn.dataTable.render.number(',', '.', 2, '@Resource.constSymbolCurrency') },
                { "data": "DropDate", "autoWidth": true },
                { "data": "DropTime", "autoWidth": true },
                { "data": "PricePerGallon", "autoWidth": true },  @*render: $.fn.dataTable.render.number(',', '.', 4, '@Resource.constSymbolCurrency')*@
                { "data": "InvoiceDate", "autoWidth": true },
                { "data": "PaymentDueDate", "autoWidth": true },
                { "data": "DriverName", "autoWidth": true },
                //{ "data": "LiftTicketNumber", "autoWidth": true },
                { "data": "DropTicketNumber", "autoWidth": true },
                { "data": "CreationMethod", "autoWidth": true },
                { "data": "PickupAddress", "autoWidth": true },
                {
                    "data": function (data, type, row, meta) {
                        if ((data.PDIOrderId == 'View Exception')) {
                            return '<button onclick="setInvoiceExceptionParams(\'' + data.ExternalPDIException + '\', \'' + data.InvoiceHeaderId + '\', \'' + data.InvoiceNumber + '\');" type="button" class="btn btn-default btn-sm" data-toggle="modal" data-target="#invoiceModal">View Exception</button>';
                        } else return data.PDIOrderId;
                    }, "autoWidth": true
                },
                {
                    "data": function (data, type, row, meta) {
                        if ((data.ExternalPDIException == "" || data.ExternalPDIException == null || data.ExternalPDIException == '--')) {
                            return '--';
                        } else return data.ExternalPDIException;
                    }, "autoWidth": true
                },
                //{ "data": "PDIDetailsDate", "autoWidth": true },
                { "data": "TotalNetQuantity", "autoWidth": true },
                { "data": "TotalGrossQuantity", "autoWidth": true },
                { "data": "HasAttachments", "autoWidth": true },
                { "data": "VesselName", "autoWidth": true },
                { "data": "Status", "autoWidth": true },
                { "data": "TimeToInvoice", "autoWidth": true },
                {
                    "data": function (data, type, row, meta) {
                        return '<input type="checkbox" class="chk-invoice" invoiceNumber="' + data.InvoiceNumber + '" id="' + data.Id + '" /><br /><span class="color-green hide ico-invoice-sent"><i class="fas fa-check-circle"></i> Email Sent</span>';
                    }, "autoWidth": true, "bSortable": false, className: "col-hide hide"
                },
                { "data": "Id", "autoWidth": true },
            ],
            pageLength: 10,
            responsive: true,
            fixedHeader: false,
			"order": [36, 'desc'],
            "initComplete": function (settings, json) {
                wrapperHeight();
                tabGridHeader(this);
            },
            "drawCallback": function (settings, json) {
                hideLinksForCompanyGroup(this);
                var hasOrderId = '@(Model.OrderId > 0)';
                if (hasOrderId == 'True' && $.isFunction(window.setInvoicesBackground)) {
                    setInvoicesBackground();
                }
            },
            "columnDefs": [
                { "name": "InvoiceNumber", "targets": 0, "regex": false },
                { "name": "PoNumber", "targets": 1 },
                { "name": "UniqueDrId", "targets": 2 },
                { "targets": [3],"name": "SourcingRequestId", "visible": invoiceSRGridColumn, "searchable": invoiceSRGridColumn },
                { "name": "QbInvoiceNumber", "targets": 4, "visible": false },
                { "name": "BDRNumber", "targets": 5, "visible": false },
                { "name": "BolNumber", "targets": 6 },
                { "name": "DeliveryLevelPO", "targets": 7, "visible": false },
                { "name": "LiftDate", "targets": 8 },
                { "name": "Carrier", "targets": 9 },
                { "name": "BadgeNumber", "targets": 10 },
                { "name": "Supplier", "targets": 11 },
                { "name": "Location", "targets": 12 },
                { "name": "FuelType", "targets": 13 },
                { "name": "DroppedGallons", "targets": 14 },
                { "name": "PrePostValues", "targets": 15 },
                { "name": "TerminalName", "targets": 16 },
                { "name": "InvoiceAmount", "targets": 17 },
                { "name": "DropDate", "targets": 18 },
                { "name": "DropTime", "targets": 19 },
                { "name": "PricePerGallon", "targets": 20 },
                { "name": "InvoiceDate", "targets": 21 },
                { "name": "PaymentDueDate", "targets": 22 },
                { "name": "DriverName", "targets": 23 },
                //{ "name": "LiftTicketNumber", "targets": 16 },
                { "name": "DropTicketNumber", "targets": 24 },
                { "name": "CreationMethod", "targets": 25 },
                { "name": "PickupAddress", "targets": 26 },
                { "name": "PDIOrderId", "targets": 27 },
                { "name": "ExternalPDIException", "targets": 28 },
                { "name": "TotalNetQuantity", "targets": 29 },
                { "name": "TotalGrossQuantity", "targets": 30 },
                { "name": "HasAttachments", "targets": 31 },
                { "name": "VesselName", "targets": 32, "visible": false },
                { "name": "Status", "targets": 33 },
                { "name": "TimeToInvoice", "targets": 34 },
                { "targets": [36], "visible": false, "searchable": false },
                {
                    targets: [1,2, 4,6, 10, 13, 14,15, 16, 18, 19, 20, 26],
                    //replace semicolons in each cell contents within columns 3, 4, 5 with new line tag `<br>`
                   // render: (data, type, row, meta) => data ? data.replace(/;/g, '<br>') : ''
                    render: function (data, type, row, meta) { if (data) return data.replace(/;/g, '<br>'); else return ''; }
                }
            ],
            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                { extend: 'colvis', columns: exportInvoiceColumns.columns },
                { extend: 'csv', title: '@Resource.headingInvoices', exportOptions: exportInvoiceColumns },
                { extend: 'excel', title: '@Resource.headingInvoices', exportOptions: exportInvoiceColumns },
                @*{ extend: 'pdf', title: '@Resource.headingInvoices', exportOptions: exportInvoiceColumns, orientation: 'landscape' },*@
                {
                    extend: 'print',
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');

                        $(win.document.body).find('table')
                            .addClass('compact')
                            .css('font-size', 'inherit');
                    }
                }
            ],
            language: {
                sLoadingRecords: "<div class='spinner-small'></div><div class='fs14'>@Resource.lblLoading</div>",
                search: "<button class='btn btn-primary' id='btnsearch2'> <i class='fa fa-search'></i></button>"
            },
            initComplete: function (settings, json) {
                var api = this.api();
                var textBox = $('#supplierinvoice-datatable_filter .input-sm');
                textBox.unbind();
                textBox.bind('keyup input', function (e) {
                    if (e.keyCode == 8 && !textBox.val() || e.keyCode == 46 && !textBox.val()) {
                    } else if (e.keyCode == 13 || !textBox.val()) {
                        api.search(this.value).draw();
                    }
                });

                $("#btnsearch2").click(function () {
                    api.search(textBox[0].value).draw();
                });
            }
        });
    });

    function reloadInvoiceDataTable() {
        SetLocalStorage('txtSupplierInvoiceFromDate', $('#txtSupplierInvoiceFromDate').val());
        SetLocalStorage('txtSupplierInvoiceToDate', $('#txtSupplierInvoiceToDate').val());
        supplierinvoice.ajax.reload();
    }

    function exportInvoiceGrid() {
        ExportDataEvent('#supplierinvoice-datatable',  @ApplicationConstants.ExportRestrictionCount,
            '@Url.Action("InvoiceGrid", "Invoice", new { area = "Supplier"})',
            '@string.Format(Resource.messageExportRestrictionCount, ApplicationConstants.ExportRestrictionCount)'
        );
    }

    function setNumberToChange(id, number) {
        $("#displayNumberToChange").val(number);
        $("#invoiceIdToChange").val(id);
    }

    function editInvoiceNumberFromGrid() {

        var invId = $("#invoiceIdToChange").val();
        var invNumber = $("#displayNumberToChange").val();
        if ($.trim(invNumber) == '') {
            //validationMessageFor("Invoice.DisplayInvoiceNumber", valMessageInvoiceNumber);
            return false;
        }

        var editInvoiceNumberUrl = '@Url.Action("EditInvoiceNumber", "Invoice", new {area = "Supplier"})?id=' + invId + '&displayInvoiceNumber=';

        var targetUrl = editInvoiceNumberUrl + escape(invNumber);
        $("#grid-invNumberChangeModal").find('.loading-wrapper').show();
        $.post(targetUrl, function (response) {
            if (response.StatusCode == 0) { // 0=Success, 1=Failed
                msgsuccess(response.StatusMessage);
                if (supplierinvoice) {
                    supplierinvoice.ajax.reload();
                }
            }
            else {
                msgerror(response.StatusMessage);
            }

        }).always(function () { $("#grid-invNumberChangeModal").find('.loading-wrapper').hide(); });
    }
    function setInvoiceExceptionParams(exceptionMsg, id, displayNumber) {
        if (exceptionMsg != '' && exceptionMsg != null && exceptionMsg != undefined) {
            $("#inv-headerid").val('');
            $("#inv-displayNumber").val('');
            $("#inv-exception-details").html(exceptionMsg);
            $("#inv-headerid").val(id);
            $("#inv-displayNumber").val(displayNumber);
        }
        return exceptionMsg;
    }

    function retryInvSendingDeliveryDetailsToPdi() {
        setTimeout(function () {
            var url = '@Url.Action("RetryPDI", "Invoice", new { area = "Supplier" })';
            var invheaderId = parseInt($("#inv-headerid").val());
            var invdisplayInvoiceNumber = $("#inv-displayNumber").val();
                var data = {
                    headerId: invheaderId,
                    displayNumber: invdisplayInvoiceNumber
                };
                $(".inv-retry-pdi-loader").show();
                $.post(url, data, function (response) {
                    $(".inv-retry-pdi-loader").hide();
                    showSuccessErrorMsg(response);
                    if (response.indexOf('success') != -1) {
                        window.location.reload();
                    }
                });
        }, 1000);
    }
    function getAssetTankVessels() {
        let orders = [];
        if (window.location.href.indexOf('Invoice/View') > -1) {
            orders = getSelectedAssets();
        }
        return orders;
    }


     function ClearFiltertxtSupplierInvoice(){
        $('#txtSupplierInvoiceFromDate').val('');
        $('#txtSupplierInvoiceToDate').val('');
         reloadInvoiceDataTable()

     }
</script>
<div class="modal fade" id="grid-invNumberChangeModal" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel">
    <div class="modal-dialog modal-sm" role="document">
        <div class="pa bg-white top0 left0 z-index5 loading-wrapper hide-element"><span class='spinner-dashboard pa'></span></div>
        <div class="modal-content">
            <div class="modal-body">
                <div class="overflow-h">
                    <h4 class="float-left mb5 pt0 pb0">Edit Invoice Number</h4>
                    <button aria-label="Close" class="close color-grey pull-right pa" data-dismiss="modal" type="button"><i class="fa fa-close fs21"></i></button>
                </div>
                <div class="mt15 mb15">
                    <input id="displayNumberToChange" type="text" class="form-control" autofocus />
                    <input id="invoiceIdToChange" type="text" class="hide-element" />
                </div>
                <div class="text-right">
                    <button type="button" class="btn" data-dismiss="modal">Cancel</button>
                    <button type="button" onclick="editInvoiceNumberFromGrid();" class="btn btn-primary" data-dismiss="modal">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>
