@model OrderFilterViewModel
<div class="row">
    <div class="col-12 col-md-12">
        <div class="well bg-white shadow-b">
            <div class="ibox mb0">
                <div class="ibox-content no-border no-padding">
                    <div id="brokeredfuelrequest-div" class="table-responsive">
                        <table id="supplier-brokeredfuelrequest-datatable" class="table table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>@Resource.gridColumnCustomer</th>
                                    <th>@Resource.gridColumnRequestNumber</th>
                                    <th>@Resource.gridColumnPoNumber</th>
                                    <th>@Resource.gridColumnAddress</th>
                                    <th class="no-break">@Resource.gridColumnFuelType</th>
                                    <th>@Resource.lblOnsiteContact</th>
                                    <th class="uom-by-country"><span class="uom-lbl"></span> &nbsp;@Resource.lblRequested</th>
                                    <th class="rack-ppg-by-country"></th>
                                    <th>@Resource.gridColumnStatus</th>
                                    <th class="exclude-export">@Resource.gridColumnCounterOffer</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var supplierBrokeredFuelRequestGrid, exportColumns = { columns: [0, 1, 2, 3, 4, 5, 6, 7, 8] };
    var dataGridRq;
    $(document).ready(function () {

        ExportGrid();
        SetUoMCurrencyAndRacklables();
        supplierBrokeredFuelRequestGrid = $('#supplier-brokeredfuelrequest-datatable').DataTable({
            "ajax": {
                "url": "@Url.Action("BrokeredFuelRequestView", "Broker", new { area ="Supplier" })",
                "type": "POST",
                "datatype": "json",
                "data": function (data) {
                    data.StartDate = $('#txtBrokerFromDate').val();
                    data.EndDate = $('#txtBrokerToDate').val();
                    data.OrderId = '@Model.OrderId';
                    data.Currency = getSelectedCountryAndCurrency().currencyType;
                    data.CountryId = getSelectedCountryAndCurrency().countryId;
                    dataGridRq = data;
                    $('#brokeredfuelrequest-div').append("<div class='pa bg-white top0 left0 z-index5 loading-wrapper'><span class='spinner-dashboard pa'></span></div>");
                },
                "dataSrc": function (json) {
                    $("#brokeredfuelrequest-div").find('.loading-wrapper').remove();
                    return json.data;
                }
            },
            "columns": [
                { "data": "Customer", "autoWidth": true },
                        {
                            "data": function (data, type, row, meta) {
                                return '<a href="@Url.Action("Details", "Broker", new { area = "Supplier" })?id=' + data.FuelRequestId + '">' + data.RequestNumber + '</a>';
                            }, "autoWidth": true
						},
						{
                            "data": function (data, type, row, meta) {
                                if (data.OrderId > 0) {
                                    return '<a href="@Url.Action("Details", "Order", new { area = "Supplier", id="" })/' + data.OrderId + '?isBrokeredRequest=true">' + data.PONumber + '</a>';
                                }
                                else {
                                    return '@Resource.lblHyphen';
                                }
                            }, "autoWidth": true
                        },
                { "data": "Address", "autoWidth": true },
                { "data": "FuelType", "autoWidth": true, className: "break-word" },
                        {
                            "data": function (data, type, row, meta) {
                                return (data.ContactPerson == '' || data.ContactPerson == null) ? '@Resource.lblHyphen' : data.ContactPerson;
                            }, "autoWidth": true
                        },
                        {
                            "data": function (data, type, row, meta) {
                                return (data.QuantityTypeId == @((int)QuantityType.NotSpecified)) ? '@Resource.lblNotSpecified' : data.OrderedGallons;
                            }, "autoWidth": true
                        },
                        { "data": "PricePerGallon", "autoWidth": true },
                        { "data": "Status", "autoWidth": true },
                            {
                                "data": function (data, type, row, meta) {
                                    return data.IsCounterOfferAvailable == true && data.StatusId == @((int)FuelRequestStatus.Open) ? '<a href="#CounterOfferGrid" class="btn btn-warning btn-xs" title="@Resource.lblViewCounterOfferForFuelRequest" onclick="ReloadCounterOfferGrid(' + data.FuelRequestId + ')" >@Resource.btnLabelShowCounterOffer</a>' : '<div class="text-center">@Resource.lblHyphen<div>';
                                }, "autoWidth": true
                            }
            ],
            "columnDefs": [
                { "name": "Customer", "targets": 0, "regex": false },
                { "name": "RequestNumber", "targets": 1 },
                { "name": "PONumber", "targets": 2 },
                { "name": "Address", "targets": 3 },
                { "name": "FuelType", "targets": 4 },
                { "name": "OnsiteContact", "targets": 5 },
                { "name": "GallonsRequested", "targets": 6 },
                { "name": "PricePerGallon", "targets": 7 },
                { "name": "Status", "targets": 8 }
            ],
            'lengthMenu': [[10, 25, 50, 100, 99999999], [10, 25, 50, 100, "All"]],
            "serverSide": true,
            "searchDelay": 500,
            processing: true,
            "searching": { "regex": true },
            "bProcessing": true,
            lengthChange: true,
            pageLength: 10,
            responsive: true,
            destroy: true,
            "order": [[1,'desc']],
            "initComplete": function (settings, json) {
                wrapperHeight();
            },
            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                { extend: 'csv', title: '@Resource.headingBrokeredFuelRequests', exportOptions: exportColumns },
                { extend: 'excel', title: '@Resource.headingBrokeredFuelRequests' , exportOptions: exportColumns},
                @*{ extend: 'pdf', title: '@Resource.headingBrokeredFuelRequests', exportOptions: exportColumns, orientation: 'landscape' },*@
                {
                    extend: 'print', exportOptions: exportColumns,
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');

                        $(win.document.body).find('table')
                                .addClass('compact')
                                .css('font-size', 'inherit');
                    }
                }
            ],
            language: {
                sLoadingRecords: "<div class='spinner-small'></div><div class='fs14'>@Resource.lblLoading</div>",
                search: "<button class='btn btn-primary' id='btnsearch5'> <i class='fa fa-search'></i></button>"
            },
            initComplete: function (settings, json) {
                var api = this.api();
                var textBox = $('#supplier-brokeredfuelrequest-datatable_filter .input-sm');
                textBox.unbind();
                textBox.bind('keyup input', function (e) {
                    if (e.keyCode == 8 && !textBox.val() || e.keyCode == 46 && !textBox.val()) {
                    } else if (e.keyCode == 13 || !textBox.val()) {
                        api.search(this.value).draw();
                    }
                });

                $("#btnsearch5").click(function () {
                    api.search(textBox[0].value).draw();
                });
            }
        });
    });

    function ReloadDataTable() {
        supplierBrokeredFuelRequestGrid.ajax.reload();
        supplierBrokeredCounterOffersGrid.ajax.reload();
    }

    function ReloadCounterOfferGrid(fuelRequestId) {
        var url = '@Url.Action("BrokeredCounterOffersView", "Broker", new { area = "Supplier" })?fuelRequestId=' + fuelRequestId;
        supplierBrokeredCounterOffersGrid.ajax.url(url);
        supplierBrokeredCounterOffersGrid.ajax.reload();
    }

    function ExportGrid() {
        registerExportDataEvent('#supplier-brokeredfuelrequest-datatable',  @ApplicationConstants.ExportRestrictionCount,
            '@Url.Action("BrokeredFuelRequestView", "Broker", new { area = "Supplier" })',
            '@string.Format(Resource.messageExportRestrictionCount, ApplicationConstants.ExportRestrictionCount)',
            function callBack(jsonResult) {

               return $.map(jsonResult.responseJSON.data, function (item) {
                    return {
                        Customer: item.Customer,
                        RequestNumber: item.RequestNumber,
                        PONumber: item.PONumber,
                        Address: item.Address,
                        FuelType: item.FuelType,
                        ContactPerson: (item.ContactPerson == '' || item.ContactPerson == null) ? '@Resource.lblHyphen' : item.ContactPerson,
                        OrderedGallons: (item.QuantityTypeId == @((int)QuantityType.NotSpecified)) ? '@Resource.lblNotSpecified' : item.OrderedGallons,
                        PricePerGallon: item.PricePerGallon,
                        Status: item.Status
                    };
                });
            }
        );
    }
</script>
