@model BDRDetailsModel
<div class="row">
    <div class="col-sm-2">
        <div class="form-group">
            @Html.HiddenFor(m => m.BDRNumber)
            <label class="f-normal">@Resource.lblDeliveryPumpingStartTime</label>
            @Html.TextBoxFor(m => m.PumpingStartTime, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.PumpingStartTime)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Resource.lblDeliveryPumpingCompletionTime</label>
            @Html.TextBoxFor(m => m.PumpingStopTime, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.PumpingStopTime)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Resource.lblOpenMeterReading</label>
            @Html.TextBoxFor(m => m.OpenMeterReading, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.OpenMeterReading)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Resource.lblCloseMeterReading</label>
            @Html.TextBoxFor(m => m.CloseMeterReading, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.CloseMeterReading)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Resource.lblMARPOLSampleNumbers</label>
            @Html.TextBoxFor(m => m.MarpolSampleNumbers, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.MarpolSampleNumbers)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Resource.lblMVMARPOLSampleNumbers</label>
            @Html.TextBoxFor(m => m.MVMarpolSampleNumbers, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.MVMarpolSampleNumbers)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Html.Raw(Resource.lblViscosity)</label>
            @Html.TextBoxFor(m => m.Viscosity, new { @class = "form-control", onkeypress = "return isNumberKey(event)" })
            @Html.ValidationMessageFor(m => m.Viscosity)
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Resource.lblSulfurContent</label>
            @Html.TextBoxFor(m => m.SulphurContent, new { @class = "form-control", onkeypress = "return isNumberKey(event)" })
            @Html.ValidationMessageFor(m => m.SulphurContent)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Html.Raw(Resource.lblFlashPoint)</label>
            @Html.TextBoxFor(m => m.FlashPoint, new { @class = "form-control", onkeypress = "return isNumberKey(event)" })
            @Html.ValidationMessageFor(m => m.FlashPoint)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Resource.lblDensityInVacuum</label>
            @Html.TextBoxFor(m => m.DensityInVaccum, new { @class = "form-control", onkeypress = "return isNumberKey(event)" })
            @Html.ValidationMessageFor(m => m.DensityInVaccum)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Html.Raw(Resource.lblObservedTemperature)</label>
            @Html.TextBoxFor(m => m.ObservedTemperature, new { @class = "form-control", onkeypress = "return isNumberKey(event)" })
            @Html.ValidationMessageFor(m => m.ObservedTemperature)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Resource.lblMeasuredVolume</label>
            @Html.TextBoxFor(m => m.MeasuredVolume, new { @class = "form-control", @onchange="calculateStandardVolume();" })
            @Html.ValidationMessageFor(m => m.MeasuredVolume)
        </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <label class="f-normal">@Resource.lblStandardVolume</label>
            @Html.TextBoxFor(m => m.StandardVolume, new { @class = "form-control pntr-none subSectionOpacity", @readonly = "readonly" })
            @Html.ValidationMessageFor(m => m.StandardVolume)
        </div>
    </div>
</div>
<div class="row">
    <div class="form-check form-check-inline checkbox mb7">
        @Html.CheckBoxFor(m => m.IsEngineerInvitedToWitnessSample, new { @class = "form-check-input" })
        <label class="form-check-label" for="isEngineerInvitedToWitnessSample"> @Resource.lblChiefEngineerInvited</label>
    </div>
    <div class="form-check form-check-inline checkbox mb7">
        @Html.CheckBoxFor(m => m.IsNoticeToProtestIssued, new { @class = "form-check-input" })
        <label class="form-check-label" for="isNoticeToProtestIssued"> @Resource.lblNoticeToProtestIssued</label>
    </div>
</div>
<script type="text/javascript">
    function calculateStandardVolume() {
        var measuredVolume = $("#@Html.IdFor(m => m.MeasuredVolume)").val();
        $("#@Html.IdFor(m => m.StandardVolume)").val(measuredVolume);
    }
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
</script>


