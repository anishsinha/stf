@model BrokerFilterViewModel
<div class="row">
    <div class="col-md-12">
        <div class="well bg-white shadow-b">
            <div class="ibox mb0">
                <div class="ibox-content no-border no-padding">
                    <div id="broker-order-div" class="table-responsive">
                        <table id="brokerorder-datatable" class="table table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>@Resource.gridColumnPoNumber</th>
                                    <th>@Resource.gridColumnSupplier</th>
                                    <th>@Resource.gridColumnDBE </th>
                                    <th class="no-break">@Resource.gridColumnFuelType</th>
                                    <th>@Resource.gridColumnCustomerPo</th>                                  
                                    <th class="uom-by-country"><span class="uom-lbl"></span> &nbsp;@Resource.lblRequested</th>                                   
                                    <th class="rack-ppg-by-country"></th>                                   
                                    <th>@Resource.gridColumnOrderCompleted</th>
                                    <th>@Resource.gridColumnStatus</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var brokerOrdersGrid, exportColumns = { columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] };
    var dataGridRq;
    $(document).ready(function () {
     ExportGrid();
     SetUoMCurrencyAndRacklables();
     $('#customerPo').hover(function() { return ""; });
        brokerOrdersGrid = $('#brokerorder-datatable').DataTable({
            "ajax": {
                "url": "@Url.Action("OrdersGrid", "Broker", new { area= "Supplier" })",
                "type": "POST",
                "datatype": "json",
                "data": function (d) {
                    d.StartDate = $('#txtBrokerFromDate').val();
                    d.EndDate = $('#txtBrokerToDate').val();
                    d.Currency = getSelectedCountryAndCurrency().currencyType;
                    d.CountryId = getSelectedCountryAndCurrency().countryId;
                    dataGridRq = d;
                    $('#brokerorder-datatable').append("<div class='pa bg-white top0 left0 z-index5 loading-wrapper'><span class='spinner-dashboard pa'></span></div>");
                },
                "dataSrc": function (json) {
                    $("#brokerorder-datatable").find('.loading-wrapper').remove();
                    return json.data;
                }
            },
            "columns": [
                {
                    "data": function (data, type, row, meta) {
                        if (data.Id > 0) {
                            return '<a href="@Url.Action("Details", "Order", new { area = "Supplier", id="" })/' + data.Id + '?isBrokeredRequest=true">' + data.PoNumber + '</a>';
                        }
                        else {
                            return '@Resource.lblHyphen';
                        }
                    }, "autoWidth": true
                },
                { "data": "Supplier", "autoWidth": true },
                { "data": "Eligibility", "autoWidth": true },
                { "data": "FuelType", "autoWidth": true },
                {
                    "data": function (data, type, row, meta) {
                        if (data.Id > 0) {
                            return '<a data-toggle="tooltip" data-placement="bottom" title="PO # between you and your customer" href="@Url.Action("Details", "Order", new { area = "Supplier", id="" })/' + data.CustomerOrderId + '?isBrokeredRequest=false">' + data.CustomerPoNumber + '</a>';
                        }
                        else {
                            return '@Resource.lblHyphen';
                        }
                    }, "autoWidth": true
                },
                { "data": "Quantity", "autoWidth": true },
                { "data": "PricePerGallon", "autoWidth": true },
                @*{
                    "data": function (data) {
                        if (data.TotalAmount == '@Resource.lblHyphen') {
                            return data.TotalAmount;
                        }
                        else {
                            return '@Resource.constSymbolCurrency' + data.TotalAmount;
                        }
                    }, "autoWidth": true
                },*@
                {
                    "data": function (data) {
                        if (data.FuelDeliveredPercentage == '@Resource.lblHyphen') {
                            return data.FuelDeliveredPercentage;
                        }
                        else {
                            return data.FuelDeliveredPercentage + '@Resource.constSymbolPercent';
                        }
                    }, "autoWidth": true
                },
                { "data": "Status", "autoWidth": true },
                { "data": "Id", "autoWidth": true }
            ],
            "columnDefs": [
                { "name": "PoNumber", "targets": 0, "regex": false },
                { "name": "Supplier", "targets": 1 },
                { "name": "Eligibility", "targets": 2 },
                { "name": "FuelType", "targets": 3 },
                { "name": "CustomerPoNumber", "targets": 4 },
                { "name": "Quantity", "targets": 5 },
                { "name": "PricePerGallon", "targets": 6 },
                //{ "name": "TotalAmount", "targets": 7 },
                { "name": "FuelDeliveredPercentage", "targets": 7, "regex": false },
                { "name": "Status", "targets": 8, "regex": false },
                { "targets": [9], "visible": false, "searchable": false }
            ],
            'lengthMenu': [[10, 25, 50, 100, 99999999], [10, 25, 50, 100, "All"]],
            aaSorting: [[]],
            "serverSide": true,
            "searchDelay": 500,
            processing: true,
            "searching": { "regex": true },
            "bProcessing": true,
            lengthChange: true,
            pageLength: 10,
            responsive: true,
            fixedHeader:false,
            "order": [9, 'desc'],
            "initComplete": function (settings, json) {
                wrapperHeight();
                tabGridHeader(this)
            },
            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                { extend: 'copy' },
                { extend: 'csv', title: '@Resource.headingBrokeredOrders' },
                { extend: 'excel', title: '@Resource.headingBrokeredOrders' },
                @*{ extend: 'pdf', title: '@Resource.headingBrokeredOrders' },*@
                {
                    extend: 'print',
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');

                        $(win.document.body).find('table')
                            .addClass('compact')
                            .css('font-size', 'inherit');
                    }
                }
            ],
            language: {
                sLoadingRecords: "<div class='spinner-small'></div><div class='fs14'>@Resource.lblLoading</div>",
                search: "<button class='btn btn-primary' id='btnsearch8'> <i class='fa fa-search'></i></button>"
            },
            initComplete: function (settings, json) {
                var api = this.api();
                var textBox = $('#brokerorder-datatable_filter .input-sm');
                textBox.unbind();
                textBox.bind('keyup input', function (e) {
                    if (e.keyCode == 8 && !textBox.val() || e.keyCode == 46 && !textBox.val()) {
                    } else if (e.keyCode == 13 || !textBox.val()) {
                        api.search(this.value).draw();
                    }
                });

                $("#btnsearch8").click(function () {
                    api.search(textBox[0].value).draw();
                });
            }
        });
    });

    function ReloadDataTable() {
        brokerOrdersGrid.ajax.reload();
        ReloadBrokerSupplierOrderMap();
    }

    function ExportGrid() {
        registerExportDataEvent('#brokerorder-datatable',  @ApplicationConstants.ExportRestrictionCount,
            '@Url.Action("OrdersGrid", "Broker", new { area = "Supplier"})',
            '@string.Format(Resource.messageExportRestrictionCount, ApplicationConstants.ExportRestrictionCount)',
            function callBack(jsonResult) {

               return $.map(jsonResult.responseJSON.data, function (item) {
                    return {
                        PoNumber: item.PoNumber,
                        Supplier: item.Supplier,
                        Eligibility: item.Eligibility,
                        FuelType: item.FuelType,
                        CustomerPoNumber: item.CustomerPoNumber,
                        Quantity: item.Quantity,
                        PricePerGallon: item.PricePerGallon,
                        //TotalAmount: 0,
                        FuelDeliveredPercentage: (item.FuelDeliveredPercentage == '@Resource.lblHyphen') ? item.FuelDeliveredPercentage : item.FuelDeliveredPercentage + '@Resource.constSymbolPercent',
                        Status: item.Status
                    };
                });
            }
        );
    }
</script>
