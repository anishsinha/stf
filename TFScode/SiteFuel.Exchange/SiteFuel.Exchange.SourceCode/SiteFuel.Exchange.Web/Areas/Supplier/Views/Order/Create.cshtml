@model ThirdPartyOrderViewModel
@using System.ComponentModel.DataAnnotations
@{
    if (Model.FuelDetails.IsMarineLocation && !Model.IsCloneOrder)
    {
        ViewBag.Title = "Create Nomination";
    }
    else if (Model.IsCloneOrder)
    {
        ViewBag.Title = !Model.FuelDetails.IsMarineLocation ? "Clone Order" : "Clone Nomination";
    }
    else
    {
        ViewBag.Title = "Create New Order";
    }
}
<script src="~/Content/js/common-supplier.js"></script>

<div class="row">
    <div class="col-sm-9 mb10 tab-headers no-tab-remembering">
        <a id="tab-tpo-details" href="javascript:void(0)" onclick="showsection('tpo-details'), activelink(this)" class="active mr20">
            <div class="step-inprogress fs16">
                <span class="f-light step-text float-left">Order</span>
            </div>
        </a>
        <a id="tab-tpo-pricing" href="javascript:void(0)" onclick="showsection('tpo-pricing'), activelink(this)" class="mr20">
            <div class="step-inprogress fs16">
                <span class="f-light step-text float-left">Pricing &amp; Quantity</span>
            </div>
        </a>
        <a id="tab-tpo-delivery" href="javascript:void(0)" onclick="showsection('tpo-delivery'), activelink(this)" class="mr20">
            <div class="step-inprogress fs16">
                <span class="f-light step-text float-left">Delivery &amp; Fees</span>
            </div>
        </a>
        <a id="tab-tpo-other" href="javascript:void(0)" onclick="showsection('tpo-other'), activelink(this)" class="mr20">
            <div class="step-inprogress fs16">
                <span class="f-light step-text float-left">Other</span>
            </div>
        </a>
    </div>
    <div class="col-sm-3 text-right">
        <div class="btn-group mtm3">
            @using (Html.BeginForm("SaveTPOBulkUploadCsv", "Order", new { area = "Supplier" }, FormMethod.Post, new { @id = "orderBulkUploadForm", enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.Partial("_PartialOrderBulkUpload")
            }
        </div>
    </div>
</div>

@using (Html.BeginForm("Create", "Order", new { area = "Supplier" }, FormMethod.Post, new { enctype = "multipart/form-data", @id = "createOrderForm" }))
{
    @Html.HiddenFor(m => m.FuelDeliveryDetails.IsOrderEndDateRequired)
    @Html.HiddenFor(m => m.IsOnboardingPreferenceExists)

    if (Model.IsOnboardingPreferenceExists && Model.PreferencesSetting != null)
    {
        @Html.HiddenFor(m => m.PreferencesSetting.PreferencePricingMethod)
        @Html.HiddenFor(m => m.PreferencesSetting.IsSupressOrderPricing)
        @Html.HiddenFor(m => m.PreferencesSetting.Id)
        @Html.HiddenFor(m => m.PreferencesSetting.IsAdditiveBlendingEnabled)
    }
    @Html.HiddenFor(m => m.FuelDetails.IsMarineLocation)
    @Html.HiddenFor(m => m.AddressDetails.IsMarineLocation, new { @class = "IsMarineLocation" })
    <div class="row">
        <div class="col-sm-9">
            <div class="tab-container">
                <div id="tpo-details" data-parent-tab="tab-tpo-details" class="subTabs animated fadeIn">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="col-sm-12 well mb15">
                                <div class="col-sm-12">
                                    <h4>@Resource.headingCustomerInformation</h4>
                                    <!-- customer details starts -->
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <div class="custom-control custom-radio custom-control-inline radio">
                                                @Html.RadioButtonFor(m => m.CustomerDetails.IsNewCompany, true, new { @id = "radio-newcustomer", @class = "custom-control-input", onclick = "inputBoxShowHide('new-CompanyName','existing-CompanyName')", onchange = "isExistingCompanyRadioSelected(false);" })
                                                <label class="custom-control-label" for="radio-newcustomer">@Resource.lblNew</label>
                                            </div>
                                            <div class="custom-control custom-radio custom-control-inline radio">
                                                @Html.RadioButtonFor(m => m.CustomerDetails.IsNewCompany, false, new { @id = "radio-existingcustomer", @class = "custom-control-input", onclick = "inputBoxShowHide('existing-CompanyName','new-CompanyName')", onchange = "isExistingCompanyRadioSelected(true);" })
                                                <label class="custom-control-label" for="radio-existingcustomer">@Resource.lblExisting</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row mt-2">
                                        <div class="col-sm-4 col-md-3">
                                            <div class="form-group mb0">
                                                @Html.HiddenFor(m => m.CustomerDetails.IsNewCompany)
                                                @*@Html.HiddenFor(m => m.CustomerDetails.CompanyId)*@
                                                @Html.LabelFor(m => m.CustomerDetails.CompanyName)
                                                <div class="mtm1 new-CompanyName">
                                                    @Html.TextBoxFor(m => m.CustomerDetails.CompanyName, new { @class = "form-control", @placeholder = Resource.lblCompany })
                                                    @Html.ValidationMessageFor(m => m.CustomerDetails.CompanyName)
                                                </div>
                                                <div class="existing-CompanyName defaultDisabled">
                                                    @Html.DropDownListFor(m => m.CustomerDetails.CompanyId, new SelectList(new List<DropdownDisplayItem>()), string.Format(Resource.valMessageSelect, Resource.lblCompany), new { @class = "form-control selectCompany", onchange = "isExistingCompanyRadioSelected(true);" })
                                                    @Html.ValidationMessageFor(m => m.CustomerDetails.CompanyId)
                                                </div>

                                                <div class="pa bg-white top0 left0 z-index5 loading-wrapper tpo-company-loader mtm10 hide"><span class='spinner-dashboard pa'></span></div>
                                            </div>
                                        </div>
                                        <div class="col-sm-8 col-md-9">
                                            <div class="row">
                                                <div class="col-sm-4 new-company">
                                                    <div class="form-group">
                                                        <div id="newContactPersonInput">
                                                            @Html.LabelFor(m => m.CustomerDetails.Name)
                                                            @Html.TextBoxFor(m => m.CustomerDetails.Name, new { @class = "form-control newContactPerson", @placeholder = "John Smith" })
                                                            <a id="useExisting" onclick="CreateExistingContactPerson()" class="hide-element"><span class="fa fa-arrow-left mt7"></span> @Resource.btnLabelUseExisting</a>
                                                            @Html.ValidationMessageFor(m => m.CustomerDetails.Name)
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-4 existing-company disabled">
                                                    <div class="pa bg-white top0 left0 z-index5 loading-wrapper customer-contact hide-element"><span class='spinner-dashboard pa'></span></div>
                                                    <div class="form-group">
                                                        <div id="existingContactPersonDropdown">
                                                            @Html.LabelFor(m => m.CustomerDetails.Name)
                                                            @Html.DropDownListFor(m => m.CustomerDetails.UserId, new SelectList(new List<DropdownDisplayItem>
                                                                (), "Id", "Name", Model.CustomerDetails.Name), string.Format(Resource.valMessageSelect, Resource.lblContactPerson), new { @class = "form-control existingContactPerson", onchange = "GetContactPersonDetails(this)" })
                                                            <a class="enable-tpo-buyer" id="createNew" onclick="CreateNewContactPerson()"><span class="fa fa-plus-circle mt7"></span> @Resource.btnLabelCreateNew</a>
                                                            @Html.ValidationMessageFor(m => m.CustomerDetails.UserId)
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-4">
                                                    <div class="form-group">
                                                        @Html.LabelFor(m => m.CustomerDetails.PhoneNumber)
                                                        @Html.TextBoxFor(m => m.CustomerDetails.PhoneNumber, new { @class = "form-control input-phoneformat phoneNumber", onchange = "IsPhoneNumberValid(this.value, this)" })
                                                        @Html.ValidationMessageFor(m => m.CustomerDetails.PhoneNumber)
                                                        <div class="color-orange fs12 pt5 mobile-validation-msg"></div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-4">
                                                    <div class="form-group">
                                                        @Html.LabelFor(m => m.CustomerDetails.Email)
                                                        @*<div class="emailtag">
                                                            <div id="tags">*@
                                                        @Html.TextBoxFor(m => m.CustomerDetails.Email, new { @class = "form-control email border" })
                                                        @Html.ValidationMessageFor(m => m.CustomerDetails.Email)
                                                        @*</div>
                                                            </div>*@

                                                        @*@Html.HiddenFor(m => m.CustomerDetails.Emails)*@
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="partial-section" id="contactpersons">
                                        <div class="partial-block-collection-section row">
                                            @if (Model.CustomerDetails.ContactPersons != null && Model.CustomerDetails.ContactPersons.Any())
                                            {
                                                foreach (var contactPerson in Model.CustomerDetails.ContactPersons)
                                                {
                                                    contactPerson.EntityNumber = "CustomerDetails.ContactPersons";
                                                    Html.RenderPartial("_PartialContactPerson", contactPerson);
                                                }
                                            }
                                        </div>
                                        <div class="form-group col-md-12 pl0 contactperson">
                                            <a href="javascript:void(0)" class="add-partial-block" data-url="@Url.Action("ContactPerson", "Order" , new { area="Supplier" ,  collectionName = "CustomerDetails.ContactPersons"})"><i class="fas fa-plus-circle"></i> @Resource.btnLabelAddContactPerson</a>
                                        </div>
                                    </div>
                                    <!-- customer details ends -->
                                    <!-- job information starts -->
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="col-sm-12 well mb15">
                                <div class="col-md-12">
                                    <h4 class="pb10">@Resource.headingOrder</h4>
                                    <div class="row">
                                        <div class="col-sm-4 col-md-3 form-group">
                                            @Html.LabelFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.TruckLoadTypeId)
                                            @Html.EnumDropDownListFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.TruckLoadTypes,
                                            new
                                            {
                                            @class = "form-control truckLoadTypes enum-ddl"
                                            })
                                        </div>
                                        <div class="col-sm-4 col-md-3 form-group">
                                            @Html.LabelFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.FreightOnBoardTypes)
                                            @Html.EnumDropDownListFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.FreightOnBoardTypes, new { @class = "form-control freightOnBoardTypes enum-ddl" })
                                        </div>
                                        <div class="col-sm-4 col-md-3 form-group" id="wbsnumber">
                                            @Html.LabelFor(m => m.FuelDeliveryDetails.CustomAttributeViewModel.WBSNumber)
                                            @Html.TextBoxFor(m => m.FuelDeliveryDetails.CustomAttributeViewModel.WBSNumber, new { @class = "form-control" })
                                        </div>
                                        <!-- Is Pro Forma Enabled -->
                                        <div class="col-sm-4 col-md-3 form-group">
                                            <div id="external-ponumber">
                                                @Html.LabelFor(m => m.PONumber)
                                                @Html.TextBoxFor(m => m.PONumber, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.PONumber)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-4 col-md-3">
                                            <div>
                                                @Html.LabelFor(m => m.OrderName)
                                                @Html.TextBoxFor(m => m.OrderName, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.OrderName)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="col-sm-12 well mb15 address-container job-section">
                                <div class="col-sm-12">
                                    <h4 class="job-site-info">@Resource.headingJobInformation</h4>
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <div class="form-check form-check-inline radio tpo-enabled">
                                                @Html.RadioButtonFor(m => m.AddressDetails.IsNewJob, true, new { @id = "radio-newjob", @class = "jobname form-check-input", onclick = "inputBoxShowHide('new-job','existing-job');enableSection('address-controls');enableElement('billing-control,billing-address-controls')", onchange = "focusOnFirst(this, 'new-job');isExistingJobRadioSelected(true);" })
                                                <label class="form-check-label" for="radio-newjob">@Resource.lblNew</label>
                                            </div>
                                            <div class="form-check form-check-inline existingjobSection radio">
                                                @Html.RadioButtonFor(m => m.AddressDetails.IsNewJob, false, new { @id = "radio-existingjob", @class = "jobname existingjob form-check-input", onclick = "inputBoxShowHide('existing-job','new-job');disableSection('address-controls');disableElement('billing-control,billing-address-controls')", onchange = "focusOnFirst(this, 'existing-job');isExistingJobRadioSelected(false);" })
                                                <label class="form-check-label" for="radio-existingjob">@Resource.lblExisting</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="row">
                                                <div class="col-sm-6">
                                                    <div class="new-job">
                                                        @Html.LabelFor(m => m.AddressDetails.JobName, new { @class = "job-site-info" })
                                                        @Html.TextBoxFor(m => m.AddressDetails.JobName, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.AddressDetails.JobName)
                                                    </div>
                                                    <div class="existing-job defaultDisabled ">
                                                        @Html.LabelFor(m => m.AddressDetails.JobId, new { @class = "job-site-info" })
                                                        @Html.DropDownListFor(m => m.AddressDetails.JobId, new SelectList(CommonHelperMethods.GetJobList(Model.CustomerDetails.CompanyName, false, true, CurrentUser.Id, CurrentUser.CompanyId).OrderBy(top => top.Name).ToList(), "Id", "Name", Model.AddressDetails.JobId), string.Format(Resource.valMessageSelect, Resource.lblJob), new { @class = "form-control selectExistingJobId", onchange = "isExistingJobRadioSelected(true);" })
                                                        @Html.ValidationMessageFor(m => m.AddressDetails.JobId)
                                                    </div>
                                                </div>
                                                <div class="col-sm-6">
                                                    <div class="address-controls">
                                                        <div class="form-group combineDiv">
                                                            @Html.LabelFor(m => m.AddressDetails.DisplayJobID, new { @class = "job-site-info" })
                                                            @Html.TextBoxFor(m => m.AddressDetails.DisplayJobID, new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(m => m.AddressDetails.DisplayJobID)
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="row address-controls">
                                                <div class="col-sm-3">
                                                    <div class="form-group">
                                                        @Html.HiddenFor(m => m.AddressDetails.Country.Name, new { @Value = Resource.lblDummy })
                                                        @Html.HiddenFor(m => m.AddressDetails.Country.Code, new { @Value = Resource.lblDummy })
                                                        @*@Html.HiddenFor(m => m.AddressDetails.CountyName, new { @Value = Resource.lblDummy, @class = "county" })*@
                                                        @Html.LabelFor(m => m.AddressDetails.Country.Id)
                                                        @Html.DropDownListFor(m => m.AddressDetails.Country.Id, new SelectList(CommonHelperMethods.GetCountriesEx(), "Id", "Code", Model.AddressDetails.Country.Id), new { @class = "form-control country addressInput" })
                                                        @Html.ValidationMessageFor(m => m.AddressDetails.Country.Id)
                                                    </div>
                                                </div>

                                                <div class="col-sm-3 countrygroup-div hide-element">
                                                    <div class="form-group">
                                                        @Html.Label(Resource.lblCountryGroup)
                                                        @Html.DropDownListFor(m => m.AddressDetails.CountryGroupId, new SelectList(CommonHelperMethods.GetCountriesGroupEx(4), "Id", "Name"), Resource.btnLabelSelect, new { @class = "form-control countrygroup addressInput defaultDisabled" })
                                                    </div>
                                                </div>

                                                <div class="col-sm-6">
                                                    <div class="row">
                                                        @Html.PartialFor("~/Views/Shared/_PartialCompanyCurrency.cshtml", m => m.AddressDetails.Country)
                                                        <div class="col-md-6 mfn-uom-section">
                                                            <div class="form-group">
                                                                @Html.LabelFor(m => m.AddressDetails.Country.UoM) <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.lblUoM" data-original-title="@Resource.lblUoM"></i>
                                                                @Html.DropDownListFor(m => m.AddressDetails.MarineUoM, new SelectList(CommonHelperMethods.GetUoMList(), "Id", "Code", (int)Model.AddressDetails.MarineUoM), new { @class = "form-control marine-uom " })
                                                                @Html.ValidationMessageFor(m => m.AddressDetails.MarineUoM)
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row mt20">
                                        <div class="col-sm-12">
                                            <div class="row">
                                                <div class="col-sm-12">
                                                    <div>
                                                        <label class="checkbox-inline ftl-controls hide-element">
                                                            @Html.CheckBoxFor(m => m.AddressDetails.IsVarious, new { @value = Model.AddressDetails.IsVarious, @checked = Model.AddressDetails.IsVarious, onclick = "showHideControls(this,'wrapper-various','wrapper-location');" })
                                                            @Resource.lblVarious
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-sm-7">
                                                    <div class="wrapper-location">
                                                        <div class="address-controls">
                                                            <div class="row combineDiv">
                                                                <div class="col-sm-8">
                                                                    <div class="form-group">
                                                                        @Html.LabelFor(m => m.AddressDetails.Address)<span class="required pl4 mandatory-symbol" aria-required="true">*</span>
                                                                        @Html.TextBoxFor(m => m.AddressDetails.Address, new { @class = "form-control address addressInput address-type" })
                                                                        @*@Html.ValidationMessageFor(m => m.AddressDetails.Address)*@
                                                                        <span class="field-validation-error hide-element address-validation-error" id="spnErrorAddress"></span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="form-group">
                                                                        @Html.LabelFor(m => m.AddressDetails.ZipCode)<span class="required pl4 mandatory-symbol" aria-required="true">*</span>
                                                                        @Html.TextBoxFor(m => m.AddressDetails.ZipCode, new { @class = "form-control zipcode addressInput address-type" })
                                                                        @*@Html.ValidationMessageFor(m => m.AddressDetails.ZipCode)*@
                                                                        <span class="field-validation-error hide-element address-validation-error" id="spnErrorZipCode"></span>
                                                                    </div>
                                                                </div>

                                                            </div>
                                                            <div class="row combineDiv">
                                                                <div class="col-sm-4">
                                                                    <div class="form-group">
                                                                        @Html.LabelFor(m => m.AddressDetails.City)<span class="required pl4 mandatory-symbol" aria-required="true">*</span>
                                                                        @Html.TextBoxFor(m => m.AddressDetails.City, new { @class = "form-control city addressInput address-type" })
                                                                        @*@Html.ValidationMessageFor(m => m.AddressDetails.City)*@
                                                                        <span class="field-validation-error hide-element address-validation-error" id="spnErrorCity"></span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="form-group">
                                                                        @Html.LabelFor(m => m.AddressDetails.CountyName)@*<span class="required pl4 mandatory-symbol" aria-required="true">*</span>*@
                                                                        <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.msgCountyNameReason"></i>
                                                                        @Html.TextBoxFor(m => m.AddressDetails.CountyName, new { @class = "form-control county addressInput address-type" })
                                                                        @*@Html.ValidationMessageFor(m => m.AddressDetails.CountyName)*@
                                                                        @*<span class="field-validation-error hide-element address-validation-error" id="spnErrorCountyName"></span>*@
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="form-group">
                                                                        @Html.HiddenFor(m => m.AddressDetails.State.Name, new { @Value = Resource.lblDummy })
                                                                        @Html.HiddenFor(m => m.AddressDetails.State.Code, new { @Value = Resource.lblDummy })
                                                                        @Html.LabelFor(m => m.AddressDetails.State.Id)<span class="required pl4" aria-required="true">*</span>
                                                                        @Html.DropDownListFor(m => m.AddressDetails.State.Id, new SelectList(new List<DropdownDisplayItem>
                                                                            ()), string.Format(Resource.valMessageSelect, Resource.lblState), new { @class = "form-control state addressInput triggerTerminalChange", onchange = "setStateValue(this);" })
                                                                        @Html.ValidationMessageFor(m => m.AddressDetails.State.Id)
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-md-12">
                                                                    <div class="form-check form-group form-check-inline">
                                                                        @Html.CheckBoxFor(m => m.AddressDetails.IsGeocodeUsed, new { @id = "checkbox-geocodes", @class = "form-check-input", onclick = "setReadOnlyMode(this,'geoInput','addressInput'); setControlsEditableForCaribbean(this);" })
                                                                        <label class="form-check-label" for="checkbox-geocodes">@Resource.lblGeoCodes</label>
                                                                    </div>
                                                                </div>
                                                                @*<div class="combineDiv subSectionOpacity">

                                                                    </div>*@
                                                                <div class="col-xs-6 col-md-4 combineDiv subSectionOpacity">
                                                                    <div class="form-group">
                                                                        @Html.LabelFor(m => m.AddressDetails.Latitude)
                                                                        @Html.TextBoxFor(m => m.AddressDetails.Latitude, new { @class = "form-control datatype-decimal mask-decimal latitude geoInput defaultDisabled address-type", @readonly = "true" })
                                                                        @*@Html.ValidationMessageFor(m => m.AddressDetails.Latitude)*@
                                                                        <span class="field-validation-error hide-element address-validation-error" id="spnErrorLatitude"></span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-xs-6 col-md-4 combineDiv subSectionOpacity">
                                                                    <div class="form-group">
                                                                        @Html.LabelFor(m => m.AddressDetails.Longitude)
                                                                        @Html.TextBoxFor(m => m.AddressDetails.Longitude, new
                                                                        {
                                                                        @class = "form-control datatype-decimal mask-decimal longitude geoInput defaultDisabled address-type",
                                                                        @readonly = "true"
                                                                        })
                                                                        @*@Html.ValidationMessageFor(m => m.AddressDetails.Longitude)*@
                                                                        <span class="field-validation-error hide-element address-validation-error" id="spnErrorLongitude"></span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-md-4">
                                                                    <div class="form-group">
                                                                        @Html.LabelFor(m => m.AddressDetails.TimeZoneName)
                                                                        @Html.TextBoxFor(m => m.AddressDetails.TimeZoneName, new { @class = "form-control timeZoneName defaultDisabled", @readonly = "true" })
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-xs-6 col-md-4 combineDiv">
                                                                    <div class="form-group">
                                                                        @Html.LabelFor(m => m.AddressDetails.DistanceCovered)
                                                                        @Html.TextBoxFor(m => m.AddressDetails.DistanceCovered, new { @class = "form-control info DistanceCovered", @placeholder = "HH:MM", @onkeypress = "formatTime(this)" })
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="wrapper-various hide-element">
                                                        <div id="address-controls" class="address-controls row">
                                                            <div class="col-sm-5">
                                                                <div class="form-group">
                                                                    @Html.HiddenFor(m => m.AddressDetails.State.Name, new { @Value = Resource.lblDummy })
                                                                    @Html.HiddenFor(m => m.AddressDetails.State.Code, new { @Value = Resource.lblDummy })
                                                                    @Html.LabelFor(m => m.AddressDetails.State.Id)
                                                                    @Html.DropDownListFor(m => m.AddressDetails.State.Id, new SelectList(new List<DropdownDisplayItem>
                                                                        ()), string.Format(Resource.valMessageSelect, Resource.lblState), new { @class = "form-control state addressInput", onchange = "setStateValue(this);" })
                                                                    @Html.ValidationMessageFor(m => m.AddressDetails.State.Id)
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-5">
                                                    <div id="job-map" class="map-wrapper map-controls">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <div class="row">
                                                <div class="col-sm-12">
                                                    <label class="mb5 mt0 f-bold">Onsite Contact</label>
                                                    <div class="row">
                                                        <div class="col-sm-12">
                                                            <div class="form-check form-check-inline radio mb10">
                                                                @Html.RadioButtonFor(m => m.AddressDetails.IsNewContactPerson, false, new { @id = "radio-newcontact", @class = "form-check-input", onclick = "showHideControls(this,'existing-onsite','new-onsite');" })
                                                                <label class="form-check-label" for="radio-newcontact">@Resource.lblExisting</label>
                                                            </div>
                                                            <div class="form-check form-check-inline radio mb10 tpo-enabled">
                                                                @Html.RadioButtonFor(m => m.AddressDetails.IsNewContactPerson, true, new { @id = "radio-existingcontact", @class = "form-check-input", onclick = "showHideControls(this,'new-onsite','existing-onsite');" })
                                                                <label class="form-check-label" for="radio-existingcontact">@Resource.lblNew</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="existing-onsite col-sm-3 form-group">
                                                    @Html.DropDownListFor(m => m.AddressDetails.OnsiteContactUserId, new SelectList(new List<DropdownDisplayItem>()), string.Format(Resource.valMessageSelect, Resource.lblOnsiteContact), new { @class = "form-control" })
                                                </div>
                                                <div class="new-onsite col-sm-12">
                                                    <div class="row">
                                                        <div class="col-sm-3">
                                                            <div class="form-group">
                                                                @Html.LabelFor(m => m.AddressDetails.OnsiteContactName)
                                                                @Html.TextBoxFor(m => m.AddressDetails.OnsiteContactName, new { @class = "form-control optional-field" })
                                                                @Html.ValidationMessageFor(m => m.AddressDetails.OnsiteContactName)
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-3">
                                                            <div class="form-group">
                                                                @Html.LabelFor(m => m.AddressDetails.OnsiteContactEmail)
                                                                @Html.TextBoxFor(m => m.AddressDetails.OnsiteContactEmail, new { @class = "form-control optional-field" })
                                                                @Html.ValidationMessageFor(m => m.AddressDetails.OnsiteContactEmail)
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-3">
                                                            <div class="form-group">
                                                                @Html.LabelFor(m => m.AddressDetails.OnsiteContactPhone)
                                                                @Html.TextBoxFor(m => m.AddressDetails.OnsiteContactPhone, new { @class = "form-control optional-field input-phoneformat" })
                                                                @Html.ValidationMessageFor(m => m.AddressDetails.OnsiteContactPhone)
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row mb10">
                                                @*<div class="col-sm-3">
                                                        <div class="checkbox address-controls company-owned mb0">
                                                            <label id="isCompanyOwned">
                                                                @Html.CheckBoxFor(m => m.AddressDetails.IsCompanyOwned) @Resource.lblCompanyOwnedLocation
                                                            </label>
                                                        </div>
                                                    </div>*@
                                                <div class="col-sm-3">
                                                    <div class="checkbox mb0">
                                                        <label id="sales-tax-exempt">
                                                            @Html.CheckBoxFor(m => m.IsTaxExempted) @Resource.lblTaxExempted
                                                        </label>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="row">
                                                <div class="col-sm-3">
                                                    <div class="form-group address-controls">
                                                        @Html.LabelFor(m => m.AccountingCompanyId)
                                                        @Html.TextBoxFor(m => m.AccountingCompanyId, new { @class = "form-control optional-field" })
                                                    </div>
                                                </div>
                                                <div class="col-sm-4">
                                                    @Html.LabelFor(m => m.LocationInventoryManagedBy)
                                                    <div class="form-group">
                                                        @Html.ListBoxFor(m => m.LocationInventoryManagedBy, new SelectList(CommonHelperMethods.GetLocationInventoryManagedByEnumList(), "Text", "Value", 0), new { @class = "form-control", @style = "padding-left:0px;" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-3 dispatch-region">
                                            @Html.LabelFor(m => m.RegionId)
                                            @Html.DropDownListFor(m => m.RegionId, new SelectList(CommonHelperMethods.GetRegionsForTPOOrder(CurrentUser.Id), "Id", "Name", 0), string.Format(Resource.valMessageSelect, Resource.valRegionSelect), new { @class = "form-control", onchange = "getRouteInfoDetails(this,'');" })
                                        </div>
                                        <div class="col-md-3 dispatch-region" id="routediv">
                                            @Html.LabelFor(m => m.RouteId)
                                            @Html.DropDownListFor(m => m.RouteId, new SelectList(CommonHelperMethods.GetRoutesForTPOOrder(Model.RegionId), "Id", "Name", 0), string.Format(Resource.valMessageSelect, Resource.valRouteSelect), new { @class = "form-control routecontrol" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12 enable-tpo-buyer">
                            <div id="tpoJobForcasting" class="well tpoJobForcastingData" style="display:none;">
                                @Html.PartialFor("~/Views/Shared/Forcasting/_PartialIMSForecasting.cshtml", m => m.ForcastingPreference)
                            </div>
                        </div>
                        <div class="col-sm-12 carrier-section hide-element">
                            <div class="well bg-white shadow-a mb15 overflow-h radius10">
                                <div class="col-sm-12">
                                    <h4 class="pb10">@Resource.lblCarrier</h4>
                                    <div class="row">
                                        <div class="col-md-4 dispatch-region divCarrierAssign">
                                            @Html.LabelFor(m => m.AssignedCarrierCompId)
                                            @Html.DropDownListFor(m => m.AssignedCarrierCompId, new SelectList(CommonHelperMethods.GetCarriers(CurrentUser.CompanyId), "Id", "Name", 0), string.Format(Resource.valMessageSelect, Resource.lblCarrier), new { @class = "form-control selectCarrier" })
                                            @Html.ValidationMessageFor(m => m.AssignedCarrierCompId)
                                        </div>
                                        <div class="col-sm-4 divCarrierAssign">
                                            <label>E-mail ID</label>
                                            <div>@Html.ListBoxFor(m => m.CarrierUserEmails, new SelectList(CommonHelperMethods.GetCarrierUserEmails(0), "Id", "Name"), new { @class = "form-control multi-select job", @placeholder = "Select Emails(s)" })</div>
                                            @Html.ValidationMessageFor(m => m.CarrierUserEmails)
                                            <div class="alert alert-warning pull-left fs11 pt10  pb10 mt5 mb0">Order(s)/DR(s) created for above location will be sent to those email(s)</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!--Site image starts -->
                        <div class="col-sm-12" id="image-tpo">
                            @Html.PartialFor("~/Views/Shared/_PartialImageTPO.cshtml", m => m.ImageDetails)
                        </div>
                        <!--Site image ends -->
                    </div>
                </div>
                <div id="tpo-pricing" data-parent-tab="tab-tpo-pricing" class="subTabs animated fadeIn hide-element">
                    <div class="row">
                        <!-- delivery starts -->
                        <div class="col-sm-12">
                            <div class="col-sm-12 well mb15">
                                <div class="col-sm-12">
                                    <h4>@Resource.headingDelivery</h4>
                                    <div class="row">
                                        <div class="col-sm-12 mb5">
                                            <div class="radio dib mr10">
                                                <label>
                                                    @Html.RadioButtonFor(m => m.FuelDeliveryDetails.DeliveryTypeId, (int)DeliveryType.OneTimeDelivery, new { @class = "single-delivery-schedule", onclick = "radioChange(this, 'single-delivery-sub-types','delivery-schedule');showHideControls(this,'single-delivery','multi-delivery,weekend-fee-types');" })
                                                    @Resource.lblSingle
                                                </label>
                                            </div>
                                            <div class="radio dib">
                                                <label>
                                                    @Html.RadioButtonFor(m => m.FuelDeliveryDetails.DeliveryTypeId, (int)DeliveryType.MultipleDeliveries, new { @checked = "checked", @class = "multiple-delivery-schedule", onclick = "radioChange(this, 'delivery-schedule','single-delivery-sub-types,end-date');showHideControls(this,'multi-delivery,weekend-fee-types','single-delivery');" })
                                                    @Resource.lblMultiple
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-sm-12">
                                            <div class="row">
                                                <div class="col-sm-3 single-delivery">
                                                    <div class="single-delivery-sub-types">
                                                        @Html.LabelFor(m => m.FuelDeliveryDetails.SingleDeliverySubTypes)
                                                        @Html.EnumDropDownListFor(m => m.FuelDeliveryDetails.SingleDeliverySubTypes, new { @class = "form-control" })
                                                    </div>
                                                </div>
                                                <div class="col-sm-3">
                                                    <div class="form-group">
                                                        @Html.LabelFor(m => m.FuelDeliveryDetails.StartDate)
                                                        @Html.TextBoxFor(m => m.FuelDeliveryDetails.StartDate, new { @class = "form-control datepicker" })
                                                        @Html.ValidationMessageFor(m => m.FuelDeliveryDetails.StartDate)
                                                    </div>
                                                </div>
                                                <div class="col-sm-3">
                                                    <div class="end-date">
                                                        @Html.Label(Resource.lblEndDate)
                                                        @Html.TextBoxFor(m => m.FuelDeliveryDetails.EndDate, new { @class = "form-control datepicker" })
                                                        @Html.ValidationMessageFor(m => m.FuelDeliveryDetails.EndDate)
                                                    </div>
                                                </div>
                                                <div class="col-sm-3">
                                                    <div class="form-group">
                                                        @Html.LabelFor(m => m.FuelDeliveryDetails.StartTime)
                                                        @Html.TextBoxFor(m => m.FuelDeliveryDetails.StartTime, new { @class = "form-control timepicker" })
                                                        @Html.ValidationMessageFor(m => m.FuelDeliveryDetails.StartTime)
                                                    </div>
                                                </div>
                                                <div class="col-sm-3">
                                                    <div class="form-group">
                                                        @Html.LabelFor(m => m.FuelDeliveryDetails.EndTime)
                                                        @Html.TextBoxFor(m => m.FuelDeliveryDetails.EndTime, new { @class = "form-control timepicker" })
                                                        @Html.ValidationMessageFor(m => m.FuelDeliveryDetails.EndTime)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-12 mb15 multi-delivery">
                                            <div class="row mt5">
                                                <div class="col-md-12">
                                                    <div id="delivery-schedule-section" class="partial-section delivery-schedule defaultDisabled">
                                                        <div class="form-group pl0 mt7">
                                                            <div class="row">
                                                                <div class="col-sm-12">
                                                                    <h3 class="mt0 mb0">@Resource.lblDeliverySchedules</h3>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="partial-block-collection-section">
                                                            @if (Model.FuelDeliveryDetails.DeliverySchedules != null && Model.FuelDeliveryDetails.DeliverySchedules.Count() > 0)
                                                            {
                                                                foreach (var deliverySchedule in Model.FuelDeliveryDetails.DeliverySchedules)
                                                                {
                                                                    Html.RenderPartial("~/Areas/Buyer/Views/Shared/_PartialDeliveryScheduleFR.cshtml", deliverySchedule);
                                                                }
                                                            }
                                                        </div>
                                                        <div class="form-group col-md-12 pl0  delivery-schedule defaultDisabled @((Model.FuelDeliveryDetails.DeliveryTypeId == (int)DeliveryType.OneTimeDelivery) ? " pntr-none" : "" )">
                                                            <a href="javascript:void(0)" class="add-partial-block" data-url="@Url.Action("DeliverySchedule", "FuelRequest" , new { area="Supplier" })"><i class="fas fa-plus-circle"></i> @Resource.btnLabelAddDeliverySchedule</a>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- delivery ends -->
                        <!-- fuel request starts -->
                        <div class="col-sm-12">
                            <div class="col-sm-12 well mb15">
                                <div class="col-sm-12">
                                    <div class="row">
                                        <div class="col-md-12 disable-in-tpo-edit fuel-display-group ">
                                            <h4 class="mb0 pb10">@Resource.lblFuelType</h4>
                                            <div class="form-group mb0 @(Model.FuelDetails.IsMarineLocation?" hide-element":"")">
                                                <div class="radio dib mr20 mt0 hide-from-tpo">
                                                    <label>
                                                        @Html.RadioButtonFor(m => m.FuelDetails.FuelDisplayGroupId, (int)ProductDisplayGroups.FavoriteFuelType, new { onclick = "showHideControls(this,'standard-fuels','fuels-in-myarea,non-standard-fuels,add-favorite,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);checkOtherFuelType(this)" })
                                                        @Resource.lblFavorite
                                                    </label>
                                                </div>
                                                <div class="radio dib mr20">
                                                    <label class="in-job-area">
                                                        @Html.RadioButtonFor(m => m.FuelDetails.FuelDisplayGroupId, (int)ProductDisplayGroups.FuelTypesInYourArea, new { onclick = "showHideControls(this,'standard-fuels,fuels-in-myarea,add-favorite','non-standard-fuels,all-other-fuels,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);" })
                                                        @Resource.lblInJobArea
                                                    </label>
                                                </div>
                                                <div class="radio dib mr20">
                                                    <label>
                                                        @Html.RadioButtonFor(m => m.FuelDetails.FuelDisplayGroupId, (int)ProductDisplayGroups.CommonFuelType, new { onclick = "showHideControls(this,'standard-fuels,all-other-fuels,add-favorite','fuels-in-myarea,non-standard-fuels,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);" })
                                                        @Resource.lblCommon
                                                    </label>
                                                </div>
                                                <div class="radio dib mr20">
                                                    <label>
                                                        @Html.RadioButtonFor(m => m.FuelDetails.FuelDisplayGroupId, (int)ProductDisplayGroups.LessCommonFuelType, new { onclick = "showHideControls(this,'standard-fuels,all-other-fuels,add-favorite','fuels-in-myarea,non-standard-fuels,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);" })
                                                        @Resource.lblLessCommon
                                                    </label>
                                                </div>
                                                @if (Model.PreferencesSetting != null && Model.PreferencesSetting.IsAdditiveBlendingEnabled)
                                                {
                                                    <div class="radio dib mr20">
                                                        <label>
                                                            @Html.RadioButtonFor(m => m.FuelDetails.FuelDisplayGroupId, (int)ProductDisplayGroups.AdditiveFuelType, new { onclick = "showHideControls(this,'standard-fuels,all-other-fuels,add-favorite,taxForOtherFuel','fuels-in-myarea,non-standard-fuels,section-tier');radioChange(this,null,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal');triggerEvent('.fixed-pricing','click');hideFscControls();hideOtherProductControls(this);" })
                                                            @Resource.lblAdditive
                                                        </label>
                                                    </div>
                                                }
                                                <div class="radio dib mr20">
                                                    <label>
                                                        @Html.RadioButtonFor(m => m.FuelDetails.FuelDisplayGroupId, (int)ProductDisplayGroups.OtherFuelType, new { @class = "otherfueltype", onclick = "showHideControls(this,'non-standard-fuels,add-favorite,taxForOtherFuel','standard-fuels');radioChange(this,null,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal');triggerEvent('.fixed-pricing','click');hideFscControls();hideOtherProductControls(this);", onchange = "focusOnFirst(this, 'non-standard-fuels');" })
                                                        @Resource.lblOther
                                                    </label>
                                                </div>
                                                <div class="radio dib mr20 hide-element">
                                                    @*//we are hiding this div element always for both TPO and MFN nomination*@
                                                    <label>
                                                        @Html.RadioButtonFor(m => m.FuelDetails.FuelDisplayGroupId, (int)ProductDisplayGroups.MarineFuelType, new { onclick = "showHideControls(this,'standard-fuels,all-other-fuels,add-favorite','fuels-in-myarea,non-standard-fuels,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);" })
                                                        @Resource.lblCommon
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-12 disable-in-tpo-edit">
                                            <div class="form-group">
                                                <div class="pa bg-white top0 left0 z-index5 loading-wrapper mtm10 loader-fueltype hide-element"><span class="spinner-dashboard pa"></span></div>
                                                <div class="row standard-fuels">
                                                    <div class="col-sm-3 clearboth">
                                                        <div class="row">
                                                            <div class="col-sm-12">
                                                                <div id="fuelTypeNearYourArea" class="fuels-in-myarea hide-element">
                                                                    <div class="pr">
                                                                        <input type="text" class="form-control nearest-fueltype pl16" onkeydown="javascript:return false">
                                                                    </div>
                                                                    <div class="nearest-fuellist pa bg-white">
                                                                        <ul class="list-unstyled"></ul>
                                                                        <div class="text-center">
                                                                            <a href="javascript:void(0)" class="more-nearestfuel">See More</a>
                                                                            <div class="spinner-xsmall mbm2 ml2" style="display:none"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="hide-element" id="noFavoriteFuelMsg">
                                                            <div class="alert alert-info mb0 fs13">@Resource.errMessageNoFavFuel</div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-sm-12">
                                                                <div class="form-group">
                                                                    <div id="allOtherFuelTypes" class="all-other-fuels">
                                                                        @Html.DropDownListFor(m => m.FuelDetails.FuelTypeId, new SelectList(CommonHelperMethods.GetFuelProducts((ProductDisplayGroups)Model.FuelDetails.FuelDisplayGroupId, CurrentUser.CompanyId, Model.FuelDetails.FuelDisplayJobId), "Id", "Name", Model.FuelDetails.FuelTypeId), Resource.lblSelectFuel, new { @class = "form-control" })
                                                                    </div>
                                                                    @Html.ValidationMessageFor(m => m.FuelDetails.FuelTypeId)
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="non-standard-fuels hide-element">
                                                    <div class="row">
                                                        <div class="col-sm-3">
                                                            <div class="form-group">
                                                                @Html.LabelFor(m => m.FuelDetails.NonStandardFuelName)
                                                                @Html.TextBoxFor(m => m.FuelDetails.NonStandardFuelName, new { @class = "form-control" })
                                                                @Html.ValidationMessageFor(m => m.FuelDetails.NonStandardFuelName)
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-3 mb15">
                                                            <div class="form-group mb0">
                                                                @Html.LabelFor(m => m.FuelDetails.NonStandardFuelDescription)
                                                                @Html.TextAreaFor(m => m.FuelDetails.NonStandardFuelDescription, new { @class = "form-control" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <h4>@Resource.lblQuantity</h4>
                                            <div class="row">
                                                <div class="container ml0">
                                                    @Html.HiddenFor(m => m.FuelDetails.FuelQuantity.UoM)
                                                    @Html.PartialFor("~/Views/Shared/_PartialFuelQuantity.cshtml", m => m.FuelDetails)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <h4>@Resource.headingPricing</h4>
                                            <div class="row tpo-enabled">
                                                <div class="col-md-12 suppressPricing-section">
                                                    <div class="checkbox mt20 mr20">
                                                        <label>
                                                            @Html.CheckBoxFor(m => m.IsSupressOrderPricing, new { onchange = "showHideonSuppresspricingCheckbox(this)" }) @Resource.headingSupressPricing
                                                            <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.headingSupressPricing"></i>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="section-tier">
                                                @Html.PartialFor("~/Views/Shared/_PartialTierPricingFuelQuantityTpo.cshtml", m => m)
                                            </div>
                                            @*@if (!Model.FuelDetails.IsMarineLocation && (Model.PreferencesSetting == null || (Model.PreferencesSetting != null && !Model.PreferencesSetting.IsSupressOrderPricing)))
                        {
                            @Html.PartialFor("~/Views/Shared/_PartialTierPricingFuelQuantityTpo.cshtml", m => m)
                        }*@
                                            <div class="section-pricing">
                                                @Html.Hidden("hdnRadius", (object)Convert.ToInt32(100))
                                                @Html.PartialFor("~/Views/Shared/_PartialFuelPricingTPO.cshtml", m => m)
                                                @Html.HiddenFor(m => m.PricingDetails.CityGroupTerminalId)
                                            </div>
                                            <div id="div-fuel-surcharge-section" class="section-fuel-manual-surcharge">
                                                <div class="row">
                                                    <div class="col-md-12 surcharge-section">
                                                        <div class="checkbox mt20 mr20">
                                                            <label>
                                                                @Html.CheckBoxFor(m => m.OrderAdditionalDetailsViewModel.IsFuelSurcharge, new { onchange = "showHideonCheckbox(this,'fuel-surcharge-range,fsc-freightcost')" }) @Resource.lblApplyFuelSurchage
                                                                <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.msgFuelSurchargeFreightCost"></i>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-12">
                                                        <div class="row">
                                                            <div class="col-sm-3 surcharge-section">
                                                                <div class="mb15 hide-element fuel-surcharge-range">
                                                                    @Html.EnumDropDownListFor(m => m.OrderAdditionalDetailsViewModel.FuelSurchagePricingType, "Select Price", new { @class = "form-control enum-ddl-spt" })
                                                                    @Html.ValidationMessageFor(m => m.OrderAdditionalDetailsViewModel.FuelSurchagePricingType)
                                                                </div>
                                                            </div>
                                                            <div class="col-sm-9 fuel-surcharge-range surcharge-section">
                                                                @Html.PartialFor("_PartialFuelSurchargeFreightFee", m => m.FuelDeliveryDetails.FuelFees.FuelSurchargeFreightFee)
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-12 surcharge-section">
                                                        <a onclick="showSurchargeTable();" id="lnkSurchargeTable" class="pntr-none subSectionOpacity">@Resource.lblViewFuelSurchargeTable</a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row source-region-section">
                                        <div class="col-sm-12">
                                            <h4>@Resource.headingSourceRegionsAndTerminals</h4>
                                            <div>
                                                @Html.PartialFor("~/Views/Shared/_PartialSourceRegionsAndTerminals.cshtml", m => m)
                                                <span id="showMsgInformation" class="fs12"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-12 well mb15 section-freight-rate-surcharge-accessorial">
                                <h4 class="pb10">Freight Cost</h4>
                                <label class="fs14">
                                    @Html.CheckBoxFor(m => m.OrderAdditionalDetailsViewModel.IsFreightCost, new { @class = "no-hidden-click mr-1", onchange = "showHideonCheckbox(this,'section-ApplyFreightCost')" }) @Resource.lblApplyFreightRate
                                </label>
                                <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.lblApplyFreightRate"></i>
                                <div class="col-sm-12 hide-element section-ApplyFreightCost">
                                    <div class="col-sm-12">
                                        @Html.PartialFor("~/Views/Shared/_PartialFreightCost.cshtml", m => m)                                    
                                    </div>
                                    <label class="mt-2 fs14">
                                        @Html.CheckBoxFor(m => m.OrderAdditionalDetailsViewModel.IsFuelSurchargeAuto, new { @class = "no-hidden-click mr-1", onchange = "showHideonCheckbox(this,'section-ApplyFuelSurcharge')" }) @Resource.lblApplyFuelSurchage
                                    </label>
                                    <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.lblApplyFuelSurchage"></i>
                                    <div class="col-sm-12 hide-element section-ApplyFuelSurcharge">
                                        @Html.PartialFor("~/Views/Shared/_PartialFuelSurcharge.cshtml", m => m)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- fuel request ends -->
                    </div>
                </div>
                <div id="tpo-delivery" data-parent-tab="tab-tpo-delivery" class="subTabs animated fadeIn hide-element">
                    <div class="row">
                        <!-- job information ends -->
                        <!-- external broker order starts -->
                        @if (Model.IsBuyAndSellOrder)
                        {
                            <div class="col-sm-12">
                                <div class="col-sm-12 well mb15 buy-sell">
                                    <div class="col-sm-12">
                                        <h4>@Resource.headingBuySell</h4>
                                        <div class="row">
                                            <div class="col-sm-12">
                                                <div class="checkbox mt0">
                                                    <label>
                                                        @Html.CheckBoxFor(m => m.IsBuyAndSellOrder, new { @class = "brokered-order" })
                                                        @Resource.lblDeliveringToAnotherCustomer
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        @Html.PartialFor("_PartialBrokeredOrder", m => m.ExternalBrokeredOrder)
                                        <div class="brokeredorder-details">
                                            <div class="row hide-element tpo-broker-markup">
                                                <div class="col-sm-3">
                                                    @Html.LabelFor(m => m.PricingDetails.BrokerMarkUp)
                                                    <div class="input-group mtm1">
                                                        <span class="input-group-addon currency-symbol">@Model.PricingDetails.Currency</span>
                                                        @Html.TextBoxFor(m => m.PricingDetails.BrokerMarkUp, new { @class = "form-control datatype-decimal always" })
                                                    </div>
                                                </div>
                                                <div class="col-sm-3">
                                                    @Html.LabelFor(m => m.PricingDetails.SupplierMarkUp)
                                                    <div class="input-group mtm1">
                                                        <span class="input-group-addon currency-symbol">@Model.PricingDetails.Currency</span>
                                                        @Html.TextBoxFor(m => m.PricingDetails.SupplierMarkUp, new { @class = "form-control datatype-decimal always" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <!-- external broker order ends -->
                        <!-- external broker order starts -->
                        @if (Model.IsThirdPartyHardwareUsed)
                        {
                            <div class="col-sm-12">
                                <div class="col-sm-12 well mb15 third-party-hardware">
                                    <div class="col-sm-12">
                                        <h4>@Resource.heading3rdPartyHardwareUsed</h4>
                                        <div class="row">
                                            <div class="col-sm-12">
                                                <div class="checkbox mt0">
                                                    <label>
                                                        @Html.CheckBoxFor(m => m.IsThirdPartyHardwareUsed, new { @class = "other-hardware" })
                                                        @Resource.heading3rdPartyHardware
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="hide-element hardware-details">
                                            <div class="row mt20">
                                                <div class="col-sm-3">
                                                    <label>
                                                        @Resource.lbl3rdPartyNozzleService<span class="required pl4" aria-required="true">*</span>
                                                        <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.msgPetroTracSupport"></i>
                                                    </label>
                                                    @Html.DropDownListFor(m => m.ExternalBrokeredOrder.ThirdPartyNozzleId, new SelectList(CommonHelperMethods.GetThirdPartyNozzles(), "Id", "Name", Model.ExternalBrokeredOrder.ThirdPartyNozzleId), new { @class = "form-control" })
                                                </div>
                                                <div class="col-sm-8">
                                                    <label>@Resource.lblInvoicePreferences</label>
                                                    <div class="checkbox mt0">
                                                        <label>
                                                            @Html.CheckBoxFor(m => m.IsSendFileToBroker, new { @class = "invoice-preference" })
                                                            @Resource.lblSendDataFiles
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row mt25">
                                                <div class="col-sm-12 clearboth mb5"><label class="f-normal">@Resource.msgProvideDataFileInformation</label></div>
                                                <div class="col-sm-3">
                                                    <div class="form-group">
                                                        <label>@Resource.lblVendorId</label>
                                                        @Html.TextBoxFor(m => m.ExternalBrokeredOrder.VendorId, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.ExternalBrokeredOrder.VendorId)
                                                    </div>
                                                </div>
                                                <div class="col-sm-3">
                                                    <div class="form-group">
                                                        <label>@Resource.lblCustomerNumber</label>
                                                        @Html.TextBoxFor(m => m.ExternalBrokeredOrder.CustomerNumber, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.ExternalBrokeredOrder.CustomerNumber)
                                                    </div>
                                                </div>
                                                <div class="col-sm-3">
                                                    <div class="form-group">
                                                        <label>@Resource.lblShipTo</label>
                                                        @Html.TextBoxFor(m => m.ExternalBrokeredOrder.ShipTo, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.ExternalBrokeredOrder.ShipTo)
                                                    </div>
                                                </div>
                                                <div class="col-sm-3">
                                                    <div class="form-group">
                                                        <label>@Resource.lblSource</label>
                                                        @Html.TextBoxFor(m => m.ExternalBrokeredOrder.Source, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.ExternalBrokeredOrder.Source)
                                                    </div>
                                                </div>
                                                <div class="col-sm-3">
                                                    <div class="form-group">
                                                        <label>@Resource.lblProductCode</label>
                                                        @Html.TextBoxFor(m => m.ExternalBrokeredOrder.ProductCode, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(m => m.ExternalBrokeredOrder.ProductCode)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- external broker order ends -->
                        }
                        <!-- fees starts -->
                        <div class="thirdparty-fees hide-element col-sm-12">
                            <div class="well mb15">
                                @Html.PartialFor("_PartialBrokeredOrderFees", m => m.ExternalBrokeredOrder.BrokeredOrderFee)
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="col-sm-12 well mb15 fuel-request-fees">
                                <div class="col-sm-12">
                                    <h4 class="mb0 pb10 section-accessorial-fees">Fuel Cost</h4>
                                    <div class="section-freight-rate-surcharge-accessorial">
                                        <h4 class="mb0 pb10">Accessorial Fees</h4>
                                        @Html.PartialFor("_PartialAccessorialFees", m => m)
                                    </div>
                                    <div>
                                        @Html.PartialFor("_PartialFees", m => m.FuelDeliveryDetails.FuelFees)
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- fees ends -->
                        <!-- other product taxes starts -->
                        <div class="col-sm-12">
                            <div class="col-sm-12 well mb15 taxForOtherFuel hide-element">
                                <div class="col-sm-12">
                                    <h4>@Resource.headingTaxes</h4>
                                    <div class="row">
                                        <div class="container ml0">
                                            <div class="row">
                                                <div class="col-sm-12">
                                                    <div class="checkbox mt0">
                                                        <label>
                                                            @Html.CheckBoxFor(m => m.IsOtherFuelTypeTaxesGiven, new { onchange = "showHideonCheckbox(this,'addtax')" }) @Resource.lblIsOtherFuelTypeTaxesEnabled
                                                            <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.msgTaxOtherProducts"></i>
                                                        </label>
                                                    </div>
                                                </div>
                                                <div class="col-sm-12 col-md-10 addtax hide-element">
                                                    <div id="otherProductType-tax-section" class="partial-section">
                                                        <div class="partial-block-collection-section">
                                                            @if (Model.TaxDetailsViewModel != null && Model.TaxDetailsViewModel.Count() > 0)
                                                            {
                                                                foreach (var otherProductTax in Model.TaxDetailsViewModel)
                                                                {
                                                                    Html.RenderPartial("_PartialOtherProductTax", otherProductTax);
                                                                }
                                                            }
                                                        </div>
                                                        <div class="form-group col-md-12 pl0 mt7">
                                                            <a href="javascript:void(0)" class="add-partial-block" data-url="@Url.Action("OtherProductTax", "Order" )"><span class="fa fa-plus-circle"></span> @Resource.lblAddTaxes</a>
                                                        </div>
                                                    </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                        <!-- payment terms starts -->
                        <div id="div-payment-terms" class="col-md-12">
                            <div class="col-sm-12 well mb15">
                                <div class="col-sm-12">
                                    <h4>@Resource.lblPaymentDetails</h4>
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <div class="row">
                                                <div class="col-sm-12">
                                                    <div class="form-check form-check-inline radio">
                                                        @Html.RadioButtonFor(m => m.FuelOfferDetails.PaymentTermId, (int)PaymentTerms.NetDays, new { @id = "radio-netpayment", onclick = "radioChange(this,'netdays',null);", onchange = "focusOnFirst(this, 'netdays');", @class = "revalidate form-check-input" })
                                                        <label class="form-check-label" for="radio-netpayment">@Resource.lblNet</label>
                                                    </div>
                                                    <div class="form-check form-check-inline radio">
                                                        @Html.RadioButtonFor(m => m.FuelOfferDetails.PaymentTermId, (int)PaymentTerms.DueOnReceipt, new { @id = "radio-dueonreceipt", onclick = "radioChange(this,null,'netdays')", @class = "revalidate form-check-input" })
                                                        <label class="form-check-label" for="radio-dueonreceipt">@Resource.lblDueOnReceipt</label>
                                                    </div>
                                                    <div class="form-check form-check-inline radio">
                                                        @Html.RadioButtonFor(m => m.FuelOfferDetails.PaymentTermId, (int)PaymentTerms.PrePaidInFull, new { @id = "radio-prepaidfull", onclick = "radioChange(this,null,'netdays')", @class = "revalidate form-check-input" })
                                                        <label class="form-check-label" for="radio-prepaidfull">@Resource.lblPrePaidInFull</label>
                                                    </div>
                                                    <div class="form-check form-check-inline radio">
                                                        @Html.RadioButtonFor(m => m.FuelOfferDetails.PaymentTermId, (int)PaymentTerms.Net30, new { @id = "radio-net30", onclick = "radioChange(this,null,'netdays')", @class = "revalidate form-check-input" })
                                                        <label class="form-check-label" for="radio-net30">@Resource.lblNet30Days</label>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row mt-3">
                                                <div class="col-sm-5">
                                                    <div class="row">
                                                        <div class="col-sm-4 netdays defaultDisabled">
                                                            @Html.TextBoxFor(m => m.FuelOfferDetails.NetDays, new { @class = "form-control always datatype-decimal" })
                                                            @Html.ValidationMessageFor(m => m.FuelOfferDetails.NetDays)
                                                        </div>
                                                        <div class="col-sm-8 pl0 pt8 fs12">
                                                            @Resource.lblDaysOfReceipt
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-sm-4">
                                                    <div class="form-group">
                                                        <label> @Resource.lblPaymentMethod</label>
                                                        @Html.EnumDropDownListFor(m => m.FuelDeliveryDetails.PaymentMethods, new { @class = "form-control" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- payment terms ends -->
                </div>
                <div id="tpo-other" data-parent-tab="tab-other-delivery" class="subTabs animated fadeIn hide-element">
                    <div class="row">
                        <div id="div-invoice-notification-instructions" class="col-sm-12">
                            <div class="col-sm-12 well mb15">
                                <div class="col-sm-12">
                                    <h4 class="pb10">@Resource.lblInvoiceNotificationInstructions</h4>
                                    <div class="row">
                                        @foreach (var pref in Enum.GetValues(typeof(InvoiceNotificationPreferenceTypes)))
                                        {
                                            var type = typeof(InvoiceNotificationPreferenceTypes);
                                            var memberInfo = type.GetMember(pref.ToString());
                                            var attributes = memberInfo[0].GetCustomAttributes(typeof(DisplayAttribute), false);
                                            var displayName = ((DisplayAttribute)attributes[0]).Name;
                                            <div class="col-md-12 @((InvoiceNotificationPreferenceTypes)pref != InvoiceNotificationPreferenceTypes.None && (InvoiceNotificationPreferenceTypes)pref != InvoiceNotificationPreferenceTypes.SendPDIDeliveryDetails ? "notification-suppresspricing" : "")">
                                                <div class="radio mb5">
                                                    <label>
                                                        @Html.RadioButtonFor(s => s.OrderAdditionalDetailsViewModel.BOLInvoicePreferenceTypes, (int)pref, Model.OrderAdditionalDetailsViewModel.BOLInvoicePreferenceTypes == (InvoiceNotificationPreferenceTypes)pref ? new { @checked = "checked" } : null)
                                                        @displayName
                                                    </label>
                                                    @if ((InvoiceNotificationPreferenceTypes)pref == InvoiceNotificationPreferenceTypes.SendPDIDeliveryDetails)
                                                    {
                                                        <div class="ml25 checkbox chkhideon-suppresspricing">
                                                            @Html.CheckBoxFor(m => m.OrderAdditionalDetailsViewModel.IsIncludePricing, new { @class = "no-hidden-click" })
                                                            <label class="" for="IsIncludePricing">@Resource.lblIncludePricing</label>
                                                        </div>
                                                    }
                                                    @if ((InvoiceNotificationPreferenceTypes)pref == InvoiceNotificationPreferenceTypes.SendPDIDeliveryDetails)
                                                    {
                                                        <div class="ml25 checkbox pdieTax-confirmation chkhideon-suppresspricing">
                                                            @Html.CheckBoxFor(m => m.OrderAdditionalDetailsViewModel.IsPdiTaxRequired, new { @class = "" })
                                                            <label class="" for="IsPdiTaxRequired">@Resource.lblPdieTaxRequired</label>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="col-sm-12 well mb15">
                                <div class="col-sm-12">
                                    <h4 class="pb10">Other Details</h4>
                                    <div class="row">
                                        <div class="col-sm-3 mb10">
                                            <label>@Resource.lblCarrier</label>
                                            @Html.PartialFor("~/Views/Shared/_PartialCarrier.cshtml", m => m.Carrier)
                                        </div>
                                        <div class="col-sm-3 mb10">
                                            @Html.LabelFor(m => m.OrderAdditionalDetailsViewModel.SupplierSource.Name)
                                            @Html.PartialFor("~/Views/Shared/_PartialSupplierSource.cshtml", m => m.OrderAdditionalDetailsViewModel.SupplierSource)
                                        </div>
                                        <div class="col-sm-3 mb10">
                                            @Html.LabelFor(m => m.OrderAdditionalDetailsViewModel.SupplierSource.ContractNumber)
                                            @Html.TextBoxFor(m => m.OrderAdditionalDetailsViewModel.SupplierSource.ContractNumber, new { @class = "form-control", @placeholder = @Resource.lblContractNumber })
                                        </div>
                                        @*<div class="col-sm-3 mb10">
                                                @Html.LabelFor(m => m.OrderAdditionalDetailsViewModel.LoadCode)
                                                @Html.TextBoxFor(m => m.OrderAdditionalDetailsViewModel.LoadCode, new { @class = "form-control", @placeholder = @Resource.lblLoadCode })
                                            </div>*@
                                        @*@if (Model.PreferencesSetting == null || (Model.PreferencesSetting != null && !Model.PreferencesSetting.IsSupressOrderPricing))
                                            {*@
                                        <div class="col-sm-3 mb10 section-supplierAllowance">
                                            <label>@Resource.lblSupplierAllowance</label>
                                            <div class="input-group mtm1">
                                                <span class="input-group-addon currency-symbol allowance">@Model.AddressDetails.Country.Currency/@Resource.lblPerGallon</span>
                                                @Html.TextBoxFor(m => m.OrderAdditionalDetailsViewModel.Allowance, new { @class = "form-control datatype-decimal always" })
                                            </div>
                                            @Html.ValidationMessageFor(m => m.OrderAdditionalDetailsViewModel.Allowance)
                                        </div>
                                        @*}*@

                                        <div class="col-sm-4 order-close-threshold mb10">
                                            @Html.LabelFor(m => m.FuelOfferDetails.CloseOrderId)
                                            <div class="row">
                                                <div class="col-sm-6">
                                                    <div class="form-group">
                                                        <div class="input-group">
                                                            @Html.TextBoxFor(m => m.FuelOfferDetails.OrderClosingThreshold, new { @class = "form-control" })
                                                            <span class="input-group-addon">%</span>
                                                        </div>
                                                        @Html.ValidationMessageFor(m => m.FuelOfferDetails.OrderClosingThreshold)
                                                    </div>
                                                </div>
                                                <div class="col-sm-4 pt8 pl10">
                                                    @Resource.lblComplete
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb10">
                                            <label>@Resource.lblInvoiceNotes</label>
                                            <div class="mtm1">
                                                @Html.TextAreaFor(m => m.OrderAdditionalDetailsViewModel.Notes, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(m => m.OrderAdditionalDetailsViewModel.Notes)
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="col-sm-12">
                                    <div class="row mb10">
                                        <div class="col-md-6">
                                            <div id="special-instruction-section" class="partial-section mirror">
                                                <div class="partial-block-collection-section">
                                                    @if (Model.FuelDeliveryDetails.SpecialInstructions != null && Model.FuelDeliveryDetails.SpecialInstructions.Count() > 0)
                                                    {
                                                        foreach (var instruction in Model.FuelDeliveryDetails.SpecialInstructions)
                                                        {
                                                            Html.RenderPartial("~/Views/Shared/_PartialSpecialInstruction.cshtml", instruction);
                                                        }
                                                    }
                                                </div>
                                                <a href="javascript:void(0)" class="add-partial-block" data-url="@Url.Action("SpecialInstruction", "FuelRequest" , new { area="Supplier" })"><span class="fa fa-plus-circle"></span> @Resource.lblSpecialInstruction</a>
                                                <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.infoMessageSpecialInstructions"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="row mb10 mt30">
                                        <div class="col-md-12">
                                            <h4>@Resource.headingBadgeDetails</h4>
                                            @Html.PartialFor("_PartialOrderBadge", m => m.OrderBadgeDetails)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12 hide-element">
                            <div class="col-sm-12 well mb15 address-container" id="billing-address">
                                <div class="col-sm-12">
                                    <div class="billing-control">
                                        <div class="checkbox mt0 mb0 dib">
                                            <div class="form-group mb0">
                                                <div id="lbl-chk-billing-address">
                                                    <div id="chk-billing-address" class="dib">
                                                        @Html.HiddenFor(m => m.BillingAddress.Id)
                                                        @Html.CheckBoxFor(m => m.BillingAddress.IsBillingAddressRequired, new { @onchange = "toggleBillingAddressControls(this)", @class = "mt15" })
                                                    </div>
                                                    <h4 class="dib">@Resource.lblBillingAddress</h4>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="pull-right dib mt10">
                                            <a href="javascript:void(0);" class="color-grey fs18 ml5 toggle-tiledata" onclick="toggleTileElement(this, 'billing-address');"><i class="fa fa-chevron-circle-up"></i></a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-12 billing-address-controls element-container">
                                    <div class="row combineDiv">
                                        <div class="col-sm-3">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.BillingAddress.Address)<span class="required pl4 mandatory-symbol" aria-required="true">*</span>
                                                @Html.TextBoxFor(m => m.BillingAddress.Address, new { @class = "form-control addressInput address-type" })
                                                <span class="field-validation-error hide-element billing-address-validation-error" id="spnErrorBillingAddress"></span>
                                            </div>
                                        </div>
                                        <div class="col-xs-3">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.BillingAddress.ZipCode)
                                                @Html.TextBoxFor(m => m.BillingAddress.ZipCode, new { @class = "form-control billingZipCode addressInput address-type" })
                                                <span class="field-validation-error hide-element billing-zipcode-validation-error" id="spnErrorBillingZipCode"></span>
                                            </div>
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.BillingAddress.City)
                                                @Html.TextBoxFor(m => m.BillingAddress.City, new { @class = "form-control addressInput address-type" })
                                                <span class="field-validation-error hide-element billing-city-validation-error" id="spnErrorBillingCity"></span>
                                            </div>
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="form-group">
                                                @Html.LabelFor(m => m.BillingAddress.County)
                                                @Html.TextBoxFor(m => m.BillingAddress.County, new { @class = "form-control addressInput address-type" })
                                                <span class="field-validation-error hide-element billing-county-validation-error" id="spnErrorBillingCounty"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row combineDiv">
                                        <div class="col-sm-3">
                                            <div class="form-group">
                                                @Html.HiddenFor(m => m.BillingAddress.Country, new { @Value = 0, @class = "addressInput address-type" })
                                                @Html.LabelFor(m => m.BillingAddress.CountryName)
                                                @Html.TextBoxFor(m => m.BillingAddress.CountryName, new { @class = "form-control addressInput address-type" })
                                                <span class="field-validation-error hide-element billing-country-validation-error" id="spnErrorBillingCountryName"></span>
                                            </div>
                                        </div>
                                        <div class="col-sm-3">
                                            <div class="form-group">
                                                @Html.HiddenFor(m => m.BillingAddress.State, new { @Value = 0, @class = "addressInput" })
                                                @Html.LabelFor(m => m.BillingAddress.StateName)
                                                @Html.TextBoxFor(m => m.BillingAddress.StateName, new { @class = "form-control state addressInput address-type" })
                                                <span class="field-validation-error hide-element billing-state-validation-error" id="spnErrorBillingStateName"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="floating-buttons white-bg pt10">
            <div class="container">
                <div class="row">
                    <div class="col-sm-9 text-right">
                        <input type="button" value="Cancel" class="btn" onclick="GoToPreviousURL()" />
                        <input name="preview" type="button" value="Prev" class="btn btn-lg btn-default btnPrev" onclick="changeTab(this, 'prev');onTabChanged();" />
                        <input name="next" type="button" value="Next" class="btn btn-lg btn-default btnNext" onclick="changeTab(this, 'next'); onTabChanged();" />
                        <input id="@Resource.btnLabelSubmit" type="button" value="@Resource.btnLabelSubmit" class="btn btn-lg btn-primary btnSubmit" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-3">

            <div id="inventory-data-capture-type" class="well address-controls">
                <div class="row">
                    <div class="col-sm-12">
                        <h3>@Resource.lblInventoryCaptureMethod</h3>
                        <div class="form-group mb0">
                            <div class="radio mb5">
                                <div class="db mr20">
                                    <label>
                                        @Html.RadioButtonFor(m => m.AddressDetails.InventoryDataCaptureType, InventoryDataCaptureType.NotSpecified, new { @checked = "checkded" })
                                        @InventoryDataCaptureType.NotSpecified.GetDisplayName()
                                    </label>
                                </div>
                                <div class="db mr20">
                                    <label>
                                        @Html.RadioButtonFor(m => m.AddressDetails.InventoryDataCaptureType, InventoryDataCaptureType.Connected)
                                        @InventoryDataCaptureType.Connected.GetDisplayName()
                                    </label>
                                </div>
                                <div class="db">
                                    <label>
                                        @Html.RadioButtonFor(m => m.AddressDetails.InventoryDataCaptureType, InventoryDataCaptureType.Manual)
                                        @InventoryDataCaptureType.Manual.GetDisplayName()
                                    </label>
                                </div>
                                <div class="db">
                                    <label>
                                        @Html.RadioButtonFor(m => m.AddressDetails.InventoryDataCaptureType, InventoryDataCaptureType.CallIn)
                                        @InventoryDataCaptureType.CallIn.GetDisplayName()
                                    </label>
                                </div>
                                <div class="db">
                                    <label>
                                        @Html.RadioButtonFor(m => m.AddressDetails.InventoryDataCaptureType, InventoryDataCaptureType.Mixed)
                                        @InventoryDataCaptureType.Mixed.GetDisplayName()
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="well">
                <div class="row">
                    <div class="col-sm-12">
                        <h3 class="mt0">@Resource.headingCustomer</h3>
                        <div class="custom-control custom-checkbox">
                            @Html.CheckBoxFor(m => m.IsNotifyDeliveries, new { @class = "custom-control-input" })
                            <label class="custom-control-label" for="IsNotifyDeliveries">@Resource.lblNotifyDeliveries</label>
                        </div>
                        <div class="custom-control custom-checkbox">
                            @Html.CheckBoxFor(m => m.IsNotifySchedules, new { @class = "custom-control-input" })
                            <label class="custom-control-label" for="IsNotifySchedules">@Resource.lblNotifySchedules</label>
                        </div>
                        <div class="custom-control custom-checkbox">
                            @Html.CheckBoxFor(m => m.IsInvitationEnabled, new { @class = "custom-control-input" })
                            <label class="custom-control-label" for="IsInvitationEnabled">@Resource.lblSendInvitationLink</label>
                        </div>
                        <div class="custom-control custom-checkbox">
                            @Html.CheckBoxFor(m => m.AddressDetails.IsProFormaPoEnabled, new { onclick = "togglePoFromaPoElement(this);", @class = "custom-control-input" })
                            <label class="custom-control-label" for="AddressDetails_IsProFormaPoEnabled">@Resource.lblProFormaPOEnabled (@Resource.lblOptional)</label>
                        </div>
                        <div class="custom-control custom-checkbox mb0 address-controls">
                            @Html.CheckBoxFor(m => m.AddressDetails.IsRetailJob, new { onChange = "onJobTypeChange(this)", @class = "custom-control-input" })
                            <label class="custom-control-label" for="AddressDetails_IsRetailJob">@Resource.lblRetailJob</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="well address-controls">
                <div class="row">
                    <div class="col-sm-12">
                        <h3 class="mt0">@Resource.headingAsset</h3>
                        <div class="checkbox">
                            <label class="enableAssetTracking">
                                @Html.CheckBoxFor(m => m.IsAssetTracked, new { onclick = "checkBoxChange(this,'enableStatusForAllAssets')", @class = "no-hidden-click" }) @Resource.lblEnableAssetTracking
                            </label>
                        </div>
                        <div class="checkbox enableStatusForAllAssets subSectionOpacity pntr-none mb0">
                            <label>
                                @Html.CheckBoxFor(m => m.IsAssetDropStatusEnabled) @Resource.lblEnableStatusForAllAssets
                                <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.lblMessageDropStatusForAllAssets"></i>
                            </label>
                            <label>
                                @Html.CheckBoxFor(m => m.FuelDeliveryDetails.IsPrePostDipRequired)
                                @Resource.lblRequiredPrePostDipTestDataForEachTankAsset
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <div class="well">
                <div class="row">
                    <div class="col-sm-12">
                        <h3 class="mt0">@Resource.lblInvoiceCreationPreference</h3>
                        <label class="mb5 mt0 hide-from-tpo f-bold">@Resource.lblInvoiceCreationPreference</label>
                        <div class="form-group mb0">
                            <div class="radio mb5">
                                <div class="db mr20">
                                    <label>
                                        @Html.RadioButtonFor(m => m.FuelDeliveryDetails.OrderEnforcementId, OrderEnforcement.EnforceOrderLevelValues, new { @checked = "checkded" })
                                        @Resource.lblEnforceOrderLevelValues
                                    </label>
                                </div>
                                <div class="db mr20">
                                    <label>
                                        @Html.RadioButtonFor(m => m.FuelDeliveryDetails.OrderEnforcementId, OrderEnforcement.ManageException)
                                        @Resource.lblManageExceptions
                                    </label>
                                </div>
                                <div class="db">
                                    <label>
                                        @Html.RadioButtonFor(m => m.FuelDeliveryDetails.OrderEnforcementId, OrderEnforcement.NoEnforcement)
                                        @Resource.lblNoEnforcement
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="location-managed" class="well">
                <div class="row">
                    <div class="col-sm-12">
                        <h3 class="mt0">@Html.LabelFor(m => m.AddressDetails.LocationManagedType)</h3>
                        <div class="form-group mb0">
                            <div class="radio mb5">
                                <div class="db mr20">
                                    <label>
                                        @Html.RadioButtonFor(m => m.AddressDetails.LocationManagedType, LocationManagedType.NotSpecified, new { @checked = "checked", onclick = "showHideControls(this,'noelement','carrier-section');hideShowRouteDdl(false)" })
                                        @LocationManagedType.NotSpecified.GetDisplayName()
                                    </label>
                                </div>
                                <div class="db mr20">
                                    <label>
                                        @Html.RadioButtonFor(m => m.AddressDetails.LocationManagedType, LocationManagedType.SupplierManaged, new { onclick = "showHideControls(this,'noelement','carrier-section');hideShowRouteDdl(false)" })
                                        @LocationManagedType.SupplierManaged.GetDisplayName()
                                    </label>
                                </div>
                                <div class="db">
                                    <label>
                                        @Html.RadioButtonFor(m => m.AddressDetails.LocationManagedType, LocationManagedType.PartialCarrierManaged, new { onclick = "showHideControls(this,'noelement','carrier-section');hideShowRouteDdl(false)" })
                                        @LocationManagedType.PartialCarrierManaged.GetDisplayName()
                                    </label>
                                </div>
                                <div class="db">
                                    <label>
                                        @Html.RadioButtonFor(m => m.AddressDetails.LocationManagedType, LocationManagedType.FullyCarrierManaged, new { onclick = "showHideControls(this,'carrier-section','noelement');hideShowRouteDdl(true)" })
                                        @LocationManagedType.FullyCarrierManaged.GetDisplayName()
                                        <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@Resource.lblAssignDRToCarrierText"></i>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="well divTrailerType address-controls">
                <div class="row">
                    <div class="col-sm-12">
                        <h3 class="mt0 mb5">@Resource.lblTrailerCompatibility</h3>
                        @Html.ListBoxFor(m => m.TrailerType, new SelectList(CommonHelperMethods.GetTrailerTypeEnumList(), "Text", "Value", 0), new { @class = "form-control multi-select", @style = "padding-left:0px" })
                    </div>
                </div>
            </div>

            <div id="freight-pricing-method" class="well">
                <div class="row">
                    <div class="col-sm-12">
                        <h3 class="mt0">@Html.LabelFor(m => m.OrderAdditionalDetailsViewModel.FreightPricingMethod)</h3>
                        <div class="form-group mb0">
                            <div class="radio mb5">
                                <div class="db mr20">
                                    <label>
                                        @Html.RadioButtonFor(m => m.OrderAdditionalDetailsViewModel.FreightPricingMethod, FreightPricingMethod.Manual, new { @checked = "checked" })
                                        @FreightPricingMethod.Manual.GetDisplayName()
                                    </label>
                                </div>
                                <div class="db mr20">
                                    <label>
                                        @Html.RadioButtonFor(m => m.OrderAdditionalDetailsViewModel.FreightPricingMethod, FreightPricingMethod.Auto)
                                        @FreightPricingMethod.Auto.GetDisplayName()
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="well">
                <div class="row">
                    <div class="col-sm-12">
                        <h3 class="mt0">@Resource.lblDriver should</h3>
                        <div class="checkbox form-group form-check mb-2">
                            @Html.CheckBoxFor(m => m.OrderAdditionalDetailsViewModel.IsDriverToUpdateBOL, new { @class = "no-hidden-click form-check-input" })
                            <label class="form-check-label">@Resource.lblDriverToUpdateBOL</label>
                        </div>
                        <div class="checkbox form-group form-check mb-2">

                            @Html.CheckBoxFor(m => m.FuelDeliveryDetails.IsBolImageRequired, new { @class = "no-hidden-click form-check-input" })
                            <label class="form-check-label">@Resource.lblBOLImageRquired</label>
                        </div>
                        <div class="checkbox form-group form-check mb-2">
                            @Html.CheckBoxFor(m => m.FuelDeliveryDetails.IsDropImageRequired, new { @class = "no-hidden-click form-check-input" })
                            <label class="form-check-label">@Resource.lblDropImageRquired</label>
                        </div>
                        <div class="checkbox form-group form-check mb-2">
                            @Html.CheckBoxFor(m => m.AddressDetails.SignatureEnabled,new { @class = "form-check-input" })
                            <label class="form-check-label">@Resource.lblEnableSignature</label>
                        </div>
                        <div class="checkbox form-group form-check mb-2">
                            @Html.CheckBoxFor(m => m.IsBadgeMandatory, new { @class = "form-check-input" })
                            <label class="form-check-label">@Resource.lblIsBadgeNumberMandatory</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="enable-tpo-buyer">
                @Html.Partial("~/Views/Shared/_PartialJobSpecificBillToView.cshtml")
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade float-left" id="jobSpecificBillToModel" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body" id="jobSpecificBillToData">
                    @Html.PartialFor("_PartialJobSpecificBillingAddress", m => m.BillToInfo)
                </div>
            </div>
        </div>
    </div>
    <div class="side-panel" id="set-tier-price">
        <div class="side-panel-wrapper">
            <div class="pa bg-white top0 left0 z-index5 loading-wrapper pricinglider-loader hide-element"><span class='spinner-dashboard pa'></span></div>
            <div class="pt10 pb0">
                <a class="ml20 close-panel" onclick="closeSlidePanel();"><i class="fa fa-close fs18"></i></a>
                <h3 class="dib mt0 mb0 ml15">Set Tier Price </h3>
            </div>
            <div id="tier-pricing-slider">
            </div>
        </div>
    </div>
}
@using (Html.BeginScripts())
{
    <script src="https://maps.googleapis.com/maps/api/js?key=@(SiteFuel.Exchange.Core.Utilities.AppSettings.GoogleMapApiKey)" type="text/javascript"></script>
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/Content/js/address-goecoder")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/Content/js/quantityrange-validate")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/Script/Main/Order")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/Script/Main/Job")
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/Content/js/pricing")
    //@Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/Script/Main/Email")


<script type="text/javascript">
        $.validator.setDefaults({ ignore: "" });
                                            var latLongFuelTypeChanged = true, isExistingJob = false;
                                            var mapsApiKey = '@SiteFuel.Exchange.Core.Utilities.AppSettings.GoogleApiKey';
                                            var productListUrl = "@Url.Action("GetProductList", "FuelRequest", new { area = "Supplier" })";
                                            var allStates =  @Html.Raw(Json.Encode(CommonHelperMethods.GetStatesOfAllCountries()));
                                            var stateId = @Model.AddressDetails.State.Id; // for state autofill
                                            var zipCode = getZipcode();
                                            var jobId = getJobIdFromDropdown();
                                            var isCustomBillingAddressAllowed = true;
                                            var fuelSurchargeLink = "@Url.Action("BuyerDetails", "Dashboard", new { area = "Supplier" })";
                                            var getProductTypeUrl = '@Url.Action("GetMstProducts", "FuelRequest","Supplier")';
                                            var customerCompany = '';

                                            function hideShowRouteDdl(value) {
                                                value ? ($("#routediv").addClass('hide'), $(".routecontrol").val(null)) : $("#routediv").removeClass('hide');
                                        }
                                        function AddRemoteValidation() {
            $("#@Html.IdFor(m => m.AddressDetails.JobName)").rules("add", {
                                            remote: {
                                                url: "@Url.Action("ValidateJobName", "Order", new { area = "Supplier" })",
                    type: "post",
                    data: {
                                                    jobName: function () { return $("#@Html.IdFor(m => m.AddressDetails.JobName)").val(); },
                        companyName: function () { return $("#@Html.IdFor(m => m.CustomerDetails.CompanyName)").val(); }
                                                    }
                                                },
                messages: {
                                                remote: '@Resource.errMessageJobNameAlreadyExists'
                }
                                            });
        }

        function isExistingJobRadioSelected(isExisting) {
                                            renderPartialForcastingForm(0);
                                            toggleAddressConstrols(isExisting);
                                            toggleSalesTaxExemption(isExisting);
                                            if ($("input:radio[name='AddressDetails.IsNewJob'][value='False']").is(":checked") == true) {
                $("#@Html.IdFor(m => m.AddressDetails.JobName)").rules("remove", "remote");
                                        }
            else {
                AddRemoteValidation();
            }
            toggleSiteImageUpload();
            GetJobSpecificBillingAddress();
        }

        function AddNewDriver() {
         $("#@Html.IdFor(m => m.IsNewDriver)").val('True');
            $("#@Html.IdFor(m => m.DriverId)").attr("disabled", "disabled");
            $(".new-driver").slideDown();
            $(".new-driver :input").removeAttr("disabled");
            $("#link-addnewdriver").hide();
            $("#@Html.IdFor(m => m.DriverId)").val('');
            $("#@Html.IdFor(m => m.DriverFirstName)").focus();
                                        }

                                        function RevertDriver() {
            $("#@Html.IdFor(m => m.IsNewDriver)").val('False');
            $("#@Html.IdFor(m => m.DriverId)").removeAttr("disabled");
            $(".new-driver").slideUp();
            $("#link-addnewdriver").show();
            $(".new-driver :input").attr("disabled", "disabled");
                                        }

                                        function toggleAddressConstrols(isExisting) {
                                            if (isExisting) {
                $(".address-controls").removeClass("subSectionOpacity");
                $(".company-owned").removeClass("pntr-none");
				$('[name="@Html.NameFor(m=>m.AddressDetails.IsVarious)"]').attr('readonly', 'readonly');
                                            }
                                            else {
                $(".address-controls").addClass("subSectionOpacity");
                $(".company-owned").addClass("pntr-none");
                $('[name="@Html.NameFor(m=>m.AddressDetails.IsVarious)"]').removeAttr('readonly');
                                            }
                                        }

                                        function toggleSiteImageUpload() {
                                            if (!isNewJobRadioChecked())
                                            {
                 $("#image-tpo").hide();
                                            }
                                            else {
                 $("#image-tpo").show();
                                            }
                                        }

                                        var billingAddressId = 0;
                                        function ClearBillingAddress(customBillingAddressAllowed) {
                                            isCustomBillingAddressAllowed = customBillingAddressAllowed;
                                            if (!customBillingAddressAllowed && billingAddressId > 0) {
            $('#BillingAddress_IsBillingAddressRequired').removeAttr('readonly');
            $('#BillingAddress_IsBillingAddressRequired').prop('checked', true);
            $('#chk-billing-address').show();
            $('#lbl-chk-billing-address').addClass('pl0');
            $(".billing-address-controls").removeClass("subSectionOpacity");
            $(".billing-address-controls :input").removeAttr('readonly').removeClass("pntr-none");
                                                enableElement('.billing-address-controls');
                                                isCustomBillingAddressAllowed = true;
            $("#BillingAddress_Country").trigger('change');
                                            }
                                            else {
            $('.billing-address-controls :input.address').val("");
            $('.billing-address-controls :input.city').val("");
            $('.billing-address-controls :input.zipcode').val("");
            $('.billing-address-controls :input.state').val("");
            $('.billing-address-controls :input.country').val("");
                                                billingAddressId = 0;
            $('#BillingAddress_IsBillingAddressRequired').removeAttr('readonly');
            $('#chk-billing-address').show();
            $('#lbl-chk-billing-address').removeClass('pl0');
                                                if ($('#AddressDetails_IsVarious').is(":checked") &&
                                                    customBillingAddressAllowed) {
                                            CheckAddBillingAddress(true);
                                        }
            else {
                $('#BillingAddress_IsBillingAddressRequired').prop('checked', false);
                                        }
        }
    }

        function toggleBillingAddressControls(elem) {
                                            if (isCustomBillingAddressAllowed) {
                                                if ($(elem).is(':checked')) {
                                            enableElement('.billing-address-controls');
                    $(".billing-address-controls").removeClass("subSectionOpacity");
                    $(".billing-address-controls").find('.combineDiv').removeClass("subSectionOpacity");
                    $(".billing-address-controls :input").removeAttr('readonly').removeClass("pntr-none");
                                            if (isTileCollapsed('billing-address')) {
                                                toggleTileElement(null, 'billing-address');
                                            }
                                        }
                else {
                                            if ($('#AddressDetails_IsVarious').is(':checked') &&
                        $("#@Html.IdFor(m => m.CustomerDetails.IsNewCompany)").val() == 'True') {
                        $('#BillingAddress_IsBillingAddressRequired').prop('checked', true);
                                            }
                    else {
                                                disableElement('.billing-address-controls');
                        $(".billing-address-controls").addClass("subSectionOpacity");
                        $(".billing-address-controls :input").attr('readonly', 'readonly').addClass("pntr-none");
                                            }
                                        }
			}
            else {
				$('#BillingAddress_IsBillingAddressRequired').prop('checked', false);
                                        }
		}

        function togglePoFromaPoElement(element) {
                                            if ($(element).is(':checked')) {
                $("#external-ponumber").hide();
                                        }
            else {
                $("#external-ponumber").show();
                                        }
        }

        function toggleSalesTaxExemption(isExisting) {
                                            if (isExisting) {
                $("#@Html.IdFor(m => m.IsTaxExempted)").attr("disabled", "disabled");
                $("#sales-tax-exempt").addClass("subSectionOpacity");
                                            }
                                            else {
                $("#@Html.IdFor(m => m.IsTaxExempted)").removeAttr("disabled", "disabled");
                $("#sales-tax-exempt").removeClass("subSectionOpacity");
                                            }
                                        }

                                        function enableVarious() {
            $('[name="@Html.NameFor(m=>m.AddressDetails.IsVarious)"]').parent().show();

                                        }

                                        function disableVarious() {

            $('[name="@Html.NameFor(m=>m.AddressDetails.IsVarious)"]').parent().hide();
            $('[name="@Html.NameFor(m=>m.AddressDetails.IsVarious)"]').prop('checked', false);
                                            CheckAddBillingAddress(false);
                                            showHideControls(this,'wrapper-location','wrapper-various');
                                        }

        $('#AddressDetails_IsVarious').click(function ()
        {
                                            if (!$('#AddressDetails_IsVarious').is(":checked")) {
                                                showHideControls(this, 'wrapper-location', 'wrapper-various');
                                                CheckAddBillingAddress(false);
                                            }
            else
                                            {
                                                CheckAddBillingAddress(true);
                                                // $('#BillingAddress_IsBillingAddressRequired').prop('checked', true);
                                                CheckAddBillingAddress(true);
                                                showHideControls(this, 'wrapper-various', 'wrapper-location');
               $('input:checkbox[name="@Html.NameFor(m => m.AddressDetails.IsVarious)"]').val('true');
                                                //  $(".wrapper-various").prop("disabled", "disabled");
                                                // $("#address-controls").removeClass("subSectionOpacity");
                                            }

                                        });

        $('#IsAssetTracked').click(function () {
                                            if (!$('#IsAssetTracked').is(":checked")) {
                $('#FuelDeliveryDetails_IsPrePostDipRequired').prop('checked', false);
                $('#IsAssetDropStatusEnabled').prop('checked', false);
                                            }
                                        });
                                        function onTabChanged() {
                                            if ($('#AddressDetails_IsVarious').is(":checked")) {
                                            CheckAddBillingAddress(true);
                $('#BillingAddress_IsBillingAddressRequired').trigger('click');
                                        }
        }

        function selectAxxis() {
            $('.ddl-pricing-source').val(@((int)PricingSource.Axxis));
            $('.ddl-pricing-source').trigger('change');
                                        }

                                        function updateJobSpecificHeaders(oldString, newString) {
            $(".job-section .job-site-info").each(function () {
                                                var text = $(this).text();
                                                text = text.replace(oldString, newString);
                $(this).text(text);
                                            });
        }

        function isFTLSelected() {
                                            return $('#@Html.IdFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.TruckLoadTypes)').val() == '@((int)TruckLoadTypes.FullTruckLoad)';
                                        }

                                        function UpdateDeliveryScheduleCarriers() {
                $('.tpo-carrier').show();
    }



        $(document).ready(function () {
            $(".selectCompany").select2({
                      ajax: {
                        url: "@Url.Action("GetAllBuyerCompanyList", "Order", new { area = "Supplier" })",
                        dataType: 'json',
                        delay: 1000,
                        data: function (params) {
                          return {
                            companyName: params.term, // search term
                            page: params.page
                          };
                        },
                    processResults: function (data, params) {
                        params.page = params.page || 1;
                        return {
                            results: $.map(data, function (val, item) {
                                return { id: val.Id, text: val.Name };
                            }),
                            // if more then 30 items in dropdown, remaining set of items  will be show on numbered page link in dropdown control.
                            pagination: { more: (params.page * 30) < data.length }
                        };
                    }
                },
                minimumInputLength: 1 // Minimum length of input in search box before ajax call triggers
            });

            if (@Model.CustomerDetails.CompanyId.HasValue) {
                $(".selectCompany").append(new Option('@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.CustomerDetails.CompanyName))', '@Model.CustomerDetails.CompanyId', true, true)).trigger('change');
            };

            $(".selectExistingJobId").select2({
                                            placeholder: '@string.Format(Resource.valMessageSelect, Resource.lblJob)',
                allowClear: true
            }).on('select2:opening', function (e) {
                $(this).data('select2').$dropdown.find(':input.select2-search__field').attr('placeholder', '@Resource.lblCompany')
            });
            $(".enum-ddl-spt option[value='0']").remove();
                                            checkBoxChange(".enableAssetTracking input:checkbox", "enableStatusForAllAssets");
                                            UpdateCurrencyAndUom($("#@Html.IdFor(m => m.AddressDetails.Country.Currency)"));
                                            toggleTileElement(null, 'billing-address');
            $('.ddl-schedule-qty-type').removeClass('hide-element');
            $(".other-hardware").on("change", function () {
                                                if ($(this).prop("checked") === true) {
                                                    showHardwareDetails();
                                                }
                else {
                    $('.fuel-request-fees').show();
                    $(".thirdparty-fees").addClass("hide-element");
                    $(".hardware-details").addClass("hide-element");
                    $(".hardware-details").slideUp();
                }
            });
            if ($("#@Html.IdFor(m=> m.CustomerDetails.IsNewCompany)").val() == 'True') {
                $('#contactpersons').show();
            }
            else {
                $('#contactpersons').hide();
            }
            if ($("#@Html.IdFor(m=> m.FuelDetails.IsMarineLocation)").val() == 'True') {
                $(".uom-section").addClass("hide-element");
                    $(".mfn-uom-section").removeClass("hide-element");
                                                if ($("#@Html.IdFor(m => m.AddressDetails.Country.Currency)").val() == '@((int)Currency.USD)')
                {
                    $('#@Html.IdFor(M=>M.AddressDetails.MarineUoM)').children('option[value="@((int)UoM.Litres)"]').hide();
                    $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").children('option[value="@((int)UoM.Gallons)"]').show();
                    $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").val("@((int)UoM.Gallons)");

                    //UOM in qty section
                     $('#MFNQuantityUoM').children('option[value="@((int)UoM.Litres)"]').hide();
                    $("#MFNQuantityUoM").children('option[value="@((int)UoM.Gallons)"]').show();
                    $("#MFNQuantityUoM").trigger("change");

                                                }
                                                if ($("#@Html.IdFor(m => m.AddressDetails.Country.Currency)").val() == '@((int)Currency.CAD)')
                {
                    $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").children('option[value="@((int)UoM.Litres)"]').show();
                    $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").children('option[value="@((int)UoM.Gallons)"]').hide();
                    $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").val("@((int)UoM.Litres)");
                     //UOM in qty section
                     $('#MFNQuantityUoM').children('option[value="@((int)UoM.Litres)"]').hide();
                    $("#MFNQuantityUoM").children('option[value="@((int)UoM.Gallons)"]').show();
                    $("#MFNQuantityUoM").trigger("change");
                                                }

                                            }
                else {
                    $(".uom-section").removeClass("hide-element");
                    $(".mfn-uom-section").addClass("hide-element");
                                            }

            $(document).on('change', $('input[name="@Html.NameFor(m=> m.FuelDetails.FuelQuantity.QuantityTypeId)"]'), function () {
                                                CloseOrderWhen();
                                                if ($('input[name="@Html.NameFor(m=> m.FuelDetails.FuelQuantity.QuantityTypeId)"]:checked').val() != '@((int)QuantityType.NotSpecified)' && $('#@Html.IdFor(m => m.FuelDetails.IsMarineLocation)').val() == 'True') {
                    //$('.marine-quantity-uom').show();
                    $('.quantity-uom').addClass('hide-element');
                }
                else {
                    //$('.marine-quantity-uom').hide();
                    $('.quantity-uom').removeClass('hide-element');
                }
                if ($('input[name="@Html.NameFor(m=> m.FuelDetails.FuelQuantity.QuantityTypeId)"]:checked').val() == '@((int)QuantityType.SpecificAmount)' || $('input[name="@Html.NameFor(m=> m.FuelDetails.FuelQuantity.QuantityTypeId)"]:checked').val() == '@((int)QuantityType.NotSpecified)' ) {
                    $("#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.MaximumQuantity)").val(0);
                    $("#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.MinimumQuantity)").val(0);
                }
            });

            //to load order details for clone order
            if ('@Model.IsCloneOrder')
            {
                $("#@Html.IdFor(m => m.CustomerDetails.CompanyId)").trigger('change');
            }

            $('#@Html.IdFor(m => m.AssignedCarrierCompId)').on('change', function () {
                GetCarrierUserEmails($("#@Html.IdFor(m => m.AssignedCarrierCompId)").val());
            });


            $("#terminalContainer").removeClass('hidden');
            $('.show-in-tpo').css('display', 'inline-block');
            var addressStateId = $('#@Html.IdFor(m=>m.AddressDetails.State.Id)').val();
            if (addressStateId > 0) {
                var cityGrpTerminalId = @(Model.FuelDetails.FuelPricing.CityGroupTerminalId ?? 0);
                fillCityGroupTerminals(addressStateId, cityGrpTerminalId);
            }
            CloseOrderWhen();
            var $form = $("#createOrderForm");
            AddRemoteValidation();

            $('input[name="@Html.NameFor(m => m.PricingDetails.PricingTypeId)"]').click(function () {
                var selectedPricingType = parseInt($('input[name="@Html.NameFor(m => m.PricingDetails.PricingTypeId)"]:checked').val());
                if (selectedPricingType != '@((int)PricingType.Suppliercost)') {
                    validationMessageFor($("#@Html.IdFor(m=>m.PricingDetails.PricingTypeId)").attr('name'), '');
                }
            });

            // temp hide this

           // $('.marine-quantity-uom').hide();

            $(document).on('change', '#@Html.IdFor(m => m.FuelDetails.FuelQuantity.QuantityTypeId)', function () {
                CloseOrderWhen();
            });

            $(document).on('change', '#@Html.IdFor(m => m.FuelDeliveryDetails.SingleDeliverySubTypes)', function () {
                ToggleEndDate();
            });

            $(document).on('change', '#@Html.IdFor(m => m.FuelDeliveryDetails.DeliveryTypeId)', function () {
                CloseOrderWhen();
                ToggleEndDate();
                if ($(this).val() == '@((int)DeliveryType.OneTimeDelivery)') {
                    $("input[name='@Html.NameFor(m => m.FuelDetails.TierPricing.TierPricingType)'][value=" + @((int)TierPricingType.VolumeBased) + "]").addClass('subSectionOpacity pntr-none');
                    $("input[name='@Html.NameFor(m => m.FuelDetails.TierPricing.TierPricingType)'][value=" + @((int)TierPricingType.DeliveryQuantityBased) + "]").trigger('click');
                }
                else {
                    $("input[name='@Html.NameFor(m => m.FuelDetails.TierPricing.TierPricingType)'][value=" + @((int)TierPricingType.VolumeBased) + "]").removeClass('subSectionOpacity pntr-none');
                }
            });

            if ($('input[name="@Html.NameFor(m=> m.FuelDeliveryDetails.DeliveryTypeId)"]:checked').val() == '@((int)DeliveryType.OneTimeDelivery)') {
                $("input[name='@Html.NameFor(m => m.FuelDetails.TierPricing.TierPricingType)'][value=" + @((int)TierPricingType.VolumeBased) + "]").addClass('subSectionOpacity pntr-none');
                $("input[name='@Html.NameFor(m => m.FuelDetails.TierPricing.TierPricingType)'][value=" + @((int)TierPricingType.DeliveryQuantityBased) + "]").trigger('click');
            }

            $(document).on('dp.change', '#@Html.IdFor(m => m.FuelDeliveryDetails.StartDate)', function () {
                                var quoteStartDate = $(this).val();
                $('#@Html.IdFor(m => m.FuelDeliveryDetails.EndDate)').data("DateTimePicker").useCurrent(false);
                $('#@Html.IdFor(m => m.FuelDeliveryDetails.EndDate)').data("DateTimePicker").minDate(moment(quoteStartDate).startOf('d'));
                            });
            $('#@Html.IdFor(m => m.FuelDeliveryDetails.EndDate)').data("DateTimePicker").minDate(moment().startOf('d'));

            $(document).on('click', '#Submit', function (e) {
                $('#Submit').attr('disabled', 'disabled');
                $('#Submit').addClass("subSectionOpacity");
                var billingCountry = parseInt($('#@Html.IdFor(m => m.BillingAddress.Country)').val());
                if (isNaN(billingCountry))
                    $('#@Html.IdFor(m => m.BillingAddress.Country)').val(0);

                var billingState = parseInt($('#@Html.IdFor(m => m.BillingAddress.State)').val());
                if (isNaN(billingCountry))
                    $('#@Html.IdFor(m => m.BillingAddress.State)').val(0);

                var billingToState = parseInt($('#@Html.IdFor(m => m.BillToInfo.State.Id)').val());
                if (isNaN(billingToState))
                    $('#@Html.IdFor(m => m.BillToInfo.State.Id)').val(0);

                $(".loader").show();
                setTimeout(function (e) {
                if ($("#@Html.NameFor(m=> m.CustomerDetails.IsNewCompany)").val() == 'False') {
                    if (!$("#newContactPersonInput").hasClass("hide-element") && $(".newContactPerson").val() == "") {
                        validationMessageFor("@Html.NameFor(m=>m.CustomerDetails.UserId)", 'Contact Person is required');
                    }
                    else {
                        validationMessageFor("@Html.NameFor(m=>m.CustomerDetails.UserId)", "");
                        $("#@Html.IdFor(m=>m.CustomerDetails.Name)").val($(".newContactPerson").val());
                        $("#@Html.IdFor(m=>m.CustomerDetails.PhoneNumber)").val($(".phoneNumber").val());
                        $("#@Html.IdFor(m=>m.CustomerDetails.Email)").val($(".email").val());
                    }
                }
                 $('#@Html.IdFor(m => m.FuelDetails.FuelQuantity.UoM)').val($('#MFNQuantityUoM').val());

                // Start Added validation for fully carrier managed location.
                ValidateLocationManagedType();

                // validate address
                var isAddressValid = validateLocationAddress();

                // End
                if ($('input[name="@Html.NameFor(m=> m.FuelDeliveryDetails.DeliveryTypeId)"]:checked').val() == '@((int)DeliveryType.OneTimeDelivery)' &&
                    $('#@Html.IdFor(m => m.FuelDeliveryDetails.SingleDeliverySubTypes) option:selected').val() == '@((int)SingleDeliverySubTypes.DeliveryDateRange)') {
                    $('#@Html.IdFor(m => m.FuelDeliveryDetails.IsOrderEndDateRequired)').val('True')
                }
                else {
                    $('#@Html.IdFor(m => m.FuelDeliveryDetails.IsOrderEndDateRequired)').val('False')
                }

                var isTierBasedPricingEnabled = $('#IsTierPricing').prop('checked');
                if (isTierBasedPricingEnabled) {
                    $('#@Html.IdFor(m => m.PricingDetails.PricePerGallon)').val(0);
                    $('#@Html.IdFor(m => m.PricingDetails.FuelPricingDetails.PricingCode.Id)').val(0);
                }

                var isFuelSurcharge = $("#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.IsFuelSurcharge)").prop('checked');
                var freightPricingMethod = $('input[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.FreightPricingMethod)"]:checked').val();
                if (isFuelSurcharge && freightPricingMethod == '@(FreightPricingMethod.Manual)' &&
                    $('#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.FuelSurchagePricingType)').val() == '') {
                    validationMessageFor("@Html.NameFor(m=>m.OrderAdditionalDetailsViewModel.FuelSurchagePricingType)", 'Please select ' + '@Resource.lblFuelSurchargePricingType');
                }


                if (freightPricingMethod == '@(FreightPricingMethod.Auto)') {
                    validationMessageFor($("#@Html.IdFor(m=> m.OrderAdditionalDetailsViewModel.FreightRateRuleId)").attr('name'), '');
                    validationMessageFor($("#@Html.IdFor(m=> m.OrderAdditionalDetailsViewModel.FuelSurchargeTableId)").attr('name'), '');
                    var IsFreightCost = $('input[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.IsFreightCost)"]:checked').val();
                    if (IsFreightCost && $('#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.FreightRateRuleId)').val() == '0') {
                        $('#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.FreightRateRuleId)').val(null);

                    };
                    var IsFuelSurchargeAuto = $('input[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.IsFuelSurchargeAuto)"]:checked').val();
                    if (IsFuelSurchargeAuto && $('#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.FuelSurchargeTableId)').val() == '0') {
                        $('#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.FuelSurchargeTableId)').val(null);
                    }
                }


                var isFormValid = $form.valid();
                var quantityRangMsg = '@Resource.valMessageQuantityNotInRange';
                var greaterThanZeroMsg = '@string.Format(Resource.valMessageGreaterThanZero, Resource.lblGallons)';
                var isWeekendAndSpecialPriceValid = true;
                var isThirdPartyHardwareUsed = $("#@Html.IdFor(m => m.IsThirdPartyHardwareUsed)").prop('checked');

                if ($('input[name="@Html.NameFor(m=> m.FuelDeliveryDetails.DeliveryTypeId)"]:checked').val() == '@((int)DeliveryType.MultipleDeliveries)' && !isThirdPartyHardwareUsed) {
                    var specialDateVal = '@((int)FeeConstraintType.SpecialDate)';
                    var specialDateErrorMsg = '@Resource.valMessageSpecialFeesDuplicate';
                    isWeekendAndSpecialPriceValid = validateWeekendAndSpecialFees(specialDateVal, specialDateErrorMsg);
                }

                if ($('input[name="@Html.NameFor(m=> m.FuelDetails.FuelQuantity.QuantityTypeId)"]:checked').val() != '@((int)QuantityType.NotSpecified)') {
                    isFormValid = isFormValid && isAddressValid && isWeekendAndSpecialPriceValid && validateDeliverySchedule()
                        && validateExternalBrokerOrderDetails() && ValidateRangeCoversTotalQuantity(quantityRangMsg)
                        && isQuantityGreaterThanZero(greaterThanZeroMsg)
                        && ValidateCityRackTerminal() && ValidateLocationManagedType() && validateCarrierEmailUser()
                }
                else {
                    isFormValid = isFormValid && isAddressValid && isWeekendAndSpecialPriceValid && validateExternalBrokerOrderDetails() && ValidateCityRackTerminal() && ValidateLocationManagedType() && validateCarrierEmailUser() && validateTerminalsAndBulkPlantsForRegions()
                }

                // validate tier based pricing
                @*var isSupressOrderLevelPricingEnabled = '@(Model.PreferencesSetting != null ? Model.PreferencesSetting.IsSupressOrderPricing: false)';*@
                    var isSupressOrderLevelPricingEnabled = $('#IsSupressOrderPricing').prop('checked');
                    if (isSupressOrderLevelPricingEnabled) {
                        $('#@Html.IdFor(m => m.FuelOfferDetails.NetDays)').val(0);
                    }
                    if (isFormValid && !isSupressOrderLevelPricingEnabled) {
                    var isTierBasedPricingEnabled = $('#IsTierPricing').prop('checked');
                    if (isTierBasedPricingEnabled) {
                        isFormValid = validateTierBasedPricingAndQty();
                    }
                    else {
                        isFormValid = validateFRPricing();
                    }
                }

                if (isFormValid == true) {
                    var selectedPricingType = parseInt($('input[name="@Html.NameFor(m => m.PricingDetails.PricingTypeId)"]:checked').val());
                    setSelectedCountryAndCurrency($('#@Html.IdFor(m => m.AddressDetails.Country.Id)').val(), $('#@Html.IdFor(m => m.AddressDetails.Country.Currency)').val());
                    if (selectedPricingType == @((int)PricingType.Suppliercost)) {
                        GetGlobalCost(e, $form);
                    }
                    else {
                        validationMessageFor($("#@Html.IdFor(m=>m.PricingDetails.PricingTypeId)").attr('name'), '');
                        if ($('#@Html.IdFor(m=>m.AddressDetails.IsRetailJob)').is(':checked') == true) {
                            $('#delivery-schedule-section').find('.partial-block-collection-section').empty();
                        }
                        $form.submit();
                        $('.loader').show();
                    }
                }
                else {
                    //e.preventDefault();
                    showInvalidTab();
                }
                $.fn.focusWithoutScrolling = function () {
                    var x = window.scrollX, y = window.scrollY;
                    this.focus();
                    window.scrollTo(x, y);
                };
                if (!isFormValid) {
                    $(".field-validation-error:visible:first").closest(".form-group").find(".form-control").focus();
                    $('#Submit').removeAttr('disabled');
                    $('#Submit').removeClass("subSectionOpacity");
                    $('.loader').hide();
                }
                fixedButtons(this, isFormValid);
                }, 2);

                //below logic is used for multiple email adreses
                @*var js = $("#tags").find("span");
                if (js && js.length > 0) {
                    let cnt = js.length;
                    let emails =""
                    for (var i = 0; i < cnt; i++) {
                        var email = js[i].innerText;
                        if (email && email != 'Email is required') {
                            emails += email + ',';
                        }
                    }
                    $('#@Html.IdFor(m => m.CustomerDetails.Emails)').val(emails);
                }*@
            });

            onJobSpecificBillToSubmitt(false);

            $("#Draft").click(function () {
                var url = "@Url.Action("Draft", "Order", new { area = "Supplier" })";
                $("form").attr("action", url);
            });

            $("#@Html.IdFor(m => m.PricingDetails.TerminalName)").click(function () {
                var source = getPricingSource();
                if (source === @((int)PricingSource.Axxis)) {
                    GetAxxisTerminals();
                }
            });

            $(".latitude,.longitude,#@Html.IdFor(m => m.FuelDetails.FuelTypeId)").change(function () {
                $("#@Html.IdFor(m => m.PricingDetails.TerminalName)").find("option:gt(0)").remove();
                var pricingTypeId = parseInt($('input[name="@Html.NameFor(m => m.PricingDetails.PricingTypeId)"]:checked').val());
                latLongFuelTypeChanged = true;
                var isFtl = $('#@Html.IdFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.TruckLoadTypes)').val() == '@((int)TruckLoadTypes.FullTruckLoad)';
                if ($(this).attr('id') == 'FuelDetails_FuelTypeId' && isFtl) {
                    ToggleFscControlsByProductTypeId($(this).val());
                }
            });

            $(".ddterminallist").on('change', function () {
                $(this).attr('size', 1).css('width', '100%');
            });

            $(document).on('click', function () {
                $(".ddterminallist").attr("size", 1).css('width', '100%');
            });

            $("#@Html.IdFor(m => m.AddressDetails.Address)").change(function () {
                updateFuelTypesDropdown();
            });

            $(document).on("updated", ".country:not([data-billingCountry])", function (e) {
                var otherAddress = $(this).closest('.other-address');
                if (otherAddress != undefined && otherAddress.length > 0) {
                    return;
                }
                updateFuelTypesDropdown();
                UpdateCurrencyAndUom($(this).val());
                UpdateOtherProductTaxesUoM();
            });

            $(".jobname").on("change", function () {
                if (isNewJobRadioChecked()) {
                    $('#@Html.IdFor(m=>m.AddressDetails.JobName)').val('');
                    jobId = 0; isExistingJob = false;
                    validationMessageFor($("#@Html.IdFor(m=>m.AddressDetails.JobName)").attr('name'), '');
                    $('#@Html.IdFor(m => m.AddressDetails.Country.Currency)').removeAttr('readonly');
                    ClearControls();
                }
                else {
                    jobId = getJobIdFromDropdown(); var jobName = getJobNameFromDropdown();
                    $('#@Html.IdFor(m=>m.AddressDetails.JobName)').val(jobName);
                    GetJobDetails(jobName);
                    isExistingJob = true;
                }
            });

            $("#@Html.IdFor(m => m.AddressDetails.JobId)").change(function () {
                var jobName = getJobNameFromDropdown();
                $('#@Html.IdFor(m=>m.AddressDetails.JobName)').val(jobName);
                $('#@Html.IdFor(m => m.AddressDetails.Country.Currency)').attr('readonly', 'readonly');
                GetJobDetails(jobName);
            });

            $("#@Html.IdFor(m => m.FuelDetails.FuelDisplayGroupId)").trigger('change');

            $(document).on('change', '.schedule-type', function () {
                var url = '@Url.Action("DeliverySchedule", "Order")';
                var data = $(this).val();
                var row = $(this).closest('.partial-block');
                $.get(url, { 'scheduleType': data, 'isThirdPartyCall': true }, function (response) {
                    var newElement = $(response);
                    newElement.find("input[type='text']:not([disabled]):not([readonly])").each(function () {
                        $(this).val('');
                    });
                    $(row).replaceWith(newElement);
                    parseForm();
                    documentReady(true);
                    enableSubmit();
                });
            });
            $('.show-in-tpo').show();
            $('.hide-from-tpo').hide();
            $(document).ajaxComplete(function (event, xhr, settings) {
                $('.show-in-tpo').show();
                $('.hide-from-tpo').hide();
                $('.ddl-schedule-qty-type').removeClass('hide-element');
                UpdateDeliveryScheduleCarriers();
                UpdateOtherProductTaxesUoM();
            });

            $('#IsBuyAndSellOrder').click(function () {
                setBuySellOrderControls();
            });

            $('#IsThirdPartyHardwareUsed').click(function () {
                setThirdPartyardwareUsedControls();
            });

            $('#@Html.IdFor(m => m.AddressDetails.Country.Currency)').on('change', function () {

                UpdateCurrencyAndUom($(this).val());
            });

            $(".currency").on('currencyUpdated', function (event, currency, uom) {

                UpdateCurrencyAndUom(currency);
            });

            $('#csvFile').bind('change', function () {
                ValidateAssetUploadFileSize(this, parseInt('@Model.MaxAllowedFileSize'), "uploadOrdersButton", "divOrderFileSizeError");
            });

            $(document).on('StateChanged', function (e, stateCode) {
                if ($(e.target).hasClass("triggerTerminalChange")) {
                    fillCityGroupTerminals($('#@Html.IdFor(m=>m.AddressDetails.State.Id)').val());
                }
                updateDefaultQuantityIndicator($('#@Html.IdFor(m=>m.AddressDetails.State.Id)').val());
                selected = allStates.find(function (x) { return x.StateCode == stateCode });
                if (selected) {
                    $(e.target).find("option").filter(function (index) { return $(this).html() == selected.StateName; }).prop("selected", true);
                }
            });

            $('#@Html.IdFor(m=>m.AddressDetails.State.Id)').change(function () {
                fillCityGroupTerminals($('#@Html.IdFor(m=>m.AddressDetails.State.Id)').val());
            });

            $('#@Html.IdFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.TruckLoadTypes)').on('change', function () {
                if ($('#@Html.IdFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.TruckLoadTypes)').val() == '@((int)TruckLoadTypes.FullTruckLoad)') {
                    $('#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.IsDriverToUpdateBOL)').prop('checked', true);
                }
                else {
                    $('#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.IsDriverToUpdateBOL)').prop('checked', false);
                }
            });
            $('#@Html.IdFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.FreightOnBoardTypes)').on('change', function () {
                if ($('.freightOnBoardTypes').val() == '@((int)FreightOnBoardTypes.Terminal)' &&
                    $('#@Html.IdFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.TruckLoadTypes)').val() == '@((int)TruckLoadTypes.FullTruckLoad)') {
                    enableVarious();
                }
                else if ($('#@Html.IdFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.TruckLoadTypes)').val() == '@((int)TruckLoadTypes.FullTruckLoad)') {
                    disableVarious();
                }
                else {
                    disableVarious();
                }

                if ($("#@Html.IdFor(m=> m.CustomerDetails.IsNewCompany)").val().toLowerCase() == 'False'.toLowerCase()) {
                    var companyName = $("#@Html.IdFor(m => m.CustomerDetails.CompanyName)").val();
                    GetJobsForCompany(companyName);
                }
            });

            $('.radio-rack-price').click(function () {
                var source = getPricingSource();
                var enablecityrack = $('.enablecityrack');
                if (source === @((int)PricingSource.OPIS)) {
                    enablecityrack.prop('checked', false);
                    enablecityrack.parent().addClass('pntr-none');
                    enablecityrack.trigger('click');
                }
                else {
                    enablecityrack.parent().removeClass('pntr-none');
                }
            });

            ToggleEndDate();

            inputBoxShowHide('new-company', 'existing-company');
            setBuySellOrderControls();
            setThirdPartyardwareUsedControls();
            setOnboardingPrefDefaultSetting();
            ShowHideSourceRegionAndTerminals();
            ShowTrailerType('@Html.IdFor(m => m.TrailerType)');

            if ($('#@Html.IdFor(m=>m.CustomerDetails.IsNewCompany)').prop('checked')) {
                $(".existingjobSection").hide();
            }

            $(".selectCarrier").select2({
                placeholder: '@string.Format(Resource.valMessageSelect, Resource.lblCarrier)',
                allowClear: true
            }).on('select2:opening', function (e) {
                $(this).data('select2').$dropdown.find(':input.select2-search__field').attr('placeholder', '@Resource.lblCarrier')
            });

            $('input[name="@Html.NameFor(m=> m.CustomerDetails.Name)"]').val('@Model.CustomerDetails.Name');
            $('#@Html.IdFor(m => m.LocationInventoryManagedBy)').multiselect({
            });
            applyCssToMultiSelect();
            if ($('#radio-newcustomer').is(':checked'))
                $(".existingjobSection").hide();

            $('[name="@Html.NameFor(m=>m.AddressDetails.InventoryDataCaptureType)"]').on("change", function () {
                 var isCallInLocation = $('#@Html.IdFor(m => m.AddressDetails.InventoryDataCaptureType):checked').val() == "CallIn";
                 if (isCallInLocation) {
                     $('.tpoJobForcastingData').hide();
                 }
                 else {
                     $('.tpoJobForcastingData').show();
                 }
            });

            $('#@Html.IdFor(m => m.AddressDetails.IsRetailJob)').trigger('change');

            $('#tpoJobForcasting').show();

            $(document).on('change', $("#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.BOLInvoicePreferenceTypes)"), function () {
                var prefId = parseInt($('input[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.BOLInvoicePreferenceTypes)"]:checked').val());
                if (prefId != @((int)InvoiceNotificationPreferenceTypes.SendPDIDeliveryDetails)) {
                    $("#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.IsIncludePricing)").addClass('pntr-none subSectionOpacity');
                    $('input[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.IsIncludePricing)"]').prop('checked', false);
                    hidePDITaxControls();

                }
                else {
                    $("#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.IsIncludePricing)").removeClass('pntr-none subSectionOpacity');
                    if (getProductDisplayGroupId() != 3) {
                        showPDITaxControls();
                    }
                }
            });

            $(document).on('change', '.country', function () {
                var countryId = parseInt($(this).val());
                var container = $(this).closest('.address-container');
                if (container != undefined && container.length > 0) {
                    if (!isNaN(countryId) && countryId == '@((int)Country.CAR)') {
                        container.find('.mandatory-symbol').addClass('hide-element');
                    }
                    else {
                        container.find('.mandatory-symbol').removeClass('hide-element');
                    }
                }
            });

            $(document).on('blur', '.address-type', function () {
                var eleVal = $.trim($(this).val());
                if (eleVal != undefined && eleVal != null && eleVal != '') {
                    var span = $(this).closest('div').find('span.field-validation-error');
                    if (!span.hasClass('hide-element'))
                        span.addClass('hide-element');
                }
            });
            $('.country').trigger('change');
            var isGeocodeUsed = $('[name="@Html.NameFor(m => m.AddressDetails.IsGeocodeUsed)"]').prop('checked');
            if (isGeocodeUsed) {
                $('[name="@Html.NameFor(m => m.AddressDetails.IsGeocodeUsed)"]').trigger('click');
            }

            $(document).on('change', $("#@Html.IdFor(m => m.CustomerDetails.CompanyName)"), function () {
                checkCompanyExists();
            });

            var isSupressOrderLevelPricingEnabled = $('#IsSupressOrderPricing').prop('checked');
            if (isSupressOrderLevelPricingEnabled) {
                $('#@Html.IdFor(m => m.FuelOfferDetails.NetDays)').val(0);
            }
            $('.taxForOtherFuel').removeAttr("style").addClass("hide-element");
        });

        function checkCompanyExists() {
            var isNewCmp = $('#radio-newcustomer').prop('checked');
            var cmpName = $('#@Html.IdFor(m => m.CustomerDetails.CompanyName)').val();
            if (isNewCmp && cmpName != null && cmpName != '') {
                validateCompanyName(isNewCmp, cmpName);
            }
        }

        function setOnboardingPrefDefaultSetting() {
            var isSupressOrderLevelPricingEnabled = $('#IsSupressOrderPricing').prop('checked');
            if (isSupressOrderLevelPricingEnabled) {
                var defaultPricingTypeId = parseInt('@((int)PricingType.PricePerGallon)');
                $('input:radio[name="@Html.NameFor(m => m.PricingDetails.PricingTypeId)"][value=' + defaultPricingTypeId + ']').prop('checked', true).trigger('click');
                $("#@Html.IdFor(m => m.PricingDetails.PricePerGallon)").val(0);
                $('input:radio[name="@Html.NameFor(m => m.FuelOfferDetails.PaymentTermId)"][value=' + @((int)PaymentTerms.NetDays) + ']').prop('checked', true).trigger('click');
                $('#divPricingSection, #div-fuel-surcharge-section, .chkhideon-suppresspricing, .notification-suppresspricing, .thirdparty-fees, .fuel-request-fees, #div-payment-terms, .taxForOtherFuel, .section-tier').addClass('hide-element');
                $('input:radio[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.BOLInvoicePreferenceTypes)"][value=' + @((int)InvoiceNotificationPreferenceTypes.None) + ']').prop('checked', true);
                $('.taxForOtherFuel').removeAttr("style").addClass("hide-element");
            } else {
                $(".chkhideon-suppresspricing, .notification-suppresspricing").removeClass('hide-element');
                if (getProductDisplayGroupId() == 3 || getProductDisplayGroupId() == 7) {
                    $('.taxForOtherFuel').removeAttr("style").removeClass("hide-element");
                }
            }
        }

        function showHideonSuppresspricingCheckbox(ele) {
            if ($(ele).prop("checked") === true) {
                $('#divPricingSection, #div-fuel-surcharge-section, .thirdparty-fees,.chkhideon-suppresspricing, .notification-suppresspricing, .fuel-request-fees, #div-payment-terms, .taxForOtherFuel ,.section-tier, .section-supplierAllowance').addClass('hide-element');
                setOnboardingPrefDefaultSetting();
                $('#@Html.IdFor(m => m.FuelOfferDetails.NetDays)').val(0);
                $('.taxForOtherFuel').removeAttr("style").addClass("hide-element");
            } else {
                $('#divPricingSection, #div-fuel-surcharge-section, #div-invoice-notification-instructions,.chkhideon-suppresspricing, .notification-suppresspricing, .thirdparty-fees, .fuel-request-fees, #div-payment-terms, .section-tier, .section-supplierAllowance').removeClass('hide-element');
                $('#@Html.IdFor(m => m.FuelOfferDetails.NetDays)').val('');
                if (getProductDisplayGroupId() == 3 || getProductDisplayGroupId() == 7) {
                    $('.taxForOtherFuel').removeAttr("style").removeClass("hide-element");
                }
            }
        }

        function validateScheduleQuantityType(ele) {
            var selectedType = $(ele).val();
            var container = $(ele).closest('.schedule-type-container').find('.schedule-qty-container');
            if (selectedType == '@((int)ScheduleQuantityType.Quantity)') {
                container.find('.quantity').val('');
                container.removeClass('hide-element');
            }
            else {
                container.find('.quantity').val(0.01);
                container.addClass('hide-element');
            }

            return false;
        }

        function setBuySellOrderControls() {
            var isBuySellEnabled = '@Model.IsBuyAndSellOrder';
            if (isBuySellEnabled == 'True') {
                var isChecked = $("#@Html.IdFor(m => m.IsBuyAndSellOrder)").prop('checked');
                if (isChecked) {
                    $('.brokeredorder-details').slideDown();
                    $('.multiple-delivery-schedule').prop('checked', true).trigger('click');
                    $('.single-delivery-schedule').attr("disabled", "disabled");
                    $('.invoice-preference').removeAttr("disabled");
                    $(".tpo-broker-markup").removeClass("hide-element");
                    $(".wrapper-suppliercost").addClass("hide-element");
                    $(".hdr-pricing").html("@Resource.headingBuySellPricing");
                    if ('@Model.ExternalBrokeredOrder.TPOBrokeredCustomerDetails.IsNewCompany' == 'True') {
                        AddNewSupplier();
                    }
                }
                else {
                    $('.brokeredorder-details').slideUp();
                    $('.single-delivery-schedule').prop('checked', true).trigger('click');
                    $('.single-delivery-schedule').removeAttr("disabled");
                    $('.invoice-preference').attr("disabled", "disabled");
                    $('.invoice-preference').prop('checked', false);
                    $(".tpo-broker-markup").addClass("hide-element");
                    $(".wrapper-suppliercost").removeClass("hide-element");
                    $(".hdr-pricing").text("@Resource.lblPricing");

                    clearHardwareUsedDetails();
                }

                if (isChecked && $(".otherfueltype").prop("checked") === true) {
                    $(".fixed-pricing").trigger("click");
                }
            }
        }

        function setThirdPartyardwareUsedControls() {
            var isThirdPartyHardwareUsed = '@Model.IsThirdPartyHardwareUsed';
            if (isThirdPartyHardwareUsed == 'True') {
                var isChecked = $("#@Html.IdFor(m => m.IsThirdPartyHardwareUsed)").prop('checked');
                if (isChecked) {
                    $('.multiple-delivery-schedule').prop('checked', true).trigger('click');
                    $('.single-delivery-schedule').attr("disabled", "disabled");
                    showHardwareDetails();
                }
                else {
                    //$('.single-delivery-schedule').prop('checked', true).trigger('click');
                    $('.single-delivery-schedule').removeAttr("disabled");
                    $('#@Html.IdFor(m => m.ExternalBrokeredOrder.BrokeredOrderFee.FreightFeeSubTypeId)').filter("[value='" + @((int)FeeSubType.NoFee) +"']").prop('checked', true);
                }
            }
        }

        function ValidateCityRackTerminal() {
            var isValid = true;
            if ($('input.enablecityrack[type="checkbox"]').prop("checked") == true) {
                var citygroupId = $("#@Html.IdFor(m => m.PricingDetails.CityGroupTerminalId)").val();
                if (citygroupId == 0 || citygroupId == undefined || citygroupId == 'undefined') {
                    isValid = false;
                    validationMessageFor('@Html.NameFor(m => m.PricingDetails.CityGroupTerminalId)', '@Resource.valMessageTerminalIsRequired');
                }
            }
            return isValid;
        }

        function ToggleEndDate() {
            var selectedDeliveryType = $('#@Html.IdFor(m => m.FuelDeliveryDetails.DeliveryTypeId):checked').val();
            var selectedDeliverySubType = $('#@Html.IdFor(m => m.FuelDeliveryDetails.SingleDeliverySubTypes) option:selected').val();
            if (selectedDeliveryType == '@((int)DeliveryType.OneTimeDelivery)' && selectedDeliverySubType == '@((int)SingleDeliverySubTypes.DeliveryDateRange)') {
                $('#@Html.IdFor(m => m.FuelDeliveryDetails.EndDate)').removeAttr('disabled');
                $('#@Html.IdFor(m => m.FuelDeliveryDetails.EndDate)').removeAttr('readonly');
                $('.end-date').removeClass('subSectionOpacity');
            }
            else {
                $('#@Html.IdFor(m => m.FuelDeliveryDetails.EndDate)').val('');
                $('#@Html.IdFor(m => m.FuelDeliveryDetails.EndDate)').attr('disabled', 'disabled');
                $('.end-date').removeClass('subSectionOpacity');
                $('#@Html.IdFor(m => m.FuelDeliveryDetails.EndDate)').attr('readonly', 'readonly');
            }
		}

        function CloseOrderWhen() {
            $('.order-close-threshold').hide();
            if ($('input[name="@Html.NameFor(m=> m.FuelDetails.FuelQuantity.QuantityTypeId)"]:checked').val() != '@((int)QuantityType.NotSpecified)'
                && $('input[name="@Html.NameFor(m=> m.FuelDeliveryDetails.DeliveryTypeId)"]:checked').val() == '@((int)DeliveryType.MultipleDeliveries)') {
                $('.order-close-threshold').show();
            }
        }

        function UpdateCurrencyAndUom(currencyId) {
            var currency = @((int)Currency.CAD);
            if (currencyId == currency) {
                setCanadaCurrencyAndUom();
            }
            else {
                setUsaCurrencyAndUom();
            }
        }

        function showHardwareDetails() {
            $('.fuel-request-fees').hide();
            $(".thirdparty-fees").removeClass("hide-element");
            $(".hardware-details").slideDown();
            $(".hardware-details").removeClass("hide-element");
        }

        function GetAxxisTerminals() {
            var fuelId = $("#@Html.IdFor(m => m.FuelDetails.FuelTypeId)").val();
            fuelId = (fuelId == undefined || fuelId == null || fuelId == '' ? 0 : fuelId);

            var inputData = {
                fuelTypeId: fuelId,
                latitude: $("#@Html.IdFor(m => m.AddressDetails.Latitude)").val(),
                longitude: $("#@Html.IdFor(m => m.AddressDetails.Longitude)").val(),
				countryId: $("#@Html.IdFor(m => m.AddressDetails.Country.Id)").val(),
                pricingCodeId: $("#@Html.IdFor(m=>m.PricingDetails.FuelPricingDetails.PricingCode.Id)").val(),
                terminal: '',
                pricingSourceId: $("#@Html.IdFor(m=>m.PricingDetails.FuelPricingDetails.PricingSourceId)").val()
            };

            var terminalUrl = "@Url.Action("GetClosedTerminal", "Order", new { area = "Supplier" })";
            autoCompleteTerminal("#@Html.IdFor(m => m.PricingDetails.TerminalName)", terminalUrl, inputData);
        }

        function GetOpisTerminals() {
            var inputData;
            var source = getPricingSource();
            if ($('#AddressDetails_IsVarious').is(':checked')) {
                inputData = {
                    cityRackId: $('.cityrackterminallist').val(),
                    terminal: '',
                    source: source
                };
            }
            else {
                inputData = {
                    latitude: $("#@Html.IdFor(m => m.AddressDetails.Latitude)").val(),
                    longitude: $("#@Html.IdFor(m => m.AddressDetails.Longitude)").val(),
                    countryId: $("#@Html.IdFor(m => m.AddressDetails.Country.Id)").val(),
                    terminal: '',
                    source: source
                };
            }

           var terminalUrl = "@Url.Action("GetOpisTerminals", "Order", new { area = "Supplier" })";
           autoCompleteTerminal("#@Html.IdFor(m => m.PricingDetails.TerminalName)", terminalUrl, inputData);
        }

        function autoCompleteTerminal(element, url, inputData) {

            var target = $(element);
            var prevTerminal = $(element).val();
            var terminalId = 0;
            var isSelected = false;

            target
                .autocomplete({
                source: function (request, response) {
                    inputData.terminal = request.term;
                    inputData.cityRackId = $('.cityrackterminallist').val();
                    $.ajax({
                        url: url,
                        type: "GET",
                        dataType: "json",
                        data: inputData,
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.Name,
                                    value: item.Id
                                };
                            }))
                        },
                        complete: function (event, xhr, settings) {
                            $(".ddterminal-loader").hide();
                        }
                    })
                },
                select: function (event, ui) {
                    isSelected = true;
                    $(target).val(ui.item.label); // display the selected text
                    terminalId = ui.item ? ui.item.value : 0;
                    prevTerminal = ui.item ? ui.item.label : prevTerminal;
                    if (terminalId != 0)
                        $("#@Html.IdFor(m => m.PricingDetails.TerminalId)").val(terminalId);
                    return false;
                },
                messages: {
                    noResults: '',
                    results: function () { }
                },
                minLength: 2,
                maxShowItems: 10,
                scroll: true
            });
            $.ui.autocomplete.prototype._resizeMenu = function () {
                var ul = this.menu.element;
                ul.outerWidth(this.element.outerWidth());
            }

            target.autocomplete("search", "  ");
        }

        function populateTerminals(response, target) {
            target.empty(), $.each(response, function (i, element) {
                target.append($('<option></option>').val(element.Id).html(element.Name));
            });
        }

        function IsPhoneNumberValid(phoneNumber, element) {
            var new_phoneNumber = phoneNumber.replace(/-|\s/g, "");
            if (new_phoneNumber != "" && new_phoneNumber.length == 10) {
                var isPhoneNumberValid = '@Url.Action("IsPhoneNumberValid", "Validation", new { area = "" })' + '?phoneNumber=' + phoneNumber;
                $.get(isPhoneNumberValid, function (result) {
                    if (!result) {
                        validationMessageFor($(element).attr('name'), '');
                        $(element).parent().find('.mobile-validation-msg').html('@Resource.valMessagePhoneNotValid');
                        $('#@Html.IdFor(m=>m.CustomerDetails.IsPhoneNumberConfirmed)').val(false);
                    } else {
                        $(element).parent().find('.mobile-validation-msg').html('');
                        $('#@Html.IdFor(m=>m.CustomerDetails.IsPhoneNumberConfirmed)').val(true);
                    }
                });
            }
            else {
                $(element).parent().find('.mobile-validation-msg').html('');
            }
        }

        function UpdateFeeSectionWithLitres() {
            $('.fee-types').find('.input-group-addon').each(function () {
                $(this).text('@(Currency.CAD.ToString())');
            });
            $('.fee-types').find('option').each(function () {
                $(this).text($(this).text().replace('@(UoM.Gallons.ToString())', '@(UoM.Litres.ToString())'));
            });
            $('.fee-types').find('.chk-include-ppg').each(function () {
                $(this).text('@Resource.lblIncludeInPPL');
            });
        }

        function UpdateFeeSectionWithGallons() {
            $('.fee-types').find('.input-group-addon').each(function () {
                $(this).text('@(Currency.USD.ToString())');
            });
            $('.fee-types').find('option').each(function () {
                $(this).text($(this).text().replace('@(UoM.Litres.ToString())', '@(UoM.Gallons.ToString())'));
            });
            $('.fee-types').find('.chk-include-ppg').each(function () {
                $(this).text('@Resource.lblIncludeInPPG');
            });
        }

        function setCanadaCurrencyAndUom() {

            $("#@Html.IdFor(m => m.FuelDeliveryDetails.FuelFees.Currency)").val('@((int)Currency.CAD)');
            $("#@Html.IdFor(m => m.FuelDeliveryDetails.FuelFees.UoM)").val('@((int)UoM.Litres)');
            $("#@Html.IdFor(m => m.ExternalBrokeredOrder.BrokeredOrderFee.Currency)").val('@((int)Currency.CAD)');
            $("#@Html.IdFor(m => m.ExternalBrokeredOrder.BrokeredOrderFee.UoM)").val('@((int)UoM.Litres)');
            $("#@Html.IdFor(m => m.FuelDeliveryDetails.FuelFees.FuelSurchargeFreightFee.Currency)").val('@((int)Currency.CAD)');
            $("#@Html.IdFor(m => m.FuelDeliveryDetails.FuelFees.FuelSurchargeFreightFee.UoM)").val('@((int)UoM.Litres)');

            $('.uom').text('@(UoM.Litres.ToString())');
            $('.currency-symbol').text('@(Currency.CAD.ToString())');
            updateDefaultUrls('@((int)Currency.CAD)', '@((int)UoM.Litres)');
            UpdateFeeSectionWithLitres();
            $('.allowance').text('@(Currency.CAD.ToString())/@Resource.lblPerLitre');
            if ($("#@Html.IdFor(m=> m.FuelDetails.IsMarineLocation)").val() == 'True') {
                $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").children('option[value="@((int)UoM.Litres)"]').show();
                $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").children('option[value="@((int)UoM.Gallons)"]').hide();
                // $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").val("@((int)UoM.Litres)");
                //UOM in quantity section
                $('#MFNQuantityUoM').children('option[value="@((int)UoM.Litres)"]').show();
                $('#MFNQuantityUoM').children('option[value="@((int)UoM.Gallons)"]').hide();
                $('#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.UoM)').val("@((int)UoM.Litres)");
                $('#MFNQuantityUoM').val("@((int)UoM.Litres)");
            }
        }

        function setUsaCurrencyAndUom() {
            $("#@Html.IdFor(m => m.FuelDeliveryDetails.FuelFees.Currency)").val('@((int)Currency.USD)');
            $("#@Html.IdFor(m => m.FuelDeliveryDetails.FuelFees.UoM)").val('@((int)UoM.Gallons)');
            $("#@Html.IdFor(m => m.ExternalBrokeredOrder.BrokeredOrderFee.Currency)").val('@((int)Currency.USD)');
            $("#@Html.IdFor(m => m.ExternalBrokeredOrder.BrokeredOrderFee.UoM)").val('@((int)UoM.Gallons)');
            $("#@Html.IdFor(m => m.FuelDeliveryDetails.FuelFees.FuelSurchargeFreightFee.Currency)").val('@((int)Currency.USD)');
            $("#@Html.IdFor(m => m.FuelDeliveryDetails.FuelFees.FuelSurchargeFreightFee.UoM)").val('@((int)UoM.Gallons)');
            $('.uom').text('@(UoM.Gallons.ToString())');
            $('.currency-symbol').text('@(Currency.USD.ToString())');
            updateDefaultUrls('@((int)Currency.USD)', '@((int)UoM.Gallons)');
            UpdateFeeSectionWithGallons();
            $('.allowance').text('@(Currency.USD.ToString())/@Resource.lblPerGallon');
            //marine
            if ($("#@Html.IdFor(m=> m.FuelDetails.IsMarineLocation)").val() == 'True') {
                $('#@Html.IdFor(M=>M.AddressDetails.MarineUoM)').children('option[value="@((int)UoM.Litres)"]').hide();
                $('#@Html.IdFor(M => M.AddressDetails.MarineUoM)').children('option[value="@((int)UoM.Gallons)"]').show();
                // $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").val("@((int)UoM.Gallons)");

                //UOM in quantity section
                $('#MFNQuantityUoM').children('option[value="@((int)UoM.Litres)"]').hide();
                $('#MFNQuantityUoM').children('option[value="@((int)UoM.Gallons)"]').show();
                $('#@Html.IdFor(m => m.FuelDetails.FuelQuantity.UoM)').val("@((int)UoM.Gallons)");
                $('#MFNQuantityUoM').val("@((int)UoM.Gallons)");
            }
        }

      function UpdateOtherProductTaxesUoM() {
            if ($('.country').val() == '@((int)Country.CAN)') {
                $('.ddl-other-product-tax').find('option').each(function () {
                    $(this).text($(this).text().replace('@Resource.lblPerGallon', '@Resource.lblPerLitre'));
                });
                $('.taxesRow').find('.input-group-addon').each(function () {
                    $(this).text($(this).text().replace('@(Currency.USD.ToString())', '@(Currency.CAD.ToString())'));
                });
            }
            else {
                $('.ddl-other-product-tax').find('option').each(function () {
                    $(this).text($(this).text().replace('@Resource.lblPerLitre', '@Resource.lblPerGallon'));
                });
                $('.taxesRow').find('.input-group-addon').each(function () {
                    $(this).text($(this).text().replace('@(Currency.CAD.ToString())', '@(Currency.USD.ToString())'));
                });
            }
        }

        function clearHardwareUsedDetails() {
            $('#@Html.IdFor(m => m.ExternalBrokeredOrder.CustomerNumber)').val('');
            $('#@Html.IdFor(m => m.ExternalBrokeredOrder.VendorId)').val('');
            $('#@Html.IdFor(m => m.ExternalBrokeredOrder.ShipTo)').val('');
            $('#@Html.IdFor(m => m.ExternalBrokeredOrder.Source)').val('');
            $('#@Html.IdFor(m => m.ExternalBrokeredOrder.ProductCode)').val('');
            $('#@Html.IdFor(m => m.ExternalBrokeredOrder.InvoicePreferenceId)').prop('selectedIndex', 0);
            $('#@Html.IdFor(m => m.ExternalBrokeredOrder.BrokeredOrderFee.FreightFeeSubTypeId)').prop('checked', true).trigger('click');
            $('#brokered-fee-section').find('.partial-block-collection-section').empty();
        }

        function validateCarrierEmailUser() {
            var isValid = true;

            validationMessageFor($("#@Html.IdFor(m => m.CarrierUserEmails)").attr('name'), '');
            var carrierUserEmails = $("#@Html.IdFor(m => m.CarrierUserEmails)").val();

            var selectedLocationManagedType = $('input[name="@Html.NameFor(m => m.AddressDetails.LocationManagedType)"]:checked').val();
            var IsCarrierManaged = (selectedLocationManagedType == '@(LocationManagedType.FullyCarrierManaged)');

            if (isNewJobRadioChecked() && IsCarrierManaged && carrierUserEmails.length == 0) {
                validationMessageFor($("#@Html.IdFor(m => m.CarrierUserEmails)").attr('name'), '@ResourceMessages.GetMessage(Resource.valMessageRequired,new object[] { Resource.lblEmail })');
                isValid = false;
            }

            return isValid;
        }

    function validateTerminalsAndBulkPlantsForRegions() {
        var isValid = true;

        var freightPricingMethod = $('input[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.FreightPricingMethod)"]:checked').val();
        if (freightPricingMethod == '@(FreightPricingMethod.Auto)')
        {
            var sourceRegionIds = $('#@Html.IdFor(m => m.SourceRegion.SelectedSourceRegions) option:selected')
                .toArray().map(item => parseInt(item.value));
            if (sourceRegionIds.length == 0 && sourceRegionIds.length == 0) {
                validationMessageFor($("#@Html.IdFor(m => m.SourceRegion.SelectedSourceRegions)").attr('name'), '@Resource.errorMessageSelectSourceRegion');
                isValid = false;
            }

            var terminals = $('#@Html.IdFor(m => m.SourceRegion.SelectedTerminals) option:selected')
                .toArray().map(item => parseInt(item.value));

            var bulkplants = $('#@Html.IdFor(m => m.SourceRegion.SelectedBulkPlants) option:selected')
                .toArray().map(item => parseInt(item.value));

            if (terminals.length == 0 && bulkplants.length == 0) {
                validationMessageFor($("#@Html.IdFor(m => m.SourceRegion.SelectedTerminals)").attr('name'), '@Resource.errorMessageSelectTerminalOrBulkplant');
                isValid = false;
            }
        }

        return isValid;
    }


        function validateExternalBrokerOrderDetails() {
            var isValid = true;
            var isBuyAndSellOrder = $("#@Html.IdFor(m => m.IsBuyAndSellOrder)").prop('checked');
            if (isBuyAndSellOrder) {
                var isNewCompany = $("#@Html.IdFor(m => m.ExternalBrokeredOrder.TPOBrokeredCustomerDetails.IsNewCompany)").val();
                var customerId = $.trim($('#@Html.IdFor(m => m.ExternalBrokeredOrder.CustomerId)').val());

                if (isNewCompany == "False" && (customerId == "" || customerId == null)){
                    validationMessageFor($("#@Html.IdFor(m => m.ExternalBrokeredOrder.CustomerId)").attr('name'), '@ResourceMessages.GetMessage(Resource.valMessageRequired,new object[] { Resource.lblCompanyName })');
                    isValid = false;
                }
            }
            var isThirdPartyHardwareUsed = $("#@Html.IdFor(m => m.IsThirdPartyHardwareUsed)").prop('checked');
            if (isThirdPartyHardwareUsed) {
                var customerNumber = $.trim($('#@Html.IdFor(m => m.ExternalBrokeredOrder.CustomerNumber)').val());
                var vendorId = $.trim($('#@Html.IdFor(m => m.ExternalBrokeredOrder.VendorId)').val());
                var shipTo = $.trim($('#@Html.IdFor(m => m.ExternalBrokeredOrder.ShipTo)').val());
                var source = $.trim($('#@Html.IdFor(m => m.ExternalBrokeredOrder.Source)').val());
                var productCode = $.trim($('#@Html.IdFor(m => m.ExternalBrokeredOrder.ProductCode)').val());
                var thirdPartyNozzleId = $.trim($('#@Html.IdFor(m => m.ExternalBrokeredOrder.ThirdPartyNozzleId)').val());

                if (customerNumber == null || customerNumber == '') {
                    validationMessageFor($("#@Html.IdFor(m => m.ExternalBrokeredOrder.CustomerNumber)").attr('name'), '@ResourceMessages.GetMessage(Resource.valMessageCustomerNumberRequired)');
                    isValid = false;
                }
                if (vendorId == null || vendorId == '') {
                    validationMessageFor($("#@Html.IdFor(m => m.ExternalBrokeredOrder.VendorId)").attr('name'), '@ResourceMessages.GetMessage(Resource.valMessageVendorIdRequired)');
                    isValid = false;
                }
                if (shipTo == null || shipTo == '') {
                    validationMessageFor($("#@Html.IdFor(m => m.ExternalBrokeredOrder.ShipTo)").attr('name'), '@ResourceMessages.GetMessage(Resource.valMessageShipToRequired)');
                    isValid = false;
                }
                if (source == null || source == '') {
                    validationMessageFor($("#@Html.IdFor(m => m.ExternalBrokeredOrder.Source)").attr('name'), '@ResourceMessages.GetMessage(Resource.valMessageSourceRequired)');
                    isValid = false;
                }
                if (productCode == null || productCode == '') {
                    validationMessageFor($("#@Html.IdFor(m => m.ExternalBrokeredOrder.ProductCode)").attr('name'), '@ResourceMessages.GetMessage(Resource.valMessageProductCodeRequired)');
                    isValid = false;
                }
                if (thirdPartyNozzleId == null || thirdPartyNozzleId == '') {
                    validationMessageFor($("#@Html.IdFor(m => m.ExternalBrokeredOrder.ThirdPartyNozzleId)").attr('name'), '@ResourceMessages.GetMessage(Resource.valMessageThirdPartyNozzleTypeRequired)');
                    isValid = false;
                }
                return isValid;
            }
            return isValid;
        }

    function GetJobsForCompany(companyName) {
            var companyName = companyName, target = $("#@Html.IdFor(m => m.AddressDetails.JobId)");
            var isExistingJob = !isNewJobRadioChecked();
			var isFtl = $('#@Html.IdFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.TruckLoadTypes)').val() == '@((int)TruckLoadTypes.FullTruckLoad)';
            var freightOnboardAsTerminal = $('#FuelDetails_FuelPricing_FuelPricingDetails_FreightOnBoardTypes').val() == '@((int)FreightOnBoardTypes.Terminal)'
            if (isExistingJob) {
                ClearControls();
            }
            $.get("@Url.Action("GetJobList","Order",new { area="Supplier" })",
				{ companyName: companyName, isFtl: isFtl, isFoAsTerminal: freightOnboardAsTerminal, supplierUserId: @CurrentUser.Id, supplierCompanyId: @CurrentUser.CompanyId },
                function (response) {
                    target.empty(), $.each(response, function (i, element) {
                        target.append($('<option></option>').val(element.Id).html(element.Name));
                    });

                    $(target).prepend("<option value selected='selected'>@string.Format(@Resource.valMessageSelect, @Resource.lblJob)</option>");
                    var modelCompanyName = '@(string.IsNullOrEmpty(Model.CustomerDetails.CompanyName) ? Html.Raw(HttpUtility.JavaScriptStringEncode("")) : Html.Raw(HttpUtility.JavaScriptStringEncode(Model.CustomerDetails.CompanyName.Trim())))';
                    if (isExistingJob && (modelCompanyName == companyName)) {
                        SetJobValues();
                    }
            });
        }

    function GetJobDetails(name) {
            if (name == 'Select Location') {
                ClearControls(); $(".address-controls").addClass("subSectionOpacity");
                return;
            }
            $(".address-controls").addClass("subSectionOpacity")
            $(".company-owned").addClass("pntr-none");
            $(".tpo-addressloader").show();
            $("#external-ponumber").show();
            var companyName = $("#@Html.IdFor(m => m.CustomerDetails.CompanyName)").val();
            $.get("@Url.Action("GetJobDetails", "Order", new { area = "Supplier" })", { jobName: name, companyName: companyName },
                function (response) {
                    if (response.Job.Id > 0) {
                        ClearValidationMessageForAddressControls();
                        $('#@Html.IdFor(m=>m.AddressDetails.DisplayJobID)').val(response.Job.JobID);
                        $('#@Html.IdFor(m=>m.AddressDetails.WBSNumber)').val(response.Job.WBSNumber);
                        $('input:checkbox[name="@Html.NameFor(m => m.AddressDetails.IsCompanyOwned)"]').prop('checked', response.Job.IsCompanyOwned);
						if (response.Job.LocationType == '@((int)JobLocationTypes.Various)')
                        {
                            $('input:checkbox[name="@Html.NameFor(m => m.AddressDetails.IsVarious)"]').trigger('click');
                            $('input:checkbox[name="@Html.NameFor(m => m.AddressDetails.IsVarious)"]').prop('checked', true);
                            $('input:checkbox[name="@Html.NameFor(m => m.AddressDetails.IsVarious)"]').val('true');
                              showHideControls(this, 'wrapper-various', 'wrapper-location');
                        }
                        else {
                            $('#@Html.IdFor(m => m.AddressDetails.Address)').val(response.Job.Address);
                            $('#@Html.IdFor(m => m.AddressDetails.City)').val(response.Job.City);
                            $('#@Html.IdFor(m => m.AddressDetails.CountyName)').val(response.Job.CountyName);
                            $('#@Html.IdFor(m => m.AddressDetails.ZipCode)').val(response.Job.ZipCode);
                        }
						$('#@Html.IdFor(m => m.AddressDetails.Country.Id)').val(response.Job.Country.Id).trigger('change');
						$('#@Html.IdFor(m => m.AddressDetails.State.Id)').each(function (i) { $(this).val(response.Job.State.Id).change(); });
                        $('#@Html.IdFor(m => m.AddressDetails.Latitude)').val(response.Job.Latitude);
                        $('#@Html.IdFor(m => m.AddressDetails.Longitude)').val(response.Job.Longitude);
                        $('#@Html.IdFor(m => m.AddressDetails.TimeZoneName)').val(response.Job.TimeZoneName);
                        $('#@Html.IdFor(m => m.AddressDetails.Country.Currency)').val(response.Job.Country.Currency);
                        if (!response.Job.IsMarine)
                        {
                                $('#@Html.IdFor(m => m.AddressDetails.Country.UoM)').val(response.Job.Country.UoM);
                        }

                        $('#@Html.IdFor(m => m.AddressDetails.IsProFormaPoEnabled)').prop('checked', response.Job.IsProFormaPoEnabled);
                          if (response.Job.IsMarine)
                        {
                            $('#@Html.IdFor(m => m.AddressDetails.MarineUoM)').val(response.Job.MarineUom);
                        }
                        $('#@Html.IdFor(m => m.AddressDetails.IsRetailJob)').prop('checked', response.Job.IsRetailJob);
                        $('#@Html.IdFor(m => m.AccountingCompanyId)').val(response.Job.AccountingCompanyId);
                        $('#@Html.IdFor(m => m.AddressDetails.DistanceCovered)').val(response.Job.DistanceCovered);

                        $('#@Html.IdFor(m => m.TrailerType)').val(null).trigger("change");
                        if (response.Job.TrailerType != null) {
                            for (i = 0; i < response.Job.TrailerType.length; i++) {
                                $('#@Html.IdFor(m => m.TrailerType) > option:nth-child(' + response.Job.TrailerType[i] + ')').prop('selected', true)
                            }
                        }
                         $('#@Html.IdFor(m => m.TrailerType)').trigger("change");

                        if (response.Job.IsRetailJob && isExistingJob) {
                            $("#delivery-schedule-section").hide();
                        } else {
                            $("#delivery-schedule-section").show();
                        }

                        $('#@Html.IdFor(m => m.AccountingCompanyId)').val(response.Job.AccountingCompanyId);

                        var locationManagedType = GetLocationManagedType(response.Job.LocationManagedType);
                        $('input:radio[id="@Html.IdFor(m => m.AddressDetails.LocationManagedType)"][value=' + locationManagedType + ']').prop('checked', true);
                        $('#location-managed').addClass("pntr-none subSectionOpacity");

                        if (response.RegionId != null) {
                            $('#@Html.IdFor(m=>m.RegionId)').val(response.RegionId);
                            $('#@Html.IdFor(m=>m.RegionId)').attr('readonly', true);
                        } else {
                            $('#@Html.IdFor(m=>m.RegionId)').removeAttr('readonly');
                        }
                        if (response.RouteId != null) {
                            getRouteInfoDetails($('#@Html.IdFor(m=>m.RegionId)'), response.RouteId);
                            $('#@Html.IdFor(m=>m.RouteId)').attr('readonly', true);
                        } else {
                            $('#@Html.IdFor(m=>m.RouteId)').removeAttr('readonly');
                        }
                        if (response.Job.AssignedCarrierCompId != null && response.Job.AssignedCarrierCompId > 0) {
                            //GetAssignedCarrier(response.Job.AssignedCarrierCompId);
                            //GetCarrierUserEmails(response.Job.AssignedCarrierCompId);
                            $('#@Html.IdFor(m=>m.AssignedCarrierCompId)').val(response.Job.AssignedCarrierCompId);
                            $('#@Html.IdFor(m=>m.AssignedCarrierCompId)').trigger("change");
                            $('.divCarrierAssign').addClass("pntr-none subSectionOpacity");

                            showHideControls(this, 'carrier-section', 'noelement');
                        } else {
                            $('.divCarrierAssign').removeClass("pntr-none subSectionOpacity");
                            showHideControls(this, 'noelement', 'carrier-section');
                            if (response.Job.LocationManagedType==3) {
                                $('#location-managed').removeClass("pntr-none subSectionOpacity");
                                showHideControls(this, 'carrier-section', 'noelement');
                            }
                        }

						SetOnsiteContacts($('#@Html.IdFor(m=>m.AddressDetails.OnsiteContactUserId)'), response.Job.OnsiteContactPersons);
                        if (response.Job.IsProFormaPoEnabled) {
                            $("#external-ponumber").hide();
                        }
                        $('#@Html.IdFor(m=>m.AddressDetails.SignatureEnabled)').prop('checked', response.Job.SignatureEnabled);
                        $('#@Html.IdFor(m=>m.IsTaxExempted)').prop('checked', response.JobBudget.IsTaxExempted);
                        //$(".combineDiv input,.combineDiv select").addClass("pntr-none").attr("readonly", "readonly");
                        /*$(".address").trigger('blur');*/
                        updateMapData();
                        updateFuelTypesDropdown();
                        GetCityRackTerminalList($('#@Html.IdFor(m=>m.AddressDetails.State.Id)').val(), false);
                        $(".tpo-addressloader").hide(); $(".address-controls").addClass("subSectionOpacity");
                        $(".company-owned").addClass("pntr-none");

                        var countryCurrency = @((int)Currency.CAD);
                        if (response.Job.Country.Currency == countryCurrency) {
                            setCanadaCurrencyAndUom();
                        }
                        else {
                            setUsaCurrencyAndUom();
                        }
                        //bind forcasting details
                        if (response.Job.Id) {
                            renderPartialForcastingForm(response.Job.Id);
                        }
                        GetJobSpecificBillingAddress();
                    }
                    else if (isNewJobRadioChecked() == false) {
                        ClearControls(); $(".address-controls").addClass("subSectionOpacity");
                        $(".company-owned").addClass("pntr-none");
                        renderPartialForcastingForm(0);
                    }
                });
        }

        function renderPartialForcastingForm(jobId) {
            let url = '@Url.Action("GetPartialIMSForcastingViewForTpoJob", "Dashboard", new { area = "Supplier" })' + '?jobId=' + jobId;
            $.ajax({
                type: 'GET',
                url: url,
                success: function (response) {
                    $(".tpoJobForcastingData").html(response);
                    $("#lblforcastingNote").text('Note : The changes made at location level will override all tank level changes.');
                    parseForm();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(jqXHR, textStatus, errorThrown);
                }
            }).always(function () {});
        }


        function ClearValidationMessageForAddressControls() {
            validationMessageFor($("#@Html.IdFor(m=> m.AddressDetails.Address)").attr('name'), '');
            validationMessageFor($("#@Html.IdFor(m=> m.AddressDetails.City)").attr('name'), '');
            validationMessageFor($("#@Html.IdFor(m=> m.AddressDetails.CountyName)").attr('name'), '');
            validationMessageFor($("#@Html.IdFor(m=> m.AddressDetails.ZipCode)").attr('name'), '');
            validationMessageFor($("#@Html.IdFor(m=> m.AddressDetails.Country.Id)").attr('name'), '');
            validationMessageFor($("#@Html.IdFor(m=> m.AddressDetails.State.Id)").attr('name'), '');
            validationMessageFor($("#@Html.IdFor(m=> m.AddressDetails.Latitude)").attr('name'), '');
            validationMessageFor($("#@Html.IdFor(m=> m.AddressDetails.Longitude)").attr('name'), '');
            validationMessageFor($("#@Html.IdFor(m=> m.AddressDetails.TimeZoneName)").attr('name'), '');
            validationMessageFor($("#@Html.IdFor(m=> m.AssignedCarrierCompId)").attr('name'), '');
        }

        function ClearControls() {
            $('#@Html.IdFor(m=>m.AddressDetails.DisplayJobID)').val('');
            $('#@Html.IdFor(m=>m.AddressDetails.WBSNumber)').val('');
            $('#@Html.IdFor(m=>m.AddressDetails.Address)').val('');
            $('#@Html.IdFor(m=>m.AddressDetails.City)').val('');
            $('#@Html.IdFor(m=>m.AddressDetails.CountyName)').val('');
            $('#@Html.IdFor(m=>m.AddressDetails.ZipCode)').val('');
            $('#@Html.IdFor(m=>m.AddressDetails.State.Id)').val($('#@Html.IdFor(m=>m.AddressDetails.State.Id) option:first').val());
            $('#@Html.IdFor(m=>m.AddressDetails.Latitude)').val('');
            $('#@Html.IdFor(m=>m.AddressDetails.Longitude)').val('');
            $('#@Html.IdFor(m=>m.AddressDetails.TimeZoneName)').val('');
            $(".tpo-addressloader").hide();
            $("#external-ponumber").show();
            $('#@Html.IdFor(m=>m.AddressDetails.IsProFormaPoEnabled)').prop('checked', false);
            $(".combineDiv input,.combineDiv select").removeClass("pntr-none").removeAttr("readonly");
            $(".timeZoneName").addClass("pntr-none").attr("readonly", "readonly");
            target = $("#@Html.IdFor(m => m.PricingDetails.TerminalName)");
            target.empty();
            target.prepend("<option value selected='selected'>@Resource.lblSelectTerminal</option>");
            $('#@Html.IdFor(m => m.AddressDetails.IsRetailJob)').prop('checked',false).trigger('change');
            //target.attr("disabled","disabled");
            //$('#@Html.IdFor(m=>m.AssignedCarrierCompId)').removeAttr('readonly');
             $('.divCarrierAssign').removeClass("pntr-none subSectionOpacity");
            @*$('#@Html.IdFor(m=>m.AssignedCarrierCompId)').val($('#@Html.IdFor(m=>m.AssignedCarrierCompId) option:first').val());*@
            $('#@Html.IdFor(m=>m.AssignedCarrierCompId)').val('');
            $('#@Html.IdFor(m=>m.AssignedCarrierCompId)').trigger("change");
            $('#@Html.IdFor(m=>m.RegionId)').removeAttr('readonly');
            $('#@Html.IdFor(m=>m.RegionId)').val($('#@Html.IdFor(m=>m.RegionId) option:first').val());
            showHideControls(this, 'noelement', 'carrier-section');

            $('input:radio[id="@Html.IdFor(m => m.AddressDetails.LocationManagedType)"][value = @LocationManagedType.NotSpecified]').prop('checked', true);
           // $("#location-managed").hide();
            $('#location-managed').removeClass("pntr-none subSectionOpacity");
        }

    function GetGlobalCost(e, $form) {
            var selectedFuelTypeId = $("#@Html.IdFor(m => m.FuelDetails.FuelTypeId)").val();
            var jobStateId = $("#@Html.IdFor(m=>m.AddressDetails.State.Id)").val();
            var currencyId = $("#@Html.IdFor(m=>m.AddressDetails.Country.Currency)").val();
        var quantityTypeId = $('input[name="@Html.NameFor(m=> m.FuelDetails.FuelQuantity.QuantityTypeId)"]:checked').val();
            var isMarine=$("#@Html.IdFor(m=> m.FuelDetails.IsMarineLocation)").val();
            var uom=$("#@Html.IdFor(m => m.FuelDetails.FuelQuantity.UoM)").val();
            if (quantityTypeId ==@((int)QuantityType.NotSpecified)&& isMarine == 'True' )
                uom = $("#@Html.IdFor(m => m.AddressDetails.MarineUoM)").val();
              else  if (quantityTypeId !=@((int)QuantityType.NotSpecified)&& isMarine == 'True' )
                uom = $("#@Html.IdFor(m => m.FuelDetails.FuelQuantity.UoM)").val();


            $.get("@Url.Action("GetGlobalFuelCost", "Order",new { area="Supplier" })",
                {
                    fuelTypeId: selectedFuelTypeId,
                    jobStateId: jobStateId,
                    uom:uom,
                    currency: currencyId
                },

                function (response) {


                    if (response != 0) {
                        validationMessageFor($("#@Html.IdFor(m=>m.PricingDetails.PricingTypeId)").attr('name'), '');
                        $form.submit();
                    }
                    else {

                        validationMessageFor($("#@Html.IdFor(m=>m.PricingDetails.PricingTypeId)").attr('name'), '@ResourceMessages.GetMessage(Resource.ErrorGlobalCostNotProvided)');
                        msgerror('@Resource.ErrorGlobalCostNotProvided');
                        if (e) { e.preventDefault(); }
                        showInvalidTab();
                        $('#Submit').removeAttr('disabled');
                        $('#Submit').removeClass('subSectionOpacity');
                        $('.loader').hide();
                    }

                });
        }

        function validateDeliverySchedule()
        {
            var isValidForm = true;
            var fuelRequestStartDate = $('#@Html.IdFor(t=>t.FuelDeliveryDetails.StartDate)').val();
			var fuelRequestStartTime = $('#@Html.IdFor(t=>t.FuelDeliveryDetails.StartTime)').val();
            var startDate = new Date(fuelRequestStartDate).setHours(0, 0, 0, 0);
            var quantity = 0, totalQuantity = 0;
            if ($('input[name="@Html.NameFor(m=> m.FuelDetails.FuelQuantity.QuantityTypeId)"]:checked').val() == '@((int)QuantityType.SpecificAmount)') {
                quantity = parseInt($("#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.Quantity)").val(), 10);
            }
            else  if ($('input[name="@Html.NameFor(m=> m.FuelDetails.FuelQuantity.QuantityTypeId)"]:checked').val() == '@((int)QuantityType.Range)') {
                quantity = parseInt($("#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.MaximumQuantity)").val(), 10);
            }

			var frStartTimeinMin = getMinutes(convertTo24Hour(fuelRequestStartTime));
            $(".endtime").each(function () {
                var endTimeVal = $(this).val();
                var startTimeVal = $(this).parents('.partial-block').find('.starttime').val();
                if (endTimeVal != '' && startTimeVal != '' && endTimeVal != startTimeVal) {
                    var startTimevalInMinutes = getMinutes(convertTo24Hour(startTimeVal));
                    var endTimevalInMinutes = getMinutes(convertTo24Hour(endTimeVal));
                    if (parseInt(startTimevalInMinutes) > parseInt(endTimevalInMinutes)) {
                        validationMessageFor($(this).attr('name'), '@ResourceMessages.GetMessage(Resource.valMessageGreaterThanOrEqual, new object[] { Resource.lblEndTime, Resource.lblStartTime })');
                        isValidForm = false;
                    }
                }
            });
            //deleting all rows which are not visible
            var scheduleType;
            $('#delivery-schedule-section .partial-block').each(function () {
                scheduleType = $(this).find('.schedule-type').val();
				var date = $(this).find('.schedule-date').val();
				var scheduleStartTime = $(this).find('.starttime').val();

                if (scheduleType == '@((int)DeliveryScheduleType.Weekly)' || scheduleType == '@((int)DeliveryScheduleType.BiWeekly)') {
                    totalQuantity += parseInt($(this).find('.quantity').val()) * $(this).find('.schedule-days').val().length;
                }
                else
                {
                    totalQuantity += parseInt($(this).find('.quantity').val());
                }
                if (scheduleType == '@((int)DeliveryScheduleType.SpecificDates)' || scheduleType == '@((int)DeliveryScheduleType.Monthly)') {
                    var scheduleDate = new Date(date).setHours(0, 0, 0, 0);
                    if (scheduleDate < startDate) {
                        validationMessageFor($(this).find('.datepicker').attr('name'),
                            '@ResourceMessages.GetMessage(Resource.valMessageScheduleDate)');
                        isValidForm = false;
					}
					if (scheduleType == '@((int)DeliveryScheduleType.SpecificDates)' && scheduleDate == startDate)
					{
						var scheduleStartTimeinMin = getMinutes(convertTo24Hour(scheduleStartTime));
                        if (parseInt(frStartTimeinMin) > parseInt(scheduleStartTimeinMin))
						{
							validationMessageFor($(this).find('.starttime').attr('name'),
                            '@ResourceMessages.GetMessage(Resource.valMessageInvalid, new object[] { Resource.lblStartTime })');
							isValidForm = false;
						}
					}
                }
            });
            if (totalQuantity > quantity)
            {
                validationMessageFor($('#delivery-schedule-section .partial-block:last').find('.quantity').attr('name'),
                                         '@ResourceMessages.GetMessage(Resource.valMessageScheduleQuantity)');
                return false;
            }
            return isValidForm;
        }

        function GoToPreviousURL() {
            window.history.go(-1);
        }

        var priviousCityTerminalId = '@Model.FuelDetails.FuelPricing.CityGroupTerminalId';
        function assignNewCityGroupTerminal() {

            var selectedCityTerminal = parseInt($('#@Html.IdFor(m => m.PricingDetails.CityGroupTerminalId)').val());
            var jobId = getJobIdFromDropdown();
            var source = getPricingSource();
            if (priviousCityTerminalId != selectedCityTerminal && selectedCityTerminal > 0) {
                validationMessageFor('@Html.NameFor(m => m.PricingDetails.CityGroupTerminalId)', '');
                $(".cityrack-validation").addClass("hide-element");
                var url = '@Url.Action("IsCityGroupTerminalPriceAvailable", "FuelRequest")';
                var data = {
                    jobid: isNaN(jobId) ? 0 : jobId,
                    fueltypeId: parseInt($("#@Html.IdFor(m => m.FuelDetails.FuelTypeId)").val()),
                    selectedCityRackId: selectedCityTerminal,
                    lattitude: parseFloat($("#@Html.IdFor(m => m.AddressDetails.Latitude)").val()),
                    longitude: parseFloat($("#@Html.IdFor(m => m.AddressDetails.Longitude)").val()),
                    countryCode: $("#@Html.IdFor(m => m.AddressDetails.Country.Id) option:selected").text(),
                    sourceId: source
                };
                if (data.fueltypeId > 0 && (data.jobid > 0 || (!isNaN(data.lattitude) && !isNaN(data.longitude)))) {
                    $(".cityrack-loader").show();
                    $.get(url, data, function (response) {
                        if (response === false) {
                            validationMessageFor('@Html.NameFor(m => m.PricingDetails.CityGroupTerminalId)', '@Resource.errMessageTerminalPriceNotAvailable');
                            $('#@Html.IdFor(m => m.PricingDetails.CityGroupTerminalId)').multiselect('select', ['noneselected']);
                            $(".cityrack-validation").removeClass("hide-element");
                        }
                        else {
                            validationMessageFor('@Html.NameFor(m => m.PricingDetails.CityGroupTerminalId)', '');
                            $(".cityrack-validation").addClass("hide-element");
                            $('#@Html.IdFor(m => m.PricingDetails.CityGroupTerminalStateId)').val(selectedCityTerminal);
                        }
                        $(".cityrack-loader").hide();
                        priviousCityTerminalId = selectedCityTerminal;
                    });
                }
            }
            if (source != @((int)PricingSource.Axxis)) {
                GetOpisTerminals();
            }
    }


        function GetCompanyDetails(companyId, companyName) {
            var target = $(".existingContactPerson");
              if ($("#@Model.CustomerDetails.IsNewCompany").val() == 'False') {
                if ('@Model.CustomerDetails.CompanyId' != companyId || '@Model.CustomerDetails.Name' == '' || '@Model.CustomerDetails.UserId' > 0)
                { CreateExistingContactPerson(); }
                else
                {
                    CreateNewContactPerson();
                    $('input[name="@Html.NameFor(m=> m.CustomerDetails.Name)"]').val('@Model.CustomerDetails.Name');
                    $(".phoneNumber").val('@Model.CustomerDetails.PhoneNumber');
                    $(".email").val('@Model.CustomerDetails.Email');
                }
            }
			if (companyId != "" && companyId > 0) {
                $(".customer-contact").show();
                $("#@Html.IdFor(m => m.CustomerDetails.CompanyName)").val(companyName);

                var url = '@Url.Action("GetTPOCompanyContactPersons","Order",new { Area="Supplier" })';
                $.get(url, { companyId: companyId }, function (response) {
                        target.empty(), $.each(response, function (i, element) {
                            target.append($('<option></option>').val(element.Id).html(element.Name));
                            $(".customer-contact").hide();
                    });
                    $(target).prepend("<option value selected='selected'>@string.Format(@Resource.valMessageSelect, @Resource.lblContactPerson)</option>");
                    if ($.parseJSON('@Model.CustomerDetails.UserId.HasValue.ToString().ToLower()' && '@Model.CustomerDetails.CompanyId' == companyId) && '@Model.CustomerDetails.Name' == '') {
                        $("select#CustomerDetails_UserId").val("@Model.CustomerDetails.UserId");
                        $("select#CustomerDetails_UserId").trigger('change');
                    }
                });

                @*url = '@Url.Action("GetTPOCompanyBillingAddress","Order",new { Area="Supplier" })';
                $.get(url, { companyId: companyId }, function (response) {
                    if (response.Id != undefined && response.Id > 0) {
                        billingAddressId = response.Id;
                        $("#@Html.IdFor(m => m.BillingAddress.Id)").val(response.Id);
                        $("#@Html.IdFor(m => m.BillingAddress.ZipCode)").val(response.ZipCode);
                        $(".billingZipCode").trigger("change");
                        $("#@Html.IdFor(m => m.BillingAddress.Address)").val(response.Address);
                        $("#@Html.IdFor(m => m.BillingAddress.City)").val(response.City);
                        $("#@Html.IdFor(m => m.BillingAddress.Country)").val(response.Country.Id);
                        $("#@Html.IdFor(m => m.BillingAddress.State)").val(response.State.Id);
                        $("#@Html.IdFor(m => m.BillingAddress.County)").val(response.County);
                        $("#@Html.IdFor(m => m.BillingAddress.StateName)").val(response.State.Name);
                        $("#@Html.IdFor(m => m.BillingAddress.CountryName)").val(response.Country.Name);
                        if (response.Id > 0) {
                            $("#@Html.IdFor(m => m.BillingAddress.IsBillingAddressRequired)").val(true);
                            isCustomBillingAddressAllowed = false;
                            $('#lbl-chk-billing-address').addClass('pl0');
                        }
                        else {
                            isCustomBillingAddressAllowed = true;
                            $('#lbl-chk-billing-address').removeClass('pl0');
                        }
                        $('#chk-billing-address').show();
                        if (isTileCollapsed('billing-address')) {
                            toggleTileElement(null, 'billing-address');
                        }

                        ClearBillingAddress(isCustomBillingAddressAllowed);
                    }
                });*@
                GetJobsForCompany(companyName);
            }
			else {
                target.empty();
                $(target).prepend("<option value selected='selected'>@string.Format(@Resource.valMessageSelect, @Resource.lblContactPerson)</option>");
            }
        }

        function GetContactPersonDetails(contactPerson) {
            $(".phoneNumber").val('');
            $(".email").val('');
            var contactPersonId = $(contactPerson).val();
            if (contactPersonId != "" && contactPersonId > 0) {
                var url = '@Url.Action("GetTPOContactPersonDetails", "Order",new { Area="Supplier" })';
                $.get(url, { userId: contactPersonId }, function (response) {
                    $(".phoneNumber").val(response.PhoneNumber);
                    $(".email").val(response.Email);
                    $("#@Html.IdFor(m=>m.CustomerDetails.PhoneNumber)").val(response.PhoneNumber);
                    $("#@Html.IdFor(m=>m.CustomerDetails.Email)").val(response.Email);
                    $("#@Html.IdFor(m=>m.CustomerDetails.Name)").val(response.Name);
                    if (!response.IsPhoneNumberConfirmed) {
                        $(".mobile-validation-msg").html('@Resource.valMessagePhoneNotValid');
                    }
                    else {
                        $(".mobile-validation-msg").html('');
                    }
                });
            }
        }

        function SetJobValues() {
            if (!isNewJobRadioChecked() && $.parseJSON("@Model.AddressDetails.JobId.HasValue.ToString().ToLower()")) {
                $("select#@Html.IdFor(m => m.AddressDetails.JobId)").val("@Model.AddressDetails.JobId");
                        $("select#@Html.IdFor(m => m.AddressDetails.JobId)").trigger("change");
            }
        }

        function DisableNotRequired(isNewCompany) {
            $("#@Html.IdFor(m => m.AddressDetails.JobId)").empty().prepend("<option value selected='selected'>@string.Format(@Resource.valMessageSelect, @Resource.lblJob)</option>");
                $(".newContactPerson").val('');
                $(".existingContactPerson").empty().prepend("<option value selected='selected'>@string.Format(@Resource.valMessageSelect, @Resource.lblContactPerson)</option>");
            if (!isNewCompany) {
                CreateExistingContactPerson();
            }
            else {
                $("#@Html.IdFor(m => m.AddressDetails.IsNewJob)").click();
            }
        }

        function CreateNewContactPerson() {
            $(".phoneNumber").prop("readonly", false);
            $(".email").prop("readonly", false);
            $(".phoneNumber").val('');
            $(".email").val('');
            $(".existing-company").addClass("hide-element");
            $(".existing-company").hide();
            $(".new-company").removeClass("hide-element");
            $("#useExisting").show();
            $(".new-company").show();
            $(".mobile-validation-msg").html('');
        }

        function CreateExistingContactPerson() {
            $(".phoneNumber").prop("readonly", true);
            $(".email").prop("readonly", true);
            $("#useExisting").hide();
            $(".existing-company").removeClass("hide-element");
            $(".existing-company").show();
            var numCompanyId = parseInt($("#@Html.IdFor(m => m.CustomerDetails.CompanyId)").val(), 10);
            var selectedCompanyId = (isNaN(numCompanyId) ? 0 : numCompanyId);
            var selectedCompanyName = $("#@Html.IdFor(m => m.CustomerDetails.CompanyId) option:selected").text();
            GetCompanyDetails(selectedCompanyId, selectedCompanyName);
            $(".new-company").addClass("hide-element");
            validationMessageFor("@Html.NameFor(m=>m.CustomerDetails.PhoneNumber)", '');
            validationMessageFor("@Html.NameFor(m=>m.CustomerDetails.Email)", '');
        }

        function SetSpecialMinDate(element) {
            var requestMinDate = $('#@Html.IdFor(m => m.FuelDeliveryDetails.StartDate)').val();
            if (requestMinDate == undefined || requestMinDate == "") { requestMinDate = '@Model.FuelDeliveryDetails.StartDate' || '@DateTimeOffset.Now'; }
            $(element).closest('.fee-types').find('.special-date').data("DateTimePicker").minDate(moment(requestMinDate).startOf('d'));
        }

        function updateFuelTypesDropdown() {
            var address = getAddress();
            if (address != undefined) {
                zipCode = address; // It is for getting fuel type on change of product display group
                jobId = getJobIdFromDropdown();
                if (isNewJobRadioChecked()) { jobId = 0; isExistingJob = false; }
            }
        }

        function getAddress() {
            var address = undefined;
            var state = $("#@Html.IdFor(m => m.AddressDetails.State.Id)");
            if (state.val() == '') { return address; }

            address = $("#@Html.IdFor(m => m.AddressDetails.Address)").val() + " " +
                $("#@Html.IdFor(m => m.AddressDetails.City)").val() + " " +
                $("#@Html.IdFor(m => m.AddressDetails.State.Id) option:selected").text() + " " +
                $("#@Html.IdFor(m => m.AddressDetails.Country.Id) option:selected").text() + " " + getZipcode();

            return address;
        }

        function getJobIdFromDropdown() {
            var numJobId = parseInt($("#@Html.IdFor(m => m.AddressDetails.JobId)").val(), 10);
            return (isNaN(numJobId) ? 0 : numJobId);
        }
        function getJobNameFromDropdown() {
            return $("#@Html.IdFor(m => m.AddressDetails.JobId) option:selected").text();
        }
        function isNewJobRadioChecked() {
            return $('.jobname[value="True"]').is(':checked');
        }
        function getZipcode() {
            return $("#@Html.IdFor(m => m.AddressDetails.ZipCode)").val();
        }
        function getProductDisplayGroupId() {
            return parseInt($('input[name="@Html.NameFor(m => m.FuelDetails.FuelDisplayGroupId)"]:checked').val(), 10);
		}

		function setStateValue(element)
		{
			var selectedState = $(element).val();
			var states = $('[name="@Html.NameFor(m=>m.AddressDetails.State.Id)"]');
			$(states).first().val(selectedState);
			$(states).last().val(selectedState);
			GetCityRackTerminalList(selectedState, false);
			if ($('input:checkbox[name="@Html.NameFor(m => m.AddressDetails.IsVarious)"]').is(":checked") == true)
			{
				var state = $(states).find("option:selected").first().text();
				var country = $('[name="@Html.NameFor(m=>m.AddressDetails.Country.Id)"]').find('option:selected').text();
				GetLatLong(state, country);
            }
            updateDefaultQuantityIndicator(selectedState);
        }

        function updateDefaultQuantityIndicator(selectedState) {
            var stateInformation = $.grep(allStates, function (v) {
                return v.StateId == selectedState;
            });

            if (stateInformation.length == 0)
                return;

            if ('@((int)Model.FuelDetails.FuelQuantity.QuantityIndicatorTypes > 0)' == 'True') {
                defaultQuantityIndicator = '@((int)Model.FuelDetails.FuelQuantity.QuantityIndicatorTypes)';
            }
            else {
                defaultQuantityIndicator = stateInformation[0].QuantityIndicatorId;
            }

            $('#@Html.IdFor(m => m.FuelDetails.FuelQuantity.QuantityIndicatorTypes)').val(defaultQuantityIndicator);
            $('#@Html.IdFor(m => m.FuelDetails.FuelQuantity.QuantityIndicatorTypes)').trigger('change');
        }

		function SetOnsiteContacts(element, onsiteContactPersons)
        {
            var onsiteUserId = '@Model.AddressDetails.OnsiteContactUserId';
			$(element).empty();
			$(element).append($('<option></option>').val('').html('@Resource.btnLabelSelect @Resource.lblOnsiteContact'));
            $.each(onsiteContactPersons, function (i, item) {
                $(element).append($('<option></option>').val(item.Id).html(item.Name).attr('selected', onsiteUserId == item.Id));
            });
		}

		function CheckAddBillingAddress(ischecked)
		{
			if (ischecked && $("#@Html.IdFor(m=> m.CustomerDetails.IsNewCompany)").val() == 'True') {
				$('#BillingAddress_IsBillingAddressRequired').prop('checked', true);
				$('#BillingAddress_IsBillingAddressRequired').attr('readonly', 'readonly');
			}
			else
			{
				$('#BillingAddress_IsBillingAddressRequired').prop('checked', false);
				$('#BillingAddress_IsBillingAddressRequired').removeAttr('readonly');
			}
			toggleBillingAddressControls($('#BillingAddress_IsBillingAddressRequired'));
        }

    function isExistingCompanyRadioSelected(isExisting) {
        renderPartialForcastingForm(0);
        if (isExisting) {
            $(".existingjobSection").show();
            var numCompanyId = parseInt($("#@Html.IdFor(m => m.CustomerDetails.CompanyId)").val(), 10);
            var selectedCompanyId = (isNaN(numCompanyId) ? 0 : numCompanyId);
            var selectedCompanyName = $("#@Html.IdFor(m => m.CustomerDetails.CompanyId) option:selected").text();
            if (numCompanyId > 0) {
                LoadExistingAddress();
                $('#lnkSurchargeTable').removeClass('pntr-none subSectionOpacity');
                inputBoxShowHide('existing-company', 'new-company');
                focusOnFirst(null, 'existing-company');
                GetCompanyDetails(selectedCompanyId, selectedCompanyName);
                DisableNotRequired(false);
                ClearBillingAddress(false);
                $("#@Html.IdFor(m => m.CustomerDetails.IsNewCompany)").val(false);
                customerCompany = selectedCompanyId;
                $("#@Html.IdFor(m => m.CustomerDetails.CompanyId)").val(selectedCompanyId);
                $("#@Html.IdFor(m => m.CustomerDetails.CompanyName)").val(selectedCompanyName);
                companyChange(selectedCompanyName);
                toggleRegularBuyerDetails(selectedCompanyId);
            } else {
                customerCompany = '';
                $("#@Html.IdFor(m => m.CustomerDetails.CompanyId)").val(0);
                $("#@Html.IdFor(m => m.CustomerDetails.CompanyName)").val('');
                setCompanyTypeValidation();
                $('#lnkSurchargeTable').addClass('pntr-none subSectionOpacity');
            }

        } else {
            $("#@Html.IdFor(m => m.CustomerDetails.IsNewCompany)").val(true);
            $(".existingjobSection").hide();
            $("#useExisting").hide()
            $(".mobile-validation-msg").html('');
            customerCompany = '';
            $("#@Html.IdFor(m => m.CustomerDetails.CompanyId)").val(0);
            $("#@Html.IdFor(m => m.CustomerDetails.CompanyName)").val('');
            $('#lnkSurchargeTable').addClass('pntr-none subSectionOpacity');
            inputBoxShowHide('new-company', 'existing-company');
            // $("#@Html.IdFor(m => m.CustomerDetails.Name)").val('');
            $("#@Html.IdFor(m => m.CustomerDetails.UserId)").val('');
            setCompanyTypeValidation();
            toggleBuyerDetails(true);
        }
        GetJobSpecificBillingAddress()
        if ($('input[name="@Html.NameFor(m => m.CustomerDetails.IsNewCompany)"]:checked').val() == 'True') {
            $('#contactpersons').show();
        }
        else {
            $('#contactpersons').hide();
        }
        resetFreightDropDownValues();
    }

        function setCompanyTypeValidation() {
            var companyName = $("#@Html.IdFor(m => m.CustomerDetails.CompanyName)").val();
            var companyId = parseInt($("#@Html.IdFor(m => m.CustomerDetails.CompanyId)").val());

            if (isNaN(companyId) || companyId <= 0) {
                inputBoxShowHide('new-company', 'existing-company');
                DisableNotRequired(true);
                ClearBillingAddress(true);
                $("#@Html.IdFor(m => m.CustomerDetails.IsNewCompany)").val(true);
                $(".phoneNumber").prop("readonly", false);
                $(".email").prop("readonly", false);
            }
        }

        function companyChange(companyName) {
            GetJobsForCompany(companyName);
            if (!isNewJobRadioChecked()) {
                GetJobDetails(getJobNameFromDropdown());
            }
        }
        function toggleRegularBuyerDetails(companyId) {
            let isTpoBuyer = false;
            $('.loader').show();
            $.get("@Url.Action("IsValidTpoCompany", "Order",new { area="Supplier" })", { companyId: companyId },
                function (response) {
                    isTpoBuyer = response;
                }).always(function (x) {
                    toggleBuyerDetails(isTpoBuyer);
                    $('.loader').hide();
                });
        }
        function toggleBuyerDetails(isTpoBuyer) {
            if (isTpoBuyer) {
                $(".enable-tpo-buyer").show();
                $(".tpo-enabled").removeClass('pntr-none subSectionOpacity');
                if (@Model.IsSupressOrderPricing && !$('#IsSupressOrderPricing').prop('checked')) {
                    $("#IsSupressOrderPricing").trigger('click');
                }
            } else {
                $(".enable-tpo-buyer").hide();
                $("#radio-existingjob").trigger('click');
                $("#radio-newcontact").trigger('click');
                if ($('#IsSupressOrderPricing').prop('checked')) {
                    $("#IsSupressOrderPricing").trigger('click');
                }
                $(".tpo-enabled").addClass('pntr-none subSectionOpacity');

            }
        }
        function onJobTypeChange(element) {
			if ($(element).is(':checked')) {
                $('.multi-delivery').hide();
			}
			else {
                $('.multi-delivery').show();
                $("#idAccountLevelForcastingEnabled").prop("checked", false);
            }
		}

        function GetJobSpecificBillingAddress() {
            var jobid = 0;
            var custId = 0;
            var isAddressAvailable = false;
            if ($("#@Html.IdFor(m => m.CustomerDetails.IsNewCompany)").val().toLowerCase() != 'true') {
                custId = $("#@Html.IdFor(m => m.CustomerDetails.CompanyId)").val();
            }
            if (!isNewJobRadioChecked()) {
                jobid = parseInt($("#@Html.IdFor(m => m.AddressDetails.JobId)").val());
            }

            if (isNaN(jobid))
                jobid = 0;

            var billingAdd = $("#jobSpecificBillAddress");
            billingAdd.html('');
            $("#@Html.IdFor(m => m.BillToInfo.BillingAddressId)").val(0);
            $("#@Html.IdFor(m => m.BillToInfo.Name)").val('');
            $("#@Html.IdFor(m => m.BillToInfo.Address)").val('');
            $("#@Html.IdFor(m => m.BillToInfo.AddressLine2)").val('');
            $("#@Html.IdFor(m => m.BillToInfo.AddressLine3)").val('');
            $("#@Html.IdFor(m => m.BillToInfo.City)").val('');
            $("#@Html.IdFor(m => m.BillToInfo.ZipCode)").val('');
            $("#@Html.IdFor(m => m.BillToInfo.County)").val('');
            $("#@Html.IdFor(m => m.BillToInfo.State.Name)").val('');
            $("#@Html.IdFor(m => m.BillToInfo.Country.Name)").val('');

            if (!isNaN(custId) && custId > 0) {
                var url = '@Url.Action("GetJobSpecificBillingAddressDetails", "Order", new { Area = "Supplier" })';
                $.get(url, { jobId: jobid, customerId: custId }, function (response) {
                    if (response.Name != "" && response.Name != null) {
                        $("#jobSpecificBillName").html(response.Name);
                        $("#@Html.IdFor(m => m.BillToInfo.BillingAddressId)").val(response.BillingAddressId);
                        $('#radio-existingBillAddress').val(true);
                        $("#radio-existingBillAddress").prop("checked", true).trigger('click');
                        $("#selection-list-billing-Address").removeClass('hide-element');
                        $("#@Html.IdFor(m => m.BillToInfo.Name)").val(response.Name);

                        if (response.Address != "" && response.Address != null) {
                            billingAdd.append(", " + response.Address);
                            $("#@Html.IdFor(m => m.BillToInfo.Address)").val(response.Address);
                        }

                        if (response.AddressLine2 != "" && response.AddressLine2 != null) {
                            billingAdd.append(", " + response.AddressLine2);
                            $("#@Html.IdFor(m => m.BillToInfo.AddressLine2)").val(response.AddressLine2);
                        }

                        if (response.AddressLine3 != "" && response.AddressLine3 != null) {
                            billingAdd.append(", " + response.AddressLine3);
                            $("#@Html.IdFor(m => m.BillToInfo.AddressLine3)").val(response.AddressLine3);
                        }
                        if (response.City != "" && response.City != null) {
                            billingAdd.append(", " + response.City);
                            $("#@Html.IdFor(m => m.BillToInfo.City)").val(response.City);
                        }
                        if (response.ZipCode != "" && response.ZipCode != null) {
                            billingAdd.append(", " + response.ZipCode);
                            $("#@Html.IdFor(m => m.BillToInfo.ZipCode)").val(response.ZipCode);
                        }

                        if (response.County != "" && response.County != null) {
                            billingAdd.append(", " + response.County);
                            $("#@Html.IdFor(m => m.BillToInfo.County)").val(response.County);
                        }

                        if (response.State.Name != "" && response.State.Name != null) {
                            billingAdd.append(", " + response.State.Name);
                            $("#@Html.IdFor(m => m.BillToInfo.State.Name)").val(response.State.Name);
                        }

                        if (response.Country.Name != "" && response.Country.Name != null) {
                            billingAdd.append(", " + response.Country.Name);
                            $("#@Html.IdFor(m => m.BillToInfo.Country.Name)").val(response.Country.Name);
                        }

                        var addr = billingAdd.html().slice(2);
                        billingAdd.html(addr);
                        isAddressAvailable = true;
                        $("#jobSpecificBillInfoWell").show();
                        $("#jobSpecificBillToButton").hide();
                        MakeItNonEditable(true);
                    }
                    else {
                        isAddressAvailable = false;
                    }
                });
            }

            if (!isAddressAvailable) {
                $("#jobSpecificBillInfoWell").hide();
                $("#jobSpecificBillToButton").show();
            }
        }

        function onJobSpecificBillToSubmitt(isSubmitClicked) {
            //set popup values to Model
            var address = $("#@Html.IdFor(m => m.BillToInfo.Address)").val();
            if (!isSubmitClicked && (address == undefined || address == '')) {
                $("#@Html.IdFor(m => m.BillToInfo.State.Id)").val(0);
                $("#@Html.IdFor(m => m.BillToInfo.Country.Id)").val(0);
                $("#jobSpecificBillName").html('');
                $("#jobSpecificBillAddress").html('');
                $("#jobSpecificBillInfoWell").hide();
                $("#jobSpecificBillToButton").show();
            }
            else {
                if ($("#@Html.IdFor(m => m.BillToInfo.Name)").val() == null || $("#@Html.IdFor(m => m.BillToInfo.Name)").val() == "") {
                    validationMessageFor("@Html.NameFor(m => m.BillToInfo.Name)", '@ResourceMessages.GetMessage(Resource.valMsgNameRequired)');
                    $("#JobSpecificBillToSubmit").removeAttr('data-dismiss');
                    return;
                }

                if ($("#@Html.IdFor(m => m.BillToInfo.Address)").val() == null || $("#@Html.IdFor(m => m.BillToInfo.Address)").val() == "") {
                    validationMessageFor("@Html.NameFor(m => m.BillToInfo.Address)", '@ResourceMessages.GetMessage(Resource.valMsgAddressRequired)');
                    $("#JobSpecificBillToSubmit").removeAttr('data-dismiss');
                    return;
                }

                var billingAdd = $("#jobSpecificBillAddress");
                billingAdd.html('');
                $("#jobSpecificBillName").html($("#@Html.IdFor(m => m.BillToInfo.Name)").val());
                if ($("#@Html.IdFor(m => m.BillToInfo.Address)").val())
                    billingAdd.append(", " + $("#@Html.IdFor(m => m.BillToInfo.Address)").val());
                 if ($("#@Html.IdFor(m => m.BillToInfo.AddressLine2)").val())
                    billingAdd.append(", " + $("#@Html.IdFor(m => m.BillToInfo.AddressLine2)").val());
                if ($("#@Html.IdFor(m => m.BillToInfo.AddressLine3)").val())
                    billingAdd.append(", " + $("#@Html.IdFor(m => m.BillToInfo.AddressLine3)").val());
                if ($("#@Html.IdFor(m => m.BillToInfo.City)").val())
                    billingAdd.append(", " + $("#@Html.IdFor(m => m.BillToInfo.City)").val());
                if ($("#@Html.IdFor(m => m.BillToInfo.State.Name)").val())
                    billingAdd.append(", " + $("#@Html.IdFor(m => m.BillToInfo.State.Name)").val());
                if ($("#@Html.IdFor(m => m.BillToInfo.ZipCode)").val())
                    billingAdd.append(", " + $("#@Html.IdFor(m => m.BillToInfo.ZipCode)").val());
                if ($("#@Html.IdFor(m => m.BillToInfo.County)").val())
                    billingAdd.append(", " + $("#@Html.IdFor(m => m.BillToInfo.County)").val());
                if ($("#@Html.IdFor(m => m.BillToInfo.Country.Name)").val())
                    billingAdd.append(", " + $("#@Html.IdFor(m => m.BillToInfo.Country.Name)").val());

                var addr = billingAdd.html().slice(2);
                billingAdd.html(addr);

                $("#jobSpecificBillInfoWell").show();
                $("#jobSpecificBillToButton").hide();

                var attr = $("#JobSpecificBillToSubmit").attr('data-dismiss');
                if (typeof attr === typeof undefined && attr != 'modal') {
                    $("#JobSpecificBillToSubmit").attr('data-dismiss', 'modal');
                }
            }
        }

        function ValidateLocationManagedType() {
             var isValid = true;
            var selectedLocationManagedType = $('input[name="@Html.NameFor(m => m.AddressDetails.LocationManagedType)"]:checked').val();
            var IsFullyCarrierManaged = (selectedLocationManagedType == '@(LocationManagedType.FullyCarrierManaged)');
            if (isNewJobRadioChecked && IsFullyCarrierManaged) {
                    var assignedCarrierId = $('#@Html.IdFor(m => m.AssignedCarrierCompId)').val();
                    if (assignedCarrierId == null ||  assignedCarrierId == 'undefined' ||  assignedCarrierId == "" || assignedCarrierId.length == 0) {
                        isValid = false;
                        validationMessageFor('@Html.NameFor(m => m.AssignedCarrierCompId)', '@Resource.valMessageAssignCarrierCompanyRequired');
                        //validationMessageFor($("#@Html.IdFor(m=>m.AssignedCarrierCompId)").attr('name'), '@Resource.valMessageAssignCarrierCompanyRequired');
                    }
                }
                else {
                     isValid = true;
                    validationMessageFor("@Html.IdFor(m=>m.AssignedCarrierCompId)", "");
                }

            return isValid;
        }

        function GetLocationManagedType(locationType)
        {
            var response;
            switch (locationType) {
              case 0:
                response = '@LocationManagedType.NotSpecified';
                break;
              case 1:
                response = '@LocationManagedType.SupplierManaged';
                break;
              case 2:
                response = '@LocationManagedType.PartialCarrierManaged';
                break;
              case 3:
                response = '@LocationManagedType.FullyCarrierManaged';
                break;
            }

            return response;
        }
        function getRouteInfoDetails(current,routeID) {
            var url = '@Url.Action("GetRoutesForTPOOrder")';
            var RegionId = $(current).val();
            $.ajax({
                url: url,
                type: 'POST',
                data: { regionId: RegionId }, //add parameter
                success: function (data) {
                    $(".routecontrol").empty();
                    var items = [];
                    items.push("<option value=''>@string.Format(Resource.valMessageSelect, Resource.valRouteSelect)</option>");
                    $.each(data, function () {
                        items.push("<option value=" + this.Id + ">" + this.Name + "</option>");
                    });
                    $(".routecontrol").html(items.join(' '));
                    if (routeID != '') {
                        $(".routecontrol").val(routeID);
                    }
                },
                error: function () {
                }
            });
        }

        function GetAssignedCarrier(assignedCarrierCompanyId) {
            var target = $("#@Html.IdFor(m => m.AssignedCarrierCompId)");
            $.get("@Url.Action("GetAssignedCarriers", "Order",new { area="Supplier" })",{ isJobEdit: true },
                function (response) {
                    target.empty(), $.each(response, function (i, element) {
                        target.append($('<option></option>').val(element.Id).html(element.Name));
                    });
                    if (response.length > 0) {
                        $('#@Html.IdFor(m => m.AssignedCarrierCompId)').val(assignedCarrierCompanyId);
                    }
                });
        }

        function GetCarrierUserEmails(assignedCarrierCompId) {
            var target = $("#@Html.IdFor(m => m.CarrierUserEmails)");
            assignedCarrierCompId = (assignedCarrierCompId == undefined || assignedCarrierCompId == null || assignedCarrierCompId == '' ? 0 : assignedCarrierCompId);
            if (assignedCarrierCompId > 0) {
                $.get("@Url.Action("GetCarrierAndSelectedUserEmails", "Order",new { area="Supplier" })",
                    { assignedCarrierCompanyId: assignedCarrierCompId, jobId: $("#@Html.IdFor(m => m.AddressDetails.JobId)").val(), isNewJob: isNewJobRadioChecked() },
                    function (response) {
                        var carrierEmailUsers = response.Items;
                        target.empty(), $.each(carrierEmailUsers, function (i, element) {
                            target.append($('<option></option>').val(element.Id).html(element.Name));
                        });

                        var selectedCarrierEmailUsers = response.SelectedItems;
                        $.each(selectedCarrierEmailUsers, function (i, selectedelement) {
                            $("#@Html.IdFor(m => m.CarrierUserEmails) option[value='" + selectedelement + "']").prop("selected", true);
                        });
                    });
            }
            else {
                target.empty();
            }
        }


        function validateTierBasedPricingAndQty() {
            var isValid = true;
            var tierPricingRows = $('.tier-fuel-quantity-row');
            if (tierPricingRows != undefined && tierPricingRows != null && tierPricingRows.length > 0) {
                $.each(tierPricingRows, function (idx, pricingRow) {
                    var toQty = parseFloat($(pricingRow).find('.to-quantity').val());
                    var fromQty = parseFloat($(pricingRow).find('.from-quantity').val());
                    var pricingCodeId = parseInt($(pricingRow).find('.tierPricingCodeId').val());
                    var pricingTypeId = parseInt($(pricingRow).find('.tierPricingTypeId').val());
                    var rackPrice = parseFloat($(pricingRow).find('.tierRackPrice').val());
                    var supplierCost = parseFloat($(pricingRow).find('.tierSupplierCostMarkupValue').val());
                    var pricePerGallon = parseFloat($(pricingRow).find('.tierPricePerGallon').val());
                    var isAboveQuantity = $(pricingRow).find('.tierIsAboveQuantity').val();
                    var rowIdx = parseInt($(pricingRow).attr('rowIndex'));

                    // update tier pricing fuel type if line item fueltype and selected fueltype are different
                    var fuelTypeId = parseInt($("#@Html.IdFor(m => m.FuelDetails.FuelTypeId)").val());
                    var pricingFuelTypeId = parseInt($(pricingRow).find('.tierFuelTypeId').val());
                    if (!isNaN(fuelTypeId) && !isNaN(pricingFuelTypeId) && fuelTypeId != pricingFuelTypeId)
                        $(pricingRow).find('.tierFuelTypeId').val(fuelTypeId);

                    if (!(isAboveQuantity == 'True') && (isNaN(toQty) || toQty <= 0)) { // validate above quantity
                        isValid = false;
                        validationMessageFor($(pricingRow).find('.to-quantity').attr('name'), '@Resource.valMessageQuantityRequired');
                    }
                    else if (isNaN(pricingCodeId) || pricingCodeId <= 0) { // validate pricing code
                        isValid = false;
                        $(pricingRow).find('.lbl-error-msg').text('@Resource.valMessagePricingCodeRequied');
                        $(pricingRow).find('.pricing-error-section').removeClass('hide-element');
                    }
                    else if (pricingTypeId == @((int)PricingType.PricePerGallon) && (isNaN(pricePerGallon) || pricePerGallon <= 0)) { // validate PPG
                        isValid = false;
                        $(pricingRow).find('.lbl-error-msg').text('@Resource.valMessagePricingIsRequired');
                        $(pricingRow).find('.pricing-error-section').removeClass('hide-element');
                    }
                    else if (pricingTypeId == @((int)PricingType.RackAverage) && (isNaN(rackPrice) || rackPrice < 0)) { // validate rack pricing
                        isValid = false;
                        $(pricingRow).find('.lbl-error-msg').text('@Resource.valMessagePricingIsRequired');
                        $(pricingRow).find('.pricing-error-section').removeClass('hide-element');
                    }
                    else if (pricingTypeId == @((int)PricingType.Suppliercost) && (isNaN(supplierCost) || supplierCost < 0)) { // validate supplier cost
                        isValid = false;
                        $(pricingRow).find('.lbl-error-msg').text('@Resource.valMessagePricingIsRequired');
                        $(pricingRow).find('.pricing-error-section').removeClass('hide-element');
                    }

                    if (!isValid)
                        return isValid;
                });

                if (isValid)
                    isValid = setQuantity(false);
            }

            return isValid;
        }

        function validateFRPricing() {
            var isValid = true;
            var pricingTypeId = parseInt($('input[name="@Html.NameFor(m => m.PricingDetails.PricingTypeId)"]:checked').val());
            var pricingCodeId = parseInt($("#@Html.IdFor(m => m.PricingDetails.FuelPricingDetails.PricingCode.Id)").val());
            var rackAvgTypeId = parseInt($("#@Html.IdFor(m => m.PricingDetails.RackAvgTypeId)").val());

            var ppg = 0;
            if (pricingTypeId == @((int)PricingType.RackAverage)) {
                var ppg = parseFloat($("#@Html.IdFor(m => m.PricingDetails.RackPrice)").val());
                if (isNaN(ppg) || ppg < 0) {
                    validationMessageFor('@Html.NameFor(m => m.PricingDetails.RackPrice)', '@Resource.valMessagePricingIsRequired');
                    isValid = false;
                }
            }
            else if (pricingTypeId == @((int)PricingType.Suppliercost)) {
                var ppg = parseFloat($("#@Html.IdFor(m => m.PricingDetails.SupplierCostMarkupValue)").val());
                if (isNaN(ppg) || ppg < 0) {
                    validationMessageFor('@Html.NameFor(m => m.PricingDetails.SupplierCostMarkupValue)', '@Resource.valMessagePricingIsRequired');
                    isValid = false;
                }
            }
            else if (pricingTypeId == @((int)PricingType.PricePerGallon)) {
                ppg = parseFloat($("#@Html.IdFor(m => m.PricingDetails.PricePerGallon)").val());
                if (isNaN(ppg) || ppg <= 0) {
                    validationMessageFor('@Html.NameFor(m => m.PricingDetails.PricePerGallon)', '@Resource.valMessagePricingIsRequired');
                    isValid = false;
                }
            }
            else if (isNaN(pricingCodeId) || pricingCodeId <= 0) {
                validationMessageFor('@Html.NameFor(m => m.PricingDetails.FuelPricingDetails.PricingCode.Code)', '@Resource.valMessagePricingCodeRequied');
                isValid = false;
            }
            return isValid;
        }

        function setControlsEditableForCaribbean(ele) {
            var countryId = parseInt($("#@Html.IdFor(m => m.AddressDetails.Country.Id)").val());
            if (!isNaN(countryId) && countryId == '@((int)Country.CAR)') {
                $("#@Html.IdFor(m => m.AddressDetails.Country.Id)").removeClass('pntr-none');
                $("#@Html.IdFor(m => m.AddressDetails.CountryGroupId)").removeClass('pntr-none');
            }
        }

        function validateLocationAddress() {
            var isValid = true;
            var isVariousLocation = $('[name="@Html.NameFor(m => m.AddressDetails.IsVarious)"]').prop('checked');
            var countryId = parseInt($('#@Html.IdFor(m => m.AddressDetails.Country.Id)').val());
            var billingAddressCountryId = parseInt($('#@Html.IdFor(m => m.BillingAddress.Country)').val());
            var isGeocodeUsed = $('[name="@Html.NameFor(m => m.AddressDetails.IsGeocodeUsed)"]').prop('checked');
            var latitude = $.trim($("#@Html.IdFor(m => m.AddressDetails.Latitude)").val());
            var longitude = $.trim($("#@Html.IdFor(m => m.AddressDetails.Longitude)").val());
            var address = $.trim($("#@Html.IdFor(m => m.AddressDetails.Address)").val());
            var stateId = parseInt($("#@Html.IdFor(m => m.AddressDetails.State.Id)").val());
            var isBillingAddressRequired = $('[name="@Html.NameFor(m => m.BillingAddress.IsBillingAddressRequired)"]').prop('checked');
            var billingAddress = $.trim($("#@Html.IdFor(m => m.BillingAddress.Address)").val());

            $('.address-validation-error').addClass('hide-element');
            $('.billing-address-validation-error').addClass('hide-element');
            $('.billing-zipcode-validation-error').addClass('hide-element');
            $('.billing-city-validation-error').addClass('hide-element');
            if (isVariousLocation || countryId == '@((int)Country.CAR)') {
                if (countryId == '@((int)Country.CAR)') {
                    if (isGeocodeUsed) {
                        if (latitude == '') {
                            $('#spnErrorLatitude').html('@(string.Format(Resource.valMessageRequired, "Latitude"))');
                            $('#spnErrorLatitude').removeClass('hide-element');
                            isValid = false;
                        }
                        if (longitude == '') {
                            $('#spnErrorLongitude').html('@(string.Format(Resource.valMessageRequired, "Longitude"))');
                            $('#spnErrorLongitude').removeClass('hide-element');
                            isValid = false;
                        }

                        if (isNaN(stateId) || stateId <= 0)
                            $('#@Html.IdFor(m => m.AddressDetails.State.Id)')[0].selectedIndex = 1;
                    }
                    else {
                        if (isNaN(stateId) || stateId <= 0) {
                            validationMessageFor('@Html.NameFor(m => m.AddressDetails.State)', '@(string.Format(Resource.valMessageRequired, "State"))');
                            isValid = false;
                        }
                    }

                    // copy state name
                    $("#@Html.IdFor(m => m.AddressDetails.State.Name)").val($("#@Html.IdFor(m => m.AddressDetails.State.Id) option:selected").text());
                }
                else {
                    if (isNaN(stateId) || stateId <= 0) {
                        validationMessageFor('@Html.NameFor(m => m.AddressDetails.State)', '@(string.Format(Resource.valMessageRequired, "State"))');
                        isValid = false;
                    }
                }

                var bollToStateId = parseInt($("#@Html.IdFor(m => m.BillToInfo.State.Id)").val());
                if (isNaN(bollToStateId) || bollToStateId <= 0)
                    $('#@Html.IdFor(m => m.BillToInfo.State.Id)')[0].selectedIndex = 1;
            }
            else {
                var city = $.trim($("#@Html.IdFor(m => m.AddressDetails.City)").val());
                var zipCode = $.trim($("#@Html.IdFor(m => m.AddressDetails.ZipCode)").val());
                var countyName = $.trim($("#@Html.IdFor(m => m.AddressDetails.CountyName)").val());

                if (address == '') {
                    $('#spnErrorAddress').html('@(string.Format(Resource.valMessageRequired, "Address"))');
                    $('#spnErrorAddress').removeClass('hide-element');
                    isValid = false;
                }
                if (city == '') {
                    $('#spnErrorCity').html('@(string.Format(Resource.valMessageRequired, "City"))');
                    $('#spnErrorCity').removeClass('hide-element');
                    isValid = false;
                }
                if (isNaN(stateId) || stateId <= 0) {
                    validationMessageFor('@Html.NameFor(m => m.AddressDetails.State)', '@(string.Format(Resource.valMessageRequired, "State"))');
                    isValid = false;
                }
                if (zipCode == '') {
                    $('#spnErrorZipCode').html('@(string.Format(Resource.valMessageRequired, "ZipCode"))');
                    $('#spnErrorZipCode').removeClass('hide-element');
                    isValid = false;
                }
                @*if (countyName == '') {
                    $('#spnErrorCountyName').html('@(string.Format(Resource.valMessageRequired, "CountyName"))');
                    $('#spnErrorCountyName').removeClass('hide-element');
                    isValid = false;
                }*@
                if (latitude == '') {
                    $('#spnErrorLatitude').html('@(string.Format(Resource.valMessageRequired, "Latitude"))');
                    $('#spnErrorLatitude').removeClass('hide-element');
                    isValid = false;
                }
                if (longitude == '') {
                    $('#spnErrorLongitude').html('@(string.Format(Resource.valMessageRequired, "Longitude"))');
                    $('#spnErrorLongitude').removeClass('hide-element');
                    isValid = false;
                }
            }

            if (isBillingAddressRequired) {
                if (billingAddress == '') {
                    $('#spnErrorBillingAddress').html('@(string.Format(Resource.valMessageRequired, "Address"))');
                    $('#spnErrorBillingAddress').removeClass('hide-element');
                    isValid = false;
                }
            }
            if (isVariousLocation) {
                var billingCity = $.trim($("#@Html.IdFor(m => m.BillingAddress.City)").val());
                var billingZipCode = $.trim($("#@Html.IdFor(m => m.BillingAddress.ZipCode)").val());
                var billingCountryName = $.trim($("#@Html.IdFor(m => m.BillingAddress.CountryName)").val());
                var billingStateName = $.trim($("#@Html.IdFor(m => m.BillingAddress.StateName)").val());

                if (billingAddress == '') {
                    $('#spnErrorBillingAddress').html('@(string.Format(Resource.valMessageRequired, "Address"))');
                    $('#spnErrorBillingAddress').removeClass('hide-element');
                    isValid = false;
                }
                if (billingCity == '') {
                    $('#spnErrorBillingCity').html('@(string.Format(Resource.valMessageRequired, "City"))');
                    $('#spnErrorBillingCity').removeClass('hide-element');
                    isValid = false;
                }

                if (billingZipCode == '') {
                    $('#spnErrorBillingZipCode').html('@(string.Format(Resource.valMessageRequired, "ZipCode"))');
                    $('#spnErrorBillingZipCode').removeClass('hide-element');
                    isValid = false;
                }

                if (billingCountryName == '') {
                    $('#spnErrorBillingCountryName').html('@(string.Format(Resource.valMessageRequired, "Country"))');
                    $('#spnErrorBillingCountryName').removeClass('hide-element');
                    isValid = false;
                }

                if (billingStateName == '') {
                    $('#spnErrorBillingStateName').html('@(string.Format(Resource.valMessageRequired, "State"))');
                    $('#spnErrorBillingStateName').removeClass('hide-element');
                    isValid = false;
                }
            }
            if (isValid)
                $('.address-validation-error').addClass('hide-element');

            return isValid;
        }

        $("#@Html.IdFor(m=>m.AddressDetails.Country.Currency)").change(function () {
            if ($("#@Html.IdFor(m=> m.FuelDetails.IsMarineLocation)").val() == 'True') {
                var currency = $(this).val();
                if (currency == '@((int)Currency.USD)') {
                    // for usa
                    $('#@Html.IdFor(M=>M.AddressDetails.MarineUoM)').children('option[value="@((int)UoM.Litres)"]').hide();
                    $('#@Html.IdFor(M => M.AddressDetails.MarineUoM)').children('option[value="@((int)UoM.Gallons)"]').show();
                    $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").val("@((int)UoM.Gallons)");

                    //UOM in quantity section
                    $('#MFNQuantityUoM').children('option[value="@((int)UoM.Litres)"]').hide();
                    $('#MFNQuantityUoM').children('option[value="@((int)UoM.Gallons)"]').show();
                    $('#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.UoM)').val("@((int)UoM.Gallons)");
                    $('#MFNQuantityUoM').val("@((int)UoM.Gallons)");
                }
                else {
                    // for canada
                    $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").children('option[value="@((int)UoM.Litres)"]').show();
                    $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").children('option[value="@((int)UoM.Gallons)"]').hide();
                    $("#@Html.IdFor(M=>M.AddressDetails.MarineUoM)").val("@((int)UoM.Litres)");
                    //UOM in quantity section
                    $('#MFNQuantityUoM').children('option[value="@((int)UoM.Litres)"]').show();
                    $('#MFNQuantityUoM').children('option[value="@((int)UoM.Gallons)"]').hide();
                    $('#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.UoM)').val("@((int)UoM.Litres)");
                    $('#MFNQuantityUoM').val("@((int)UoM.Litres)");
                }
            }

    });

    $('#MFNQuantityUoM').change(function (event) {
        var selectedVal = event.target.value;
        if ($("#@Html.IdFor(m => m.FuelDetails.IsMarineLocation)").val() == 'True')
        {
            if (selectedVal === '@((int)UoM.Gallons)')
            {
                  $('#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.UoM)').val("@((int)UoM.Gallons)");
            }
            else if (selectedVal === '@((int)UoM.Litres)')
            {
                 $('#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.UoM)').val("@((int)UoM.Litres)");
            }
            else  if (selectedVal === '@((int)UoM.Barrels)')
            {
                 $('#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.UoM)').val("@((int)UoM.Barrels)");
            }
            else  if (selectedVal === '@((int)UoM.MetricTons)')
            {
                 $('#@Html.IdFor(m=>m.FuelDetails.FuelQuantity.UoM)').val("@((int)UoM.MetricTons)");
            }
        }
    });
    $("#@Html.IdFor(m => m.PricingDetails.PricePerGallon)").on('keypress', function (event) {
        var defaultUoM = parseInt($('#MFNQuantityUoM').val());

        if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
            event.preventDefault();
        }

            if (defaultUoM == 4) {

                var input = $(this).val();
                if ((input.indexOf('.') != -1) && (input.substring(input.indexOf('.')).length > 2)) {
                    event.preventDefault();
                }
            }
            else {

                var input = $(this).val();
                if ((input.indexOf('.') != -1) && (input.substring(input.indexOf('.')).length > 4)) {
                    event.preventDefault();
                }
            }
    });

    $(document).on('change', '#@Html.IdFor(m => m.FuelDetails.FuelDisplayGroupId)', function (event) {
        if (event != undefined && (event.target.value != undefined && event.target.value != null && event.target.value !="")) {
            var selectedDisplayGroupId = event.target.value;
            if (selectedDisplayGroupId == '@((int)ProductDisplayGroups.OtherFuelType)')
            {
                $('.source-terminals-ddl').hide();
                $('.source-bulkplants-ddl').hide();
                $('.source-approved-terminal-ddl').hide();
                $('.source-approved-bulkplant-ddl').hide();
                hidePDITaxControls();
            }
            else
            {
                $('.source-terminals-ddl').show();
                $('.source-bulkplants-ddl').show();
                $('.source-approved-terminal-ddl').show();
                $('.source-approved-bulkplant-ddl').show();
                showPDITaxControls();
            }
        }
    });

    $(document).on('change', '#@Html.IdFor(m => m.AddressDetails.JobId)', function (event) {
        resetSourceRegionControls();
    });
     $(document).on('change', '#@Html.IdFor(m => m.AddressDetails.ZipCode)', function (event) {
        resetSourceRegionControls();
    });
    $(document).on('change', '#@Html.IdFor(m => m.AddressDetails.City)', function (event) {
        resetSourceRegionControls();
    });
    $(document).on('change', '#@Html.IdFor(m => m.AddressDetails.CountyName)', function (event) {
        resetSourceRegionControls();
    });
    $(document).on('change', '#@Html.IdFor(m => m.AddressDetails.State.Id)', function (event) {
        resetSourceRegionControls();
    });
    $(document).on('change', '#@Html.IdFor(m => m.AddressDetails.Country.Id)', function (event) {
        resetSourceRegionControls();
    });
    $(document).on('change', '#@Html.IdFor(m => m.AddressDetails.Latitude)', function (event) {
        if ($('#checkbox-geocodes').is(':checked')) {
            resetSourceRegionControls();
        }
    });
    $(document).on('change', '#@Html.IdFor(m => m.AddressDetails.Longitude)', function (event) {
         if ($('#checkbox-geocodes').is(':checked')) {
             resetSourceRegionControls();
         }
    });
    $(document).on('change', '#@Html.IdFor(m => m.FuelDetails.FuelTypeId)', function (event) {
             resetSourceRegionControls();
    });
     $(document).on('change', '#@Html.IdFor(m => m.FuelDetails.FuelTypeId)', function (event) {
             resetSourceRegionControls();
     });
     $(document).on('change', '#@Html.IdFor(m => m.PricingDetails.FuelPricingDetails.PricingCode.Id)', function (event) {
             resetSourceRegionControls();
     });
     $(document).on('change', '#@Html.IdFor(m => m.PricingDetails.PricingTypeId)', function (event) {
             resetSourceRegionControls();
     });

    function resetSourceRegionControls() {
        var regionIds = $('#@Html.IdFor(m => m.SourceRegion.SelectedSourceRegions) option:selected')
            .toArray().map(item => parseInt(item.value));
         var terminals = $('#@Html.IdFor(m => m.SourceRegion.SelectedTerminals) option:selected')
                         .toArray().map(item => parseInt(item.value));
         var bulkplants = $('#@Html.IdFor(m => m.SourceRegion.SelectedBulkPlants) option:selected')
                                    .toArray().map(item => parseInt(item.value));

        if (regionIds != null && regionIds != undefined && regionIds.length > 0) {
           $('#@Html.IdFor(m=>m.SourceRegion.SelectedSourceRegions)').prop('selectedIndex', -1).trigger("change");
        }
        if (terminals != null && terminals != undefined && terminals.length > 0) {
            $('#@Html.IdFor(m=>m.SourceRegion.SelectedTerminals)').prop('selectedIndex', -1).trigger("change");
        }
        if (bulkplants != null && bulkplants != undefined && bulkplants.length > 0) {
            $('#@Html.IdFor(m=>m.SourceRegion.SelectedBulkPlants)').prop('selectedIndex', -1).trigger("change");
        }
        $('#@Html.IdFor(m=>m.SourceRegion.ApprovedTerminalId)').prop('selectedIndex', 0).trigger("change");

        $('#auto-chkselectallterminals').prop('checked', false);
        $('#auto-chkselectallbulkplants').prop('checked', false);
    }

    $(document).on('change', '#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.FreightPricingMethod)', function (event) {
        $("#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.IsFuelSurcharge)").prop('checked', false).trigger('change');
        $("#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.IsFreightCost)").prop('checked', false).trigger('change');
        ShowHideSourceRegionAndTerminals();
    });

    $(document).on('change', '#@Html.IdFor(m => m.SourceRegion.SelectedSourceRegions)', function (event) {
        UpdateFreightRateFuelSurchargeAccessorialFees();
    });

    $(document).on('change', '#@Html.IdFor(m => m.SourceRegion.SelectedTerminals)', function (event) {
        UpdateFreightRateFuelSurchargeAccessorialFees();
    });

    $(document).on('change', '#@Html.IdFor(m => m.SourceRegion.SelectedBulkPlants)', function (event) {
        UpdateFreightRateFuelSurchargeAccessorialFees();
    });


    function UpdateFreightRateFuelSurchargeAccessorialFees() {
        var freightPricingMethod = $('input[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.FreightPricingMethod)"]:checked').val();
        if (freightPricingMethod == '@(FreightPricingMethod.Auto)') {
            var isFreightCost = $('input[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.IsFreightCost)"]:checked').val();
            var isFuelSurcharge = $('input[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.IsFuelSurchargeAuto)"]:checked').val();
            if (isFreightCost) {
                $('#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.FreightRateRuleId)').val(null);
                validationMessageFor("@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.FreightRateRuleId)", '@Resource.lblRequired');
            }
            if (isFreightCost) {
                $('#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.FuelSurchargeTableId)').val(null);
                validationMessageFor("@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.FuelSurchargeTableId)", '@Resource.lblRequired');
            }

            $('#@Html.IdFor(m => m.OrderAdditionalDetailsViewModel.AccessorialFeeId)').val(null);
            $("#showMsgInformation").css("color", "red").html('@Resource.msgFreightInformationNew');
        }
    }

    function ShowHideSourceRegionAndTerminals() {
        var freightPricingMethod = $('input[name="@Html.NameFor(m => m.OrderAdditionalDetailsViewModel.FreightPricingMethod)"]:checked').val();
        if (freightPricingMethod == '@(FreightPricingMethod.Manual)') {
            $("#terminalContainer").removeClass('hidden');
            $('.source-region-section').hide();
            $('.section-freight-rate-surcharge-accessorial').hide();
            $('.section-fuel-manual-surcharge').show();
            $('.section-accessorial-fees').show();

        }
        else if (freightPricingMethod == '@(FreightPricingMethod.Auto)')
        {
            $("#terminalContainer").addClass('hidden');
            $('.source-region-section').show();
            $('.section-freight-rate-surcharge-accessorial').show();
            $('.section-fuel-manual-surcharge').hide();
            $('.section-accessorial-fees').hide();
        }
      }


</script>

    <script type="text/javascript">
        var truckLoadDropDown = $("#@Html.IdFor(m => m.FuelDetails.FuelPricing.FuelPricingDetails.TruckLoadTypes)");
        var quantityIndicatorDropDown = $("#@Html.IdFor(m => m.FuelDetails.FuelQuantity.QuantityIndicatorTypes)");
        var defaultQuantityIndicator = '@((int)Model.FuelDetails.FuelQuantity.QuantityIndicatorTypes > 0 ? (int)Model.FuelDetails.FuelQuantity.QuantityIndicatorTypes : (int)QuantityIndicatorTypes.Net)';
    </script>
    @Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/Scripts/Main/Ftl")
}
