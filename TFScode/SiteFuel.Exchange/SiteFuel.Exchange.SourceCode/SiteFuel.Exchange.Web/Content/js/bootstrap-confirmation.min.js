/*!
 * Bootstrap Confirmation 2.4.0
 * Copyright 2013 Nimit Suwannagate <ethaizone@hotmail.com>
 * Copyright 2014-2016 Damien "Mistic" Sorel <contact@git.strangeplanet.fr>
 * Licensed under the Apache License, Version 2.0
 */
!function (t) { "use strict"; function o(t) { for (var o = window, n = t.split("."), i = n.pop(), e = 0, s = n.length; s > e; e++) o = o[n[e]]; return function () { o[i].call(this) } } var n; if (!t.fn.popover) throw new Error("Confirmation requires popover.js"); var i = function (t, o) { o.trigger = "click", this.init(t, o) }; i.VERSION = "2.4.0", i.KEYMAP = { 13: "Enter", 27: "Escape", 39: "ArrowRight", 40: "ArrowDown" }, i.DEFAULTS = t.extend({}, t.fn.popover.Constructor.DEFAULTS, { placement: "top", title: "Are you sure?", popout: !1, singleton: !1, copyAttributes: "href target", buttons: null, onConfirm: t.noop, onCancel: t.noop, btnOkClass: "btn-sm btn-primary", btnOkLabel: "Yes", btnCancelClass: "btn-sm btn-danger", btnCancelLabel: "No", template: '<div class="popover confirmation"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"><p class="confirmation-content"></p><div class="confirmation-buttons text-center"><div class="btn-group"><a href="#" class="btn" data-apply="confirmation"></a><a href="#" class="btn" data-dismiss="confirmation"></a></div></div></div></div>' }), i.prototype = t.extend({}, t.fn.popover.Constructor.prototype), i.prototype.constructor = i, i.prototype.getDefaults = function () { return i.DEFAULTS }, i.prototype.init = function (o, n) { if (t.fn.popover.Constructor.prototype.init.call(this, "confirmation", o, n), (this.options.popout || this.options.singleton) && !n.rootSelector) throw new Error("The rootSelector option is required to use popout and singleton features since jQuery 3."); this.options._isDelegate = !1, n.selector ? this.options._selector = this._options._selector = n.rootSelector + " " + n.selector : n._selector ? (this.options._selector = n._selector, this.options._isDelegate = !0) : this.options._selector = n.rootSelector; var i = this; this.options.selector ? this.$element.on(this.options.trigger, this.options.selector, function (t, o) { o || (t.preventDefault(), t.stopPropagation(), t.stopImmediatePropagation()) }) : (this.options._attributes = {}, this.options.copyAttributes ? "string" == typeof this.options.copyAttributes && (this.options.copyAttributes = this.options.copyAttributes.split(" ")) : this.options.copyAttributes = [], this.options.copyAttributes.forEach(function (t) { this.options._attributes[t] = this.$element.attr(t) }, this), this.$element.on(this.options.trigger, function (t, o) { o || (t.preventDefault(), t.stopPropagation(), t.stopImmediatePropagation()) }), this.$element.on("show.bs.confirmation", function (o) { i.options.singleton && t(i.options._selector).not(t(this)).filter(function () { return void 0 !== t(this).data("bs.confirmation") }).confirmation("hide") })), this.options._isDelegate || (this.eventBody = !1, this.uid = this.$element[0].id || this.getUID("group_"), this.$element.on("shown.bs.confirmation", function (o) { i.options.popout && !i.eventBody && (i.eventBody = t("body").on("click.bs.confirmation." + i.uid, function (o) { t(i.options._selector).is(o.target) || (t(i.options._selector).filter(function () { return void 0 !== t(this).data("bs.confirmation") }).confirmation("hide"), t("body").off("click.bs." + i.uid), i.eventBody = !1) })) })) }, i.prototype.hasContent = function () { return !0 }, i.prototype.setContent = function () { var o = this, i = this.tip(), e = this.getTitle(), s = this.getContent(); if (i.find(".popover-title")[this.options.html ? "html" : "text"](e), i.find(".confirmation-content").toggle(!!s).children().detach().end()[this.options.html ? "string" == typeof s ? "html" : "append" : "text"](s), i.on("click", function (t) { t.stopPropagation() }), this.options.buttons) { var r = i.find(".confirmation-buttons .btn-group").empty(); this.options.buttons.forEach(function (n) { r.append(t('<a href="#"></a>').addClass(n["class"] || "btn btn-xs btn-default").html(n.label || "").attr(n.attr || {}).prepend(t("<i></i>").addClass(n.icon), " ").one("click", function (i) { "#" === t(this).attr("href") && i.preventDefault(), n.onClick && n.onClick.call(o.$element), n.cancel ? (o.getOnCancel().call(o.$element, n.value), o.$element.trigger("canceled.bs.confirmation", [n.value])) : (o.getOnConfirm().call(o.$element, n.value), o.$element.trigger("confirmed.bs.confirmation", [n.value])), o.inState && (o.inState.click = !1), o.hide() })) }, this) } else i.find('[data-apply="confirmation"]').addClass(this.options.btnOkClass).html(this.options.btnOkLabel).attr(this.options._attributes).prepend(t("<i></i>").addClass(this.options.btnOkIcon), " ").off("click").one("click", function (n) { "#" === t(this).attr("href") && n.preventDefault(), o.getOnConfirm().call(o.$element), o.$element.trigger("confirmed.bs.confirmation"), o.$element.trigger(o.options.trigger, [!0]), o.hide() }), i.find('[data-dismiss="confirmation"]').addClass(this.options.btnCancelClass).html(this.options.btnCancelLabel).prepend(t("<i></i>").addClass(this.options.btnCancelIcon), " ").off("click").one("click", function (t) { t.preventDefault(), o.getOnCancel().call(o.$element), o.$element.trigger("canceled.bs.confirmation"), o.inState && (o.inState.click = !1), o.hide() }); i.removeClass("fade top bottom left right in"), i.find(".popover-title").html() || i.find(".popover-title").hide(), n = this, t(window).off("keyup.bs.confirmation").on("keyup.bs.confirmation", this._onKeyup.bind(this)) }, i.prototype.destroy = function () { n === this && (n = void 0, t(window).off("keyup.bs.confirmation")), t.fn.popover.Constructor.prototype.destroy.call(this) }, i.prototype.hide = function () { n === this && (n = void 0, t(window).off("keyup.bs.confirmation")), t.fn.popover.Constructor.prototype.hide.call(this) }, i.prototype._onKeyup = function (o) { if (!this.$tip) return n = void 0, void t(window).off("keyup.bs.confirmation"); var e, s = o.key || i.KEYMAP[o.keyCode || o.which], r = this.$tip.find(".confirmation-buttons .btn-group"), a = r.find(".active"); switch (s) { case "Escape": this.hide(); break; case "ArrowRight": e = a.length && a.next().length ? a.next() : r.children().first(), a.removeClass("active"), e.addClass("active").focus(); break; case "ArrowLeft": e = a.length && a.prev().length ? a.prev() : r.children().last(), a.removeClass("active"), e.addClass("active").focus() } }, i.prototype.getOnConfirm = function () { return this.$element.attr("data-on-confirm") ? o(this.$element.attr("data-on-confirm")) : this.options.onConfirm }, i.prototype.getOnCancel = function () { return this.$element.attr("data-on-cancel") ? o(this.$element.attr("data-on-cancel")) : this.options.onCancel }; var e = t.fn.confirmation; t.fn.confirmation = function (o) { var n = "object" == typeof o && o || {}; return n.rootSelector = this.selector || n.rootSelector, this.each(function () { var e = t(this), s = e.data("bs.confirmation"); (s || "destroy" != o) && (s || e.data("bs.confirmation", s = new i(this, n)), "string" == typeof o && (s[o](), "hide" == o && s.inState && (s.inState.click = !1))) }) }, t.fn.confirmation.Constructor = i, t.fn.confirmation.noConflict = function () { return t.fn.confirmation = e, this } }(jQuery);