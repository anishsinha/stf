@model StatementPdfViewModel
@using System.Threading
@{
	bool IsTaxModified = false;
	Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(Model.Culture);
}
<style type="text/css">
	* {
		margin: 0 auto;
	}

	.hdr-common {
		margin: 0;
	}

	td, th {
		padding: 0;
	}

	.mh0 {
		margin-left: 0px !important;
		margin-right: 0px !important;
	}

    .content {
        width: 100%;
        max-width: 100%;
        border: dashed 1px #979797;
        margin-top: 10px;
        margin-bottom: 40px;
        page-break-after: always;
    }

	.special-instuctions {
		list-style-type: none;
	}

		.special-instuctions li:before {
			content: " - ";
		}

	.content1 {
		width: 100%;
		max-width: 100%;
		margin: 0;
	}

	.tbl-statement h2 {
		font-weight: normal;
		margin-top: 15px;
		margin-bottom: 5px;
		color: #1062d1;
		font-size: 18px;
	}

	.img-logo {
		max-height: 100px;
	}

	.txt1 {
		font-size: 12px;
		line-height: 20px;
		text-align: left !important;
		vertical-align: top;
	}

	.txt2 {
		font-size: 12px;
		font-weight: normal;
		text-align: right !important;
		padding-right: 10px;
		vertical-align: top;
	}

	.txt3 {
		font-size: 12px;
		line-height: 20px;
		padding-left: 10px;
		text-align: left !important;
	}

	.txt_rig {
		text-align: right !important;
		padding-right: 10px;
	}

	.txt4 {
		font-size: 13px;
		line-height: 20px;
		text-align: right !important;
		padding-right: 10px;
	}

	.txt5 {
		font-size: 12px;
		line-height: 20px;
		text-align: left !important;
	}

	.border {
		background: #9f9f9f;
		border: 0px;
		height: 2px;
		margin-bottom: 0;
		width: 98%;
	}

	.border-blue {
		background: #1062d1;
		border: 0px;
		height: 2px;
		margin-bottom: 0;
		width: 98%;
	}

	.tbl-statement table tr th {
		font-size: 13px;
		font-weight: bold;
		color: #5a5a5a;
	}

	.thead {
		text-align: left;
		padding-left: 10px;
	}

	.border-top-blue, .border-top-blue > td, .border-top-blue > th {
		border-top: 2px solid #244397;
	}

	.condition {
		font-size: 10px;
		line-height: 20px;
		text-align: left !important;
		padding-right: 35px;
	}

	.total {
		font-size: 13px;
		border: 2px solid #273679;
		border-right: 0px;
	}

	.full-border {
		font-size: 13px;
		border: 2px solid #1062d1;
	}

	.note {
		font-size: 13px;
		border: 2px solid #273679;
		padding: 10px;
	}

	.tbl-invoice th, .tbl-invoice td {
		padding: 5px;
		text-align: left;
		border-bottom: 1px solid lightgrey;
	}

	.t_left {
		text-align: left !important;
	}

	.t_right {
		text-align: right !important;
		padding-right: 10px;
	}

	.t_italic {
		font-style: italic;
	}

	.content1 tr td:empty {
		display: none;
	}

	.ml30 {
		margin-left: 30px;
	}

	.pr-10 {
		padding-right: 10px;
	}

	.pr-15 {
		padding-right: 15px;
	}

	.pl-10 {
		padding-left: 10px;
	}

	.pr-5 {
		padding-right: 5px;
	}

	.pl-5 {
		padding-left: 5px;
	}

	.pl-15 {
		padding-left: 15px;
	}

	.pt-5 {
		padding-top: 5px;
	}

	.pb-5 {
		padding-bottom: 5px;
	}

	.pb-10 {
		padding-bottom: 10px;
	}

	.pb-15 {
		padding-bottom: 15px;
	}

	.pl-25 {
		padding-left: 25px;
	}

	.pr-0 {
		padding-right: 0px
	}

	.pl-0 {
		padding-left: 0px
	}

	.pa-5 {
		padding: 5px;
	}

	th {
		height: 30px;
	}

	.border-top-blue3 {
		border-top: 3px solid #244397;
	}

	.border-top-gray,
	.border-top-gray > td {
		border-top: 2px solid #d3d3d3;
	}

	.border-all-blue {
		border: 2px solid #244397;
	}

	.po-description {
		width: 98%;
	}

		.po-description td {
			padding-top: 3px;
			padding-bottom: 3px;
		}

	.po-innertable {
		width: 100%;
	}

	.po-logo {
		max-height: 100px;
	}

	.pt10 {
		padding-top: 10px;
	}

	.pb10 {
		padding-bottom: 10px;
	}

	.label-primary,
	.badge-primary {
		background-color: #1ab394;
		color: #FFFFFF;
		border-radius: .25em;
		padding: .2em .6em .3em;
	}

	.label-danger,
	.badge-danger {
		background-color: #ed5565;
		color: #FFFFFF;
		border-radius: .25em;
		padding: .2em .6em .3em;
	}

	.border-top-lightgray > td {
		border-top: 1px solid #e7e3e3;
	}

	.no-border tr:last-child td {
		border-bottom: 0px;
	}

	.font-extrabold {
		font-weight: 600
	}


	.txt-highlight, .txt-highlight label {
		color: #dc3c0c !important;
	}

	.tbl-additionalfee tr:first-child td {
		border-top: none;
	}

	.font-bold {
		font-weight: bold;
	}

	.fs13 {
		font-size: 13px;
	}

	.invoiceamount-section tr td {
		white-space: nowrap !important;
	}

	.nowrap {
		white-space: nowrap
	}

	.nowrap {
		white-space: nowrap
	}

	.pr {
		position: relative;
	}

	.bg-void {
		border: 10px solid rgba(255, 0, 0, .4);
		font-size: 50px;
		color: rgba(255, 0, 0, .4);
		padding: 15px 20px;
		width: 250px;
		position: absolute;
		top: 150px;
		left: 60%;
		margin-left: -250px;
		-ms-transform: rotate(-20deg);
		-webkit-transform: rotate(-20deg);
		transform: rotate(-20deg);
	}

	.tbl-statement h4, .tbl-statement h5 {
		margin-bottom: 5px;
		margin-top: 5px;
		padding-top: 0;
		padding-bottom: 0;
		font-size: 13px;
		color: #5a5a5a !important;
	}


	.tbl-statement h1 {
		font-size: 21px;
		font-weight: normal;
		margin-top: 15px;
		margin-bottom: 15px;
		color: #2b2b2b;
	}
</style>
<div class="col-sm-12">
	<div class="row well">
		<div class="col-sm-12">
			<table width="100%" border="0" cellpadding="0" cellspacing="0" style=" font-family: 'Open Sans',Tahoma,Calibri,verdana;font-weight: normal;color: #5a5a5a;font-size:12px;" class="mb15 tbl-statement">
				<tr>
					<td>
						<table border="0" width="100%">
							<tr>
								<td class="pr" valign="top" align="center" colspan="2">
									<h1 class="mb10">@Resource.gridColumnStatementNumber: @Model.StatementNumber</h1>
									@if (!Model.IsActive)
									{
										<div class="bg-void">@Resource.lblVoid</div>
									}
								</td>
							</tr>
							<tr><td class="border-blue" colspan="2"></td></tr>
							<tr>
								<td width="70%" class="pb-15 pt10" valign="top">
									<table class="hdr-common" border="0" cellspacing="0" cellpadding="10" align="left">
										<tr>
											@if (Model.Image != null)
											{
												<td class="pr-10"><img id="image-ctrl" class="po-logo" src="@Html.ImageSrc(Model.Image.Data)" alt="@Model.SupplierCompany" /></td>
}
											<td valign="top">
												<h4><b>@Model.SupplierCompany</b></h4>
												@Model.SupplierAddress.Address<br />
												@Model.SupplierAddress.City<br />
												@Model.SupplierAddress.StateCode @Model.SupplierAddress.ZipCode<br />
												<span class="phone">@Model.PhoneNumber</span>
											</td>
										</tr>
									</table>
									<table align="left" class="hdr-common ml30">
										<tr>
											<td colspan="2">
												<h4><b>@Resource.headingBillingAddress</b></h4>
												@Model.CustomerCompany<br />
												@Model.CustomerAddress.Address<br />
												@Model.CustomerAddress.City, @Model.CustomerAddress.StateCode @Model.CustomerAddress.ZipCode
											</td>

										</tr>
									</table>
									<table align="left" class="hdr-common ml30">
										<tr>
											<td colspan="2" align="left">
												<h4><b>@Resource.headingContactPerson</b></h4>
												@Model.ContactPerson.Name<br />
												<span class="phone">
													@Model.ContactPerson.PhoneNumber
												</span><br />
												@Model.ContactPerson.Email
											</td>
										</tr>
									</table>
								</td>
								<td width="30%" class="pb-15 pt10">
									<table class="hdr-common" border="0" cellspacing="0" cellpadding="0" align="right">
										<tr>
											<td class="t_right txt1 nowrap"><b>@Resource.gridColumnStatementDate</b></td>
											<td class="nowrap">: @Model.StatementDate</td>
										</tr>
										<tr>
											<td class="t_right txt1 nowrap"><b>@Resource.gridColumnBillingPeriod</b></td>
											<td class="nowrap">: @Model.BillingPeriod</td>
										</tr>
										<tr>
											<td class="t_right txt1 nowrap"><b>@Resource.lblStatementReceipt</b></td>
											<td class="nowrap">: @Model.StatementReceipt</td>
										</tr>
										@if (Model.Version > 1)
										{
											<tr>
												<td class="t_right txt1 nowrap"><b>@Resource.gridColumnVersion</b></td>
												<td class="nowrap">: @string.Format("v{0}", @Model.Version)</td>
											</tr>
}
										<tr>
											<td class="t_right txt1 nowrap"><b>@Resource.gridColumnDueDate</b></td>
											<td class="nowrap">: @Model.DueDate</td>
										</tr>
										<tr>
											<td class="t_right txt1 nowrap"><b>@Resource.lblCustomerId</b></td>
											<td class="nowrap">: @Model.CustomerId</td>
										</tr>
									</table>
								</td>
							</tr>
							<tr><td class="border-blue" colspan="2"></td></tr>
							<tr>
								<td>
									<h1 class="mb10">@Resource.headingStatementSummary</h1>
								</td>
							</tr>
							<tr>
								<td class="pb10" colspan="2">
                                    @{ 
                                        var hasAnyPaidInvoice = Model.StatementSummary.Any(t => t.StatusId == InvoiceStatus.PartiallyPaid || t.StatusId == InvoiceStatus.Paid);
                                    }
									<table width="100%" border="0" cellspacing="0" cellpadding="0" class="tbl-invoice">
                                        <tr>
                                            <th>@Resource.lblInvoiceNumber</th>
                                            <th>@Resource.lblFuelType</th>
                                            <th>@Resource.gridColumnDeliveryDateAndTime</th>
                                            <th class="t_right">@Resource.gridColumnGallonsDelivered</th>
                                            <th class="t_right">@Resource.lblRackPPG</th>
                                            @if (hasAnyPaidInvoice)
                                            {
                                                <th>@Resource.lblPaymentStatus</th>
                                            }
                                            <th class="t_right">@Resource.gridColumnInvoiceAmount (@Resource.lblCurrencyCode)</th>
                                        </tr>
										@foreach (var invoice in Model.StatementSummary)
										{
											<tr>
												<td>@invoice.InvoiceNumber</td>
												<td>@invoice.FuelType</td>
												<td>@invoice.DropDate</td>
												<td class="t_right">@invoice.TotalQuantityDropped</td>
												<td class="t_right">$@invoice.Ppg</td>
                                                @if (hasAnyPaidInvoice)
                                                {
                                                    <td>@(invoice.StatusId == InvoiceStatus.Paid ? Resource.lblPaid : (invoice.StatusId == InvoiceStatus.PartiallyPaid ? Resource.lblPartiallyPaid : Resource.lblHyphen))</td>
                                                }
                                                <td class="t_right">@((invoice.TotalAmount).GetInvoiceAmountValue(4, Resource.constSymbolCurrency))</td>
											</tr>
}
									</table>
								</td>
							</tr>
							<tr>
								<td colspan="2" align="right" class="pb-15">
									<table class="full-border hdr-common" align="right">
										<tr>
											<td class="pa-5">
												<b> @Resource.lblTotalStatementValue: <span class="pl-10">@((Model.StatementValue).GetInvoiceAmountValue(2, Resource.constSymbolCurrency))</span></b>
											</td>
										</tr>
									</table>
								</td>
							</tr>							
                            <tr><td class="border-blue" colspan="2"></td></tr>
                            @if (Model.InvoicePaymentSummary != null && Model.InvoicePaymentSummary.Any())
                            {
							    <tr>
								    <td>
									    <h1 class="mb10">@Resource.headingPaymentInformation</h1>
								    </td>
							    </tr>
                                <tr>
                                    <td class="pb10" colspan="2">
                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        @Resource.lblInvoiceNumber
                                                    </th>
                                                    <th>
                                                        @Resource.lblPaymentDate
                                                    </th>
                                                    <th>
                                                        @Resource.headingMethod
                                                    </th>
                                                    <th>
                                                        @Resource.gridColumnAmount (@Resource.lblCurrencyCode)
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var payment in Model.InvoicePaymentSummary)
                                                {
                                                    <tr>
                                                        <td>
                                                            @payment.DisplayInvoiceNumber
                                                        </td>
                                                        <td>
                                                            @payment.PaymentDate.ToString(Resource.constFormatDate)
                                                        </td>
                                                        <td>
                                                            @payment.PaymentMethod
                                                        </td>
                                                        <td>
                                                            @payment.AmountPaid.GetInvoiceAmountValue(2, Resource.constSymbolCurrency)
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                            <tfoot>
                                                <tr class="font-bold">
                                                    <td colspan="3" class="text-right">
                                                        @Resource.headingTotalPaid
                                                    </td>
                                                    <td>
                                                        @Model.InvoicePaymentSummary.Sum(t => t.AmountPaid).GetInvoiceAmountValue(2, Resource.constSymbolCurrency)
                                                    </td>
                                                </tr>
                                                <tr class="font-bold">
                                                    <td colspan="3" class="text-right">
                                                        @Resource.headingBalanceDue
                                                    </td>
                                                    <td>
                                                        @Model.InvoicePaymentSummary.GroupBy(t => t.DisplayInvoiceNumber).Select(t => t.Min(t1 => t1.BalanceRemaining)).Sum(t => t).GetInvoiceAmountValue(2, Resource.constSymbolCurrency)
                                                    </td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </td>
                                </tr>
                                <tr><td class="border-blue" colspan="2"></td></tr>
                            }
						</table>
					</td>
				</tr>
				<tr>
					<td>
						<h1 class="mb10">@Resource.headingInvoices</h1>
					</td>
				</tr>
				<tr>
					<td>
						@foreach (var response in Model.Invoices)
						{
							IsTaxModified = false;
							<table bgcolor="#ffffff" class="content" align="center" cellpadding="0" cellspacing="0" border="0">
								<tr>
									<td class="pl-10 pr" valign="top" align="center">
										<h2>@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice ? Resource.headingCreditMemo : Resource.tabheadingInvoice) @response.InvoiceNumber</h2>
										@if (!Model.IsActive)
										{
											<div class="bg-void">@Resource.lblVoid</div>
}
									</td>
								</tr>
								<tr>
									<td>
										<table class="content1" align="center" border="0" cellpadding="0" cellspacing="0">
											<tr>
												<td colspan="3" class="pl-15 pr-15">
													<table border="0" align="left" class="hdr-common">
														<tr>
															<th align="left">@Resource.lblShippedTo:</th>
														</tr>
														<tr>
															<td class="txt1" align="left">
																@response.Job.JobName<br>
																@if (!string.IsNullOrWhiteSpace(response.DisplayJobID))
																{
																	<span>(@response.DisplayJobID)</span><br>
}
																@if (!string.IsNullOrWhiteSpace(response.WBSNumber))
																{
																	<span>{@response.WBSNumber}</span><br />
}
																@if (response.ShippingLocation != null)
																{
																	<span>@response.ShippingLocation.Address</span><br>
																	<span>
																		@response.ShippingLocation.City
																	</span>
																	<br>
}
																else
																{
																	<span>
																		@response.Job.Address
																	</span><br>
																	<span>@response.Job.City, @response.Job.StateCode @response.Job.ZipCode</span><br>
}
																@Resource.lblOrderNumber : @response.PoNumber<br>
															</td>
														</tr>
													</table>
													@if (response.PickUpLocation != null)
													{
														<table border="0" align="left" class="hdr-common" style="display:inline-block">
															<tr>

																<th align="left" class="pl-10">@Resource.headingPickUpLocation:</th>

															</tr>
															<tr>
																<td class="txt1 pl-10" align="left" width="16%" style="padding-right:10px">
																	@response.PickUpLocation.Address<br>
																	@response.PickUpLocation.City<br>
																</td>
															</tr>
														</table>
													}
													<table class="hdr-common" border="0" cellspacing="0" cellpadding="0" align="right">
														@if (!string.IsNullOrEmpty(response.FtlDetails.BOL))
														{
															<tr>
																<td class="t_right txt1 nowrap"><b>@Resource.lblBOL</b></td>
																<td class="nowrap">: @(!(string.IsNullOrWhiteSpace(response.FtlDetails.BOL)) ? response.FtlDetails.BOL : Resource.lblHyphen)</td>
															</tr>
															<tr>
																<td class="t_right txt1 nowrap"><b>@Resource.lblGrossQuantity</b></td>
																<td class="nowrap">: @(response.FtlDetails.GrossGallons.HasValue && response.FtlDetails.GrossGallons > 0 ? string.Format("{0:N4}", response.FtlDetails.GrossGallons) + " " + response.FuelDetails.UoM.ToString() : Resource.lblHyphen)</td>
															</tr>
															<tr>
																<td class="t_right txt1 nowrap"><b>@Resource.lblNetQuantity</b></td>
																<td class="nowrap">: @(response.FtlDetails.NetGallons.HasValue && response.FtlDetails.NetGallons > 0 ? string.Format("{0:N4}", response.FtlDetails.NetGallons) + " " + response.FuelDetails.UoM.ToString() : Resource.lblHyphen)</td>
															</tr>
														}
														else if (response.IsFTL)
														{
															<tr>
																<td class="t_right txt1 nowrap"><b>@Resource.lblLiftTicketNumber</b></td>
																<td class="nowrap">: @(!(string.IsNullOrWhiteSpace(response.FtlDetails.LiftTicketNumber)) ? response.FtlDetails.LiftTicketNumber : Resource.lblHyphen)</td>
															</tr>
															<tr>
																<td class="t_right txt1 nowrap"><b>@Resource.lblLiftQuantity</b></td>
																<td class="nowrap">: @(response.FtlDetails.LiftQuantity.HasValue && response.FtlDetails.LiftQuantity > 0 ? string.Format("{0:N4}", response.FtlDetails.LiftQuantity) + " " + response.FuelDetails.UoM.ToString() : Resource.lblHyphen)</td>
															</tr>
														}
														@if (response.Version > 1 && response.InvoiceTypeId != (int)InvoiceType.DigitalDropTicketManual && response.InvoiceTypeId != (int)InvoiceType.DigitalDropTicketMobileApp)
														{
															<tr>
																<td class="t_right txt1 nowrap"><b>@Resource.gridColumnVersion</b></td>
																<td class="nowrap">: @string.Format("v{0}", response.Version)</td>
															</tr>
														}
														@if (response.QbInvoiceNumber != "" && response.QbInvoiceNumber != null)
														{
															<tr>
																<td class="t_right txt1 nowrap"><b>@Resource.lblQbInvoiceNumber</b></td>
																<td class="nowrap">: @response.QbInvoiceNumber</td>
															</tr>
}
													</table>


												</td>
											</tr>
											<tr>
												<td colspan="3" style="padding-top:20px;"> <div class="border"></div></td>
											</tr>
											<tr>
												<td colspan="3">
													<table id="invoice-pricing" border="0" width="98%" cellpadding="0" cellspacing="0" class="po-description">
														<tr class="border-bottom-blue">
															<th width="33%" class="t_left">@Resource.lblFuelType/@Resource.lblDescription</th>
															<th width="22%" class="t_left pl-10">@Resource.gridColumnDeliveryDateAndTime</th>
															<th class="txt_rig" width="15%">@Resource.lblQuantity</th>
															@if (!response.ShouldHidePricing())
															{
																<th class="txt_rig" width="14.6%">@(string.Format(Resource.lblRackPP, response.Currency == Currency.USD ? "PPG" : "PPL"))</th>
																<th class="txt_rig" width="15%">@Resource.gridColumnAmount</th>
}
														</tr>
														@if (response.InvoiceTypeId == (int)InvoiceType.DryRun)
														{
															<tr>
																<td class="txt3 t_left">@Resource.lblDryRunFee<br />@response.TerminalName</td>
																<td class="txt3 t_left" valign="top">@response.DropDate</td>
																<td class="txt3 txt_rig" valign="top"><span>-</span></td>
																@if (!response.ShouldHidePricing())
																{
																	<td class="txt3 txt_rig" valign="top"><span>-</span></td>
																	<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@response.BasicAmount.ToString("N2") @response.Currency</td>
																}
															</tr>
}
														else if (response.InvoiceTypeId == (int)InvoiceType.TankRental)
														{
															<tr><td colspan="5"><div class="border" style="width:100%;margin-bottom:-3px;"></div></td></tr>
															if (response.FuelRequestFees.Any(t => t.FeeTypeId.Equals(((int)FeeType.TankRental).ToString())))
															{
																foreach (var item in response.FuelRequestFees.Where(t => t.FeeTypeId.Equals(((int)FeeType.TankRental).ToString())))
																{
																	<tr>
																		<td class="txt3 t_left">Tank Rental for @item.OtherFeeDescription</td>
																		@if (item.EndTime.HasValue)
																		{
																			<td class="txt3 t_left" valign="top">@item.StartTime.Value.ToString(Resource.constFormatDate) -  @item.EndTime.Value.ToString(Resource.constFormatDate)</td>
}
																		else
																		{
																			<td class="txt3 t_left" valign="top">@item.StartTime.Value.ToString(Resource.constFormatDate)</td>
}
																		<td class="txt3 txt_rig" valign="top"><span>@item.FeeSubQuantity.GetPreciseValue(2)</span></td>
																		@if (!response.ShouldHidePricing())
																		{
																			<td class="txt3 txt_rig" valign="top"><span>@Resource.constSymbolCurrency@item.Fee.Value.ToString("N2")</span></td>
																			<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@item.TotalFee.ToString("N2") @response.Currency</td>
}
																	</tr>
}
																<tr><td colspan="5"><div class="border" style="width:100%;margin-bottom:-3px;"></div></td></tr>
}
															if (response.FuelRequestFees.Any(t => !t.FeeTypeId.Equals(((int)FeeType.TankRental).ToString())))
															{
																foreach (var fee in response.FuelRequestFees.Where(t => !t.FeeTypeId.Equals(((int)FeeType.TankRental).ToString()) && !t.FeeTypeId.Equals(((int)FeeType.ProcessingFee).ToString()) && t.Fee.HasValue))
																{
																	var feeTypeId = Convert.ToInt32(fee.FeeTypeId);
																	<tr class="border-top-lightgray">
																		@if (fee.FeeSubTypeId == (int)FeeSubType.FlatFee)
																		{
																			<td class="txt3" valign="top">
																				<span class="font-extrabold">@(((FeeType)feeTypeId).GetDisplayName())</span>
																				<span class="font-italic">@Resource.lblFlatFee</span>
																			</td>
																			<td class="txt3 txt_rig font-italic" valign="top"> </td>
																			<td class="txt3 txt_rig" valign="top">1</td>
																			<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.TotalFee.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																			<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.TotalFee.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
}
																	</tr>
}
																<tr><td colspan="5"><div class="border" style="width:100%;margin-bottom:-3px;"></div></td></tr>
}
														}
														else
														{
															if (response.InvoiceTypeId != (int)InvoiceType.Balance)
															{
															<tr class="border-top-gray">
																<td class="break-word" valign="top">
																	@if (response.FuelDetails.FuelDisplayGroupId == (int)ProductDisplayGroups.OtherFuelType && !string.IsNullOrWhiteSpace(response.FuelDetails.FuelDescription))
																	{
																		<span>@response.FuelDetails.FuelType/@response.FuelDetails.FuelDescription</span>
}
																	else
																	{
																		<span>
																			@response.FuelDetails.FuelType
																		</span>
}
																	<br />
																	@if (!string.IsNullOrWhiteSpace(response.TerminalName))
																	{
																		<i class="pl15" id="lblTerminalName">@Resource.lblTerminal: @response.TerminalName</i>
}
																</td>
																<td class="txt3" valign="top">@response.DropDate</td>
																<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetCommaSeperatedValue()</td>
																@if (!response.ShouldHidePricing())
																{
																	<td class="txt3 txt_rig" valign="top" id="auto-txtRackPPGAmount">
																		@if (!response.IsBuyAndSellOrder)
																		{
																			<div>@string.Concat(@Resource.constSymbolCurrency, @response.PricePerGallon.ToString(ApplicationConstants.DecimalFormat4WOZero), " ", response.Currency)</div>
if (response.FuelDetails.PricingTypeId == (int)PricingType.RackAverage || response.FuelDetails.PricingTypeId == (int)PricingType.RackLow || response.FuelDetails.PricingTypeId == (int)PricingType.RackHigh)
																			{
																				<div>(@response.PricePerGallonDisplay)</div>
}
																		}
																		else if (response.IsBuyAndSellOrder && response.BuySellDetails.IsBuyPriceInvoice)
																		{
																			<div>@Resource.constSymbolCurrency@response.BuySellDetails.BuyPrice.ToString(ApplicationConstants.DecimalFormat4WOZero) @response.Currency</div>
																			<div class="fs12">(@Resource.constSymbolCurrency@response.BuySellDetails.BasePrice.ToString(ApplicationConstants.DecimalFormat4WOZero) + @Resource.constSymbolCurrency@response.BuySellDetails.BrokerMarkUp.ToString(ApplicationConstants.DecimalFormat4WOZero)) @response.Currency</div>
																			<div class="fs12">(@response.BuySellDetails.BuyPriceDetail)</div>
}
																		else if (response.IsBuyAndSellOrder && !response.BuySellDetails.IsBuyPriceInvoice)
																		{
																			<div>@Resource.constSymbolCurrency@response.BuySellDetails.SellPrice.ToString(ApplicationConstants.DecimalFormat4WOZero)</div>
																			<div class="fs12">(@Resource.constSymbolCurrency@response.BuySellDetails.BuyPrice.ToString(ApplicationConstants.DecimalFormat4WOZero) + @Resource.constSymbolCurrency@response.BuySellDetails.SupplierMarkUp.ToString(ApplicationConstants.DecimalFormat4WOZero)) @response.Currency</div>
																			<div class="fs12">(@response.BuySellDetails.SellPriceDetail)</div>
}
																	</td>
																	<td class="txt3 txt_rig" valign="top" id="auto-txtAmount">@((response.BasicAmount).GetInvoiceAmountValue(2, @Resource.constSymbolCurrency)) @response.Currency</td>
}
															</tr>
													<!--Assets information-->		
																if (response.Assets != null && response.Assets.Count > 0)
																{
																<tr>
																	<td colspan="5" class="pl-25 t_left">
																		<table width="100%" class="no-border" border="0">
																			@foreach (var assets in response.Assets)
																			{
																				var isFirstRow = true;
																				foreach (var asset in assets)
																				{
																					<tr class="t_italic @(isFirstRow ? " border-top-lightgray" : "" )">
																						<td class="txt5" valign="top" width="31.7%">@(isFirstRow ? asset.AssetName + (!String.IsNullOrEmpty(asset.SubcontractorName) ? $" {Resource.lblSingleHyphen} {asset.SubcontractorName}" : "") : " ")</td>
																						<td class="txt3" valign="top" width="22%">@asset.DropDate.ToString(Resource.constFormatDate) @(asset.DropDate.DateTime.ToString(Resource.constFormat12HourTime2)) - @(asset.EndTime)</td>
																						<td class="txt3 txt_rig" valign="top" width="15.8%">@asset.DropGallons.GetCommaSeperatedValue()</td>
																						@if (!response.ShouldHidePricing())
																						{
																							<td class="txt3 txt_rig" valign="top" width="15.1%">
																								<div>@Resource.constSymbolCurrency@response.PricePerGallon.ToString(ApplicationConstants.DecimalFormat4WOZero) @response.Currency</div>
																							</td>
																							<td class="txt3 txt_rig" valign="top" width="16%">
																								<div>@(((decimal)(asset.DropGallons * response.PricePerGallon)).GetInvoiceAmountValue(2, Resource.constSymbolCurrency)) @response.Currency</div>
																							</td>
}
																					</tr>isFirstRow = false;
																				}
																			}
																		</table>
																	</td>
																</tr>
}
																if (response.NoFuelNeededAssetCount > 0)
																{
																<tr><td colspan="5" class="txt3">@Resource.lblNoFuelNeeded: <b>@response.NoFuelNeededAssetCount</b></td></tr>
}
																if (response.AssetNotAvailableCount > 0)
																{
																<tr><td colspan="5" class="txt3">@Resource.lblAssetNotAvailable: <b>@response.AssetNotAvailableCount</b></td></tr>
}
															}
															<tr><td colspan="5"><div class="border" style="width:100%;margin-bottom:-3px;"></div></td></tr>if (!response.ShouldHidePricing())
															{
																foreach (var fee in response.FuelRequestFees.Where(t => t.FeeSubTypeId != (int)FeeSubType.NoFee))
																{

																	if (fee.FeeTypeId == ((int)FeeType.FreightFee).ToString())
																	{
																		<tr class="border-top-lightgray">
																			@if (response.FreightFeeSubTypeId == (int)FeeSubType.ByAssetCount)
																			{
																				<td class="txt3" valign="top"><span class="font-extrabold">@Resource.lblFreight:</span> <span class="font-italic">@Resource.lblPerAsset</span></td>
																				<td class="txt3 txt_rig font-italic" valign="top"> </td>
																				<td class="txt3 txt_rig" valign="top">&nbsp;</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@response.FreightFee.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@response.FreightFeeAmount.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																			}
																			else if (response.FreightFeeSubTypeId == (int)FeeSubType.PerGallon)
																			{
																				<td class="txt3" valign="top"><span class="font-extrabold">@Resource.lblFreight:</span> <span class="font-italic">@Resource.lblPerGallon</span></td>
																				<td class="txt3 txt_rig font-italic" valign="top"> </td>
																				<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetPreciseValue(2).GetCommaSeperatedValue()</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@response.FreightFee.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@response.FreightFeeAmount.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																			}
																			else if (response.FreightFeeSubTypeId == (int)FeeSubType.PerRoute)
																			{
																				<td class="txt3" valign="top"><span class="font-extrabold">@Resource.lblFreight:</span> <span class="font-italic">@Resource.lblPerRoute</span></td>
																				<td class="txt3 txt_rig font-italic" valign="top"> </td>
																				<td class="txt3 txt_rig" valign="top">&nbsp;</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@response.FreightFee.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@response.FreightFeeAmount.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
}
																			else if (fee.FeeSubTypeId == (int)FeeSubType.PerGallon && !fee.IncludeInPPG)
																			{
																				<td class="txt3" valign="top"><span class="font-extrabold">@Resource.lblFreight:</span> <span class="font-italic">@fee.FeeSubTypeName</span></td>
																				<td class="txt3 txt_rig font-italic" valign="top"> </td>
																				<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetPreciseValue(2).GetCommaSeperatedValue()</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@((fee.Fee ?? 0).ToString(ApplicationConstants.DecimalFormat4)) @response.Currency</td>
																				<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, @Resource.constSymbolCurrency)) @response.Currency</td>
}
																			else if ((fee.FeeSubTypeId == (int)FeeSubType.ByAssetCount || fee.FeeSubTypeId == (int)FeeSubType.PerRoute || fee.FeeSubTypeId == (int)FeeSubType.FlatFee) && !fee.IncludeInPPG)
																			{
																				<td class="txt3" valign="top"><span class="font-extrabold">@Resource.lblFreight:</span> <span class="font-italic">@fee.FeeSubTypeName</span></td>
																				<td class="txt3 txt_rig font-italic" valign="top"> </td>
																				<td class="txt3 txt_rig" valign="top">&nbsp;</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@((fee.Fee ?? 0).ToString(ApplicationConstants.DecimalFormat4)) @response.Currency</td>
																				<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, @Resource.constSymbolCurrency)) @response.Currency</td>
}
																		</tr>
}

																	if (!fee.FeeTypeId.Contains(Constants.OtherCommonFeeCode))
																	{
																		var feeTypeId = Convert.ToInt32(fee.FeeTypeId);

													<!--Delivery fee information-->					if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.DeliveryFee)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.FlatFee)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblDeliveryFeeSummary: </span>
																						<span class="font-italic">@Resource.lblFlatFee</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice ? -1 : 1)</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@(Math.Abs(fee.TotalFee).ToString(ApplicationConstants.DecimalFormat4)) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.PerGallon)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblDeliveryFeeSummary: </span>
																						<span class="font-italic">@fee.FeeSubTypeName</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetPreciseValue(2).GetCommaSeperatedValue()</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@(fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4)) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.HourlyRate)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblDeliveryFeeSummary: </span>
																						<span class="font-italic">@Resource.lblHourlyRate</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@fee.TotalHours</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@(fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4)) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblDeliveryFeeSummary: </span>
																						<span class="font-italic">@Resource.lblByQuantity </span>
																					</td>
																					<td colspan="4" class="txt3 txt_rig">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.WetHoseFee && (fee.Fee != null && fee.Fee.Value != 0))
																		{
                                                                <!--Wet hose fee information-->
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.ByAssetCount)
																				{
																					<td class="txt3" valign="top"><span class="font-extrabold">@Resource.lblWetHoseFee:</span> <span class="font-italic">@Resource.lblPoFeeByAssetCount</span></td>
																					<td class="txt3 txt_rig font-italic" valign="top">&nbsp;</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.FeeSubQuantity ?? 0).GetPreciseValue(0)) @Resource.lblAssetsCount</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, @Resource.constSymbolCurrency)) @response.Currency </td>
}
																				else
																				{
																					<td class="txt3" valign="top"><span class="font-extrabold">@Resource.lblWetHoseFee:</span> <span class="font-italic">@Resource.lblHourlyRate</span></td>
																					<td class="txt3 txt_rig font-italic" valign="top">&nbsp;</td>
																					<td class="txt3 txt_rig" valign="top">@fee.GetQuntityInTime()</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, @Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.OverWaterFee && (fee.Fee != null && fee.Fee.Value != 0))
																		{
                                                                <!--Over water fee information-->
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.ByAssetCount)
																				{
																					<td class="txt3" valign="top"><span class="font-extrabold">@Resource.lblOverWaterFee:</span>  <span class="font-italic">@Resource.lblPoFeeByAssetCount</span></td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@((fee.FeeSubQuantity ?? 0).GetPreciseValue(0)) @Resource.lblAssetsCount</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, @Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else
																				{
																					<td class="txt3" valign="top"><span class="font-extrabold">@Resource.lblOverWaterFee:</span> <span class="font-italic">@Resource.lblHourlyRate</span></td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@fee.GetQuntityInTime()</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, @Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.UnderGallonFee && fee.MinimumGallons.Value > response.DroppedGallons)
																		{
													<!--Under Gallon information-->
																			<tr class="border-top-lightgray">
																				<td class="txt3" valign="top"><span class="font-extrabold">@Resource.lblMinimumGallonFee:</span>  <span class="font-italic">@Resource.lblFlatFee</span></td>
																				<td class="txt3 txt_rig font-italic" valign="top"> </td>
																				<td class="txt3 txt_rig" valign="top">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice ? -1 : 1)</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@Math.Abs(fee.TotalFee).ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																				<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.EnvironmentalFee && fee.TotalFee != 0)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.FlatFee)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblEnvironmentalFee: </span>
																						<span class="font-italic">@Resource.lblFlatFee</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice ? -1 : 1)</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@Math.Abs(fee.TotalFee).ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.PerGallon)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblEnvironmentalFee: </span>
																						<span class="font-italic">@fee.FeeSubTypeName</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetPreciseValue(2).GetCommaSeperatedValue()</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && (feeTypeId == (int)FeeType.LoadFee || feeTypeId == (int)FeeType.AdditiveFee) && fee.TotalFee != 0)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.FlatFee)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@(((FeeType)feeTypeId).GetDisplayName()): </span>
																						<span class="font-italic">@Resource.lblFlatFee</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice ? -1 : 1)</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@Math.Abs(fee.TotalFee).ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.PerGallon)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@(((FeeType)feeTypeId).GetDisplayName()): </span>
																						<span class="font-italic">@Resource.lblPerGallon</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetPreciseValue(2).GetCommaSeperatedValue()</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
																				}
																			</tr>
																		}																		
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.ServiceFee && fee.TotalFee != 0)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.FlatFee)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblServiceFee: </span>
																						<span class="font-italic">@Resource.lblFlatFee</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice ? -1 : 1)</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@Math.Abs(fee.TotalFee).ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.PerGallon)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblServiceFee: </span>
																						<span class="font-italic">@Resource.lblPerGallon</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetPreciseValue(2).GetCommaSeperatedValue()</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.HourlyRate)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblServiceFee: </span>
																						<span class="font-italic">@Resource.lblHourlyRate</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@fee.TotalHours</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.SurchargeFee && fee.TotalFee != 0)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.FlatFee)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblSurcharge: </span>
																						<span class="font-italic">@Resource.lblFlatFee</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice ? -1 : 1)</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@Math.Abs(fee.TotalFee).ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.PerGallon)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblSurcharge: </span>
																						<span class="font-italic">@Resource.lblPerGallon</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetPreciseValue(2).GetCommaSeperatedValue()</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.HourlyRate)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblSurcharge: </span>
																						<span class="font-italic">@Resource.lblHourlyRate</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@fee.TotalHours</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee
																&& (feeTypeId == (int)FeeType.StopOffFee || feeTypeId == (int)FeeType.SplitTank || feeTypeId == (int)FeeType.PumpCharge || feeTypeId == (int)FeeType.Retain)
																&& fee.TotalFee != 0)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.FlatFee)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@fee.FeeTypeName: </span>
																						<span class="font-italic">@Resource.lblFlatFee</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice ? -1 : 1)</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@Math.Abs(fee.TotalFee).ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.PerGallon)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@fee.FeeTypeName: </span>
																						<span class="font-italic">@Resource.lblPerGallon</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetPreciseValue(2).GetCommaSeperatedValue()</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.HourlyRate)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@fee.FeeTypeName: </span>
																						<span class="font-italic">@Resource.lblHourlyRate</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@fee.TotalHours</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}

																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.DemurrageFeeDestination && fee.TotalFee != 0)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.HourlyRate)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">Demurrage Fee Destination: </span>
																						<span class="font-italic">@Resource.lblHourlyRate</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"></td>
																					<td class="txt3 txt_rig" valign="top">@fee.TotalHours</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.DemurrageFeeTerminal && fee.TotalFee != 0)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.HourlyRate)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">Demurrage Fee Terminal: </span>
																						<span class="font-italic">@Resource.lblHourlyRate</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"></td>
																					<td class="txt3 txt_rig" valign="top">@fee.TotalHours</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.DemurrageOther && fee.TotalFee != 0)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.HourlyRate)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">Demurrage Other: </span>
																						<span class="font-italic">@Resource.lblHourlyRate</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@fee.TotalHours</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.SurchargeFreightFee && fee.TotalFee != 0)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.ByDistance || fee.FeeSubTypeId == (int)FeeSubType.ByQuantity || fee.FeeSubTypeId == (int)FeeSubType.FlatFee)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblFuelSurcharge (@response.SurchargePricingType.ToString() price from EIA): </span>
																						<span class="font-italic">FSC Rate @response.SurchargePercentage.ToString(ApplicationConstants.DecimalFormat2)@Resource.constSymbolPercent, Base Freight @Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4)</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetCommaSeperatedValue()</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@((fee.TotalFee / response.DroppedGallons).ToString(ApplicationConstants.DecimalFormat4)) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, @Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																		else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee && feeTypeId == (int)FeeType.OtherFee && fee.TotalFee != 0)
																		{
																			<tr class="border-top-lightgray">
																				@if (fee.FeeSubTypeId == (int)FeeSubType.FlatFee)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@(string.IsNullOrWhiteSpace(fee.OtherFeeDescription) ? Resource.lblOtherFee : Resource.lblOtherFee + " - " + fee.OtherFeeDescription): </span>
																						<span class="font-italic">@Resource.lblFlatFee</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice ? -1 : 1)</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@Math.Abs(fee.TotalFee).ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.PerGallon)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@(string.IsNullOrWhiteSpace(fee.OtherFeeDescription) ? Resource.lblOtherFee : Resource.lblOtherFee + " - " + fee.OtherFeeDescription): </span>
																						<span class="font-italic">@Resource.lblPerGallon</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetPreciseValue(2).GetCommaSeperatedValue()</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.HourlyRate)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@(string.IsNullOrWhiteSpace(fee.OtherFeeDescription) ? Resource.lblOtherFee : Resource.lblOtherFee + " - " + fee.OtherFeeDescription): </span>
																						<span class="font-italic">@Resource.lblHourlyRate</span>
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top">@fee.TotalHours</td>
																					<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																					<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																				else if (fee.FeeSubTypeId == (int)FeeSubType.ByQuantity)
																				{
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@(string.IsNullOrWhiteSpace(fee.OtherFeeDescription) ? Resource.lblOtherFee : fee.OtherFeeDescription): </span>
																						<span class="font-italic">@Resource.lblByQuantity </span>
																					</td>
																					<td colspan="4" class="txt3 txt_rig">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			</tr>
}
																	}
																	else if (!fee.IncludeInPPG && fee.FeeSubTypeId != (int)FeeSubType.NoFee)
																	{
																		<tr class="border-top-lightgray">
																			@if (fee.FeeSubTypeId == (int)FeeSubType.FlatFee)
																			{
																				<td class="txt3" valign="top">
																					<span class="font-extrabold">@(string.IsNullOrWhiteSpace(fee.OtherFeeDescription) ? Resource.lblOtherFee : fee.OtherFeeDescription): </span>
																					<span class="font-italic">@Resource.lblFlatFee</span>
																				</td>
																				<td class="txt3 txt_rig font-italic" valign="top"> </td>
																				<td class="txt3 txt_rig" valign="top">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice ? -1 : 1)</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@Math.Abs(fee.TotalFee).ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																				<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			else if (fee.FeeSubTypeId == (int)FeeSubType.PerGallon)
																			{
																				<td class="txt3" valign="top">
																					<span class="font-extrabold">@(string.IsNullOrWhiteSpace(fee.OtherFeeDescription) ? Resource.lblOtherFee : fee.OtherFeeDescription): </span>
																					<span class="font-italic">@Resource.lblPerGallon</span>
																				</td>
																				<td class="txt3 txt_rig font-italic" valign="top"> </td>
																				<td class="txt3 txt_rig" valign="top">@response.DroppedGallons.GetPreciseValue(2).GetCommaSeperatedValue()</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																				<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			else if (fee.FeeSubTypeId == (int)FeeSubType.HourlyRate)
																			{
																				<td class="txt3" valign="top">
																					<span class="font-extrabold">@(string.IsNullOrWhiteSpace(fee.OtherFeeDescription) ? Resource.lblOtherFee : fee.OtherFeeDescription): </span>
																					<span class="font-italic">@Resource.lblHourlyRate</span>
																				</td>
																				<td class="txt3 txt_rig font-italic" valign="top"> </td>
																				<td class="txt3 txt_rig" valign="top">@fee.TotalHours</td>
																				<td class="txt3 txt_rig" valign="top">@Resource.constSymbolCurrency@fee.Fee.Value.ToString(ApplicationConstants.DecimalFormat4) @response.Currency</td>
																				<td class="txt3 txt_rig" valign="top">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																			else if (fee.FeeSubTypeId == (int)FeeSubType.ByQuantity)
																			{
																				<td class="txt3" valign="top">
																					<span class="font-extrabold">@(string.IsNullOrWhiteSpace(fee.OtherFeeDescription) ? Resource.lblOtherFee : fee.OtherFeeDescription): </span>
																					<span class="font-italic">@Resource.lblByQuantity </span>
																				</td>
																				<td colspan="4" class="txt3 txt_rig">@((fee.TotalFee).GetInvoiceAmountValue(4, Resource.constSymbolCurrency)) @response.Currency</td>
}
																		</tr>
}
																}
															}
														}
													</table>
												</td>
											</tr>
											<tr>
												<td colspan="3" class="pt-10 pb-10">
													<table border="0" cellpadding="0" cellspacing="0" width="98%">
														@if (!response.ShouldHidePricing())
														{
															<tr>
																<td colspan="2">&nbsp;</td>
																<td class="border-top-gray">
																	<table width="100%" class="invoiceamount-section">
																		<tr>
																			<td class="text-left pb10 pt10 font-bold fs13">@Resource.lblSubTotal:</td>
																			<td class="txt_rig font-bold fs13 pb10 pt10" id="subtotal-amount">
																				@if (response.InvoiceTypeId != (int)InvoiceType.DryRun)
																				{
																					var processingFeeValue = response.FuelRequestFees.Where(t => t.FeeTypeId == ((int)FeeType.ProcessingFee).ToString() && t.Fee.HasValue).Select(t => t.TotalFee).FirstOrDefault();
																					<div> @((response.BasicAmount + response.TotalFees - processingFeeValue).GetInvoiceAmountValue(2, @Resource.constSymbolCurrency)) @response.Currency</div>
}
																				else
																				{
																					<div> @((response.BasicAmount).GetInvoiceAmountValue(2, @Resource.constSymbolCurrency)) @response.Currency</div>
}
																			</td>
																		</tr>
																	</table>
																</td>
															</tr>
															if (response.DiscountLineItems.Count > 0)
															{
																<tr>
																	<td colspan="3" class="pb-10">
																		<table width="100%">

																			@foreach (var discountLineItems in response.DiscountLineItems)
																			{
																				<tr class="border-top-lightgray">
																					<td class="txt3" valign="top">
																						<span class="font-extrabold">@Resource.lblDiscountOn @discountLineItems.FeeTypeName: </span>
																						@if (discountLineItems.FeeSubTypeId == (int)FeeSubType.Percent)
																						{
																							<span class="font-italic">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice || response.InvoiceTypeId == (int)InvoiceType.PartialCredit ? (discountLineItems.Amount).GetInvoiceAmountValue(2, "") : (discountLineItems.Amount).GetInvoiceAmountReverseValue(2, ""))@Resource.constSymbolPercent</span>
}
																						else
																						{
																							<span class="font-italic">@discountLineItems.FeeSubTypeName</span>
																							<span class="font-italic">@(response.InvoiceTypeId == (int)InvoiceType.CreditInvoice || response.InvoiceTypeId == (int)InvoiceType.PartialCredit ? (discountLineItems.Amount).GetInvoiceAmountValue(2, Resource.constSymbolCurrency) : (discountLineItems.Amount).GetInvoiceAmountReverseValue(2, Resource.constSymbolCurrency)) @response.Currency</span>
}
																					</td>
																					<td class="txt3 txt_rig font-italic" valign="top"> </td>
																					<td class="txt3 txt_rig" valign="top"></td>
																					<td class="txt3 txt_rig" valign="top"></td>
																					<td class="txt3 txt_rig" valign="top">@((discountLineItems.TotalFee).GetInvoiceAmountReverseValue(2, Resource.constSymbolCurrency)) @response.Currency</td>
																				</tr>
}
																		</table>
																	</td>
																</tr>
}
															if (response.TotalAllowance.HasValue && response.TotalAllowance.Value != 0)
															{
																<tr>
																	<td colspan="3" class="pb-10">
																		<table width="100%">
																			<tr class="border-top-lightgray">
																				<td class="txt3" valign="top">
																					<span class="font-extrabold">@Resource.headingSupplierAllowance : </span>
																				</td>
																				<td class="txt3 txt_rig font-italic" valign="top"> </td>
																				<td class="txt3 txt_rig" valign="top"></td>
																				<td class="txt3 txt_rig" valign="top"></td>
																				<td class="txt3 txt_rig" valign="top">@((response.TotalAllowance.Value).GetInvoiceAmountReverseValue(2, @Resource.constSymbolCurrency)) @response.Currency</td>
																			</tr>
																		</table>
																	</td>
																</tr>
}
															<tr>
																<td colspan="2">&nbsp;</td>
																<td>
																	<table width="100%" class="invoiceamount-section">
																		@if (response.InvoiceTypeId != (int)InvoiceType.DryRun && response.InvoiceTypeId != (int)InvoiceType.DigitalDropTicketManual && response.InvoiceTypeId != (int)InvoiceType.DigitalDropTicketMobileApp)
																		{
																			if (response.TaxDetails.Count > 0)
																			{
																				foreach (var item in response.TaxDetails)
																				{
																					IsTaxModified = item.IsModified ? true : IsTaxModified;

																					<tr class="@(item.IsModified ? " txt-highlight" : "" )">
																						<td class="@(item.IsModified ? " txt-highlight" : "color-blue" ) text-left pb10 font-bold fs13">@item.RateDescription:</td>
																						<td class="txt_rig font-bold fs13 pb10">@(item.TradingTaxAmount.GetInvoiceAmountValue(2, @Resource.constSymbolCurrency)) @response.Currency</td>
																					</tr>
}
																			}
																		}
																		@{	var processingFee = response.FuelRequestFees.FirstOrDefault(t => t.FeeTypeId == ((int)FeeType.ProcessingFee).ToString());
																			if (processingFee != null)
																			{
																				var isPercentFee = processingFee.FeeSubTypeId == (int)FeeSubType.Percent;
																				<tr>
																					<td align="left" valign="top" class="border-top-blue pt10 pb10">
																						<span class="color-blue text-left font-bold fs13">@Resource.lblProcessingFee:</span>
																						@if (isPercentFee)
																						{
																							<i>(@processingFee.Fee.Value@Resource.constSymbolPercent)</i>
}
																					</td>
																					<td align="right" valign="top" class="txt_rig font-bold fs13 pt10 pb10 border-top-blue">@((processingFee.TotalFee).GetInvoiceAmountValue(2, @Resource.constSymbolCurrency)) @response.Currency</td>
																				</tr>
}
																		}
																	</table>
																</td>
															</tr>

														}
														<tr>
															<td width="77%" colspan="2" class="pr-10" valign="top">
																@if (response.SpecialInstructions.Count > 0)
																{
																	<table class="full-border" width="100%">
																		<tr>
																			<td>
																				<div class="font-extrabold pl-5 pt-5">@Resource.lblSpecialInstruction:</div>
																				<ul class="pl-5 special-instuctions">
																					@foreach (var specialInstruction in response.SpecialInstructions)
																					{
																						<li class="txt3">
																							@specialInstruction.Instruction -
																							@if (@specialInstruction.IsInstructionFollowed == true)
																							{
																								<span>@specialInstruction.IsInstructionFollowed.ToYesNo()</span>
}
																							else
																							{
																								<span>@specialInstruction.IsInstructionFollowed.ToYesNo()</span>
}
																						</li>
}
																				</ul>
																			</td>
																		</tr>
																	</table>
}
															</td>
															@if (!response.ShouldHidePricing())
															{
																<td class="text-left font-bold" valign="top">
																	<table class="full-border" width="100%">
																		<tr>
																			<td class="t_left pa-5">
																				<span>
																					@Resource.lblInvoiceTotal:
																				</span>
																			</td>
																			<td class="txt_rig pa-5" id="invoicetotal-amount">
																				@if (response.InvoiceTypeId == (int)InvoiceType.DryRun)
																				{
																					<div>@((response.BasicAmount).GetInvoiceAmountValue(2, Resource.constSymbolCurrency)) @response.Currency</div>
}
																				else
																				{
																					<div> @((response.BasicAmount + response.TotalFees + response.TotalTaxAmount - response.TotalDiscountAmount - (response.TotalAllowance ?? 0)).GetInvoiceAmountValue(2, Resource.constSymbolCurrency)) @response.Currency</div>
}
																			</td>
																		</tr>
																	</table>
																</td>
}
														</tr>
														@if (IsTaxModified)
														{
															<tr>
																<td>
																	<div class="fs12 txt-highlight"><strong>@Resource.lblInvoiceValuesChanged</strong></div>
																</td>
															</tr>
}
													</table>
												</td>
											</tr>
										</table>
									</td>
								</tr>
							</table>
						}
					</td>
				</tr>
			</table>
		</div>
	</div>
</div>