@model SiteFuel.Exchange.ViewModels.Offer.OfferViewModel

<div class="row">
    @*<div class="col-sm-12">
        <div class="row">
            <div class="disable-in-tpo-edit">
                <div class="col-sm-3">
                    <div class="form-group">
                        <div id="allOtherFuelTypes" class="all-other-fuels">
                            @Html.LabelFor(m => m.FuelTypes)
                            @Html.ListBoxFor(m => m.FuelTypes, new SelectList(CommonHelperMethods.GetSupplierProducts(Model.CompanyId, Model.CountryId, Model.FuelPricing.FuelPricingDetails.PricingSourceId), "Id", "Name"), new { @class = "form-control multi-select" })
                        </div>
                        @Html.ValidationMessageFor(m => m.FuelTypes)
                    </div>
                </div>
            </div>
        </div>

    </div>*@
    <div class="col-sm-10">
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group mb0">
                    <div class="radio wrapper-rackprice dib mr20">
                        <label>
                            @Html.RadioButtonFor(m => m.FuelPricing.PricingTypeId, (int)PricingType.RackAverage,
                            new { onclick = "showHideControls(this,'market-control,indices,cityrack-wrapper','cost-control,fixed-control,different-fuelprices,product-source');radioChange(this,'terminal-price','different-fuelprices,fixed-price,supplier-cost,dd-cityrack');ddCityRackToggle();ShowHideFTLPricingControls();", onchange = "focusOnFirst(this, 'terminal-price');", @class = "revalidate radio-rack-price" })
                            @Resource.lblMarketBased
                        </label>
                    </div>
                    <div class="radio dib wrapper-suppliercost mr20">
                        <label>
                            @Html.RadioButtonFor(m => m.FuelPricing.PricingTypeId, (int)PricingType.Suppliercost,
                            new { onclick = "showHideControls(this,'cost-control,product-source','market-control,fixed-control,different-fuelprices,indices,cityrack-wrapper');radioChange(this,'supplier-cost','different-fuelprices,fixed-price,terminal-price');ddCityRackToggle()", onchange = "focusOnFirst(this, 'supplier-cost');", @class = "revalidate" })
                            @Resource.lblFuelCost
                            <i class="fa fa-info-circle ml5" data-toggle="tooltip" data-placement="top" title="@(CurrentUser.CompanySubTypeId == CompanyType.Buyer || CurrentUser.CompanyTypeId == CompanyType.Buyer ? Resource.msgFuelCostInBuyer : Resource.msgFuelCostInSupplier)"></i>
                        </label>
                    </div>
                    <div class="radio dib mr20">
                        <label>
                            @Html.RadioButtonFor(m => m.FuelPricing.PricingTypeId, (int)PricingType.PricePerGallon,
                            new { onclick = "showHideControls(this,'fixed-control,product-source','market-control,cost-control,different-fuelprices,indices,cityrack-wrapper');radioChange(this,'fixed-price','different-fuelprices,terminal-price,supplier-cost');ddCityRackToggle()", onchange = "focusOnFirst(this, 'fixed-price');", @class = "revalidate fixed-pricing" })
                            @Resource.lblFixed
                        </label>
                    </div>
                    @Html.HiddenFor(m => m.FuelPricing.IsTierPricingRequired)
                    @if (Model.FuelPricing.IsTierPricingRequired)
                    {
                        <div class="radio dib mr20">
                            <label>
                                @Html.RadioButtonFor(m => m.FuelPricing.PricingTypeId, (int)PricingType.Tier,
                                new { onclick = "showHideControls(this,'different-fuelprices','fixed-control,market-control,cost-control,cityrack-wrapper');radioChange(this,'different-fuelprices','fixed-price,terminal-price,supplier-cost');ddCityRackToggle()", onchange = "focusOnFirst(this, 'different-fuelprices');", @class = "revalidate fixed-pricing" })
                                @Resource.lblTier
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            @*<div class="disable-in-tpo-edit">
            <div class="pricing-source">
                <div class="">
                    <div class="col-sm-3">
                        <div class="form-group">
                            <span class="indices">@Html.LabelFor(m => m.FuelPricing.FuelPricingDetails.PricingSourceId)</span>
                            <span class="product-source hide-element">
                                <label>@Resource.lblProductSource<span class="required pl4">*</span></label>
                            </span>
                            @Html.DropDownListFor(m => m.FuelPricing.FuelPricingDetails.PricingSourceId, new SelectList(CommonHelperMethods.GetPricingSources(), "Id", "Name", Model.FuelPricing.FuelPricingDetails.PricingSourceId), new { @class = "form-control ddl-pricing-source" })
                            @Html.ValidationMessageFor(m => m.FuelPricing.FuelPricingDetails.PricingSourceId)
                        </div>
                    </div>
                </div>
            </div>
        </div>*@
            @Html.HiddenFor(m => m.FuelPricing.FuelPricingDetails.PricingSourceId, new { @class = "ddl-pricing-source" })
            
            <div class="col-sm-12">
                <div class="pa bg-white subSectionOpacity mt10 top0 left0 z-index5 loading-wrapper calculate-wrapper hide-element"><span class='spinner-dashboard pa'></span></div>
                <div class="market-control clearboth">
                    <div class="row">
                        <div class="col-sm-3 terminal-price">
                            <div class="form-group">
                                @Html.DropDownListFor(m => m.FuelPricing.MarkertBasedPricingTypeId, new SelectList(CommonHelperMethods.GetMarketBasedPricingTypes(), "Id", "Name", Model.FuelPricing.MarkertBasedPricingTypeId), new { @class = "form-control ddl-market-types" })
                                @Html.ValidationMessageFor(m => m.FuelPricing.MarkertBasedPricingTypeId)
                            </div>
                        </div>
                        <div class="col-sm-3 col-xs-4 terminal-price market-control">
                            <div class="form-group">
                                @Html.DropDownListFor(m => m.FuelPricing.RackAvgTypeId, new SelectList(CommonHelperMethods.GetRackAvgPricingTypes(), "Id", "Name", Model.FuelPricing.RackAvgTypeId), new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.FuelPricing.RackAvgTypeId)
                            </div>
                        </div>
                        <div class="col-sm-3 col-xs-4 terminal-price market-control">
                            <div class="form-group">
                                <div class="mtm1">
                                    @Html.TextBoxFor(m => m.FuelPricing.RackPrice, new { @class = "form-control datatype-decimal always", @placeholder = "Rack Price" })
                                </div>
                                <div>
                                    @Html.ValidationMessageFor(m => m.FuelPricing.RackPrice)
                                </div>
                            </div>
                        </div>
                    </div>
                   
                </div>
                <div class="cost-control cont-control-wrapper">
                    <div class="row">
                        <div class="col-sm-3 col-xs-4 supplier-cost defaultDisabled cost-control hide-element">
                            @Html.DropDownListFor(m => m.FuelPricing.SupplierCostMarkupTypeId, new SelectList(CommonHelperMethods.GetRackAvgPricingTypes(), "Id", "Name", Model.FuelPricing.SupplierCostMarkupTypeId), new { @class = "form-control" })
                        </div>
                        <div class="col-sm-3 col-xs-4 supplier-cost defaultDisabled cost-control hide-element">
                            <div class="form-group">
                                <div class="mtm1 defaultDisabled">
                                    @Html.TextBoxFor(m => m.FuelPricing.SupplierCostMarkupValue, new { @class = "form-control datatype-decimal always" })
                                </div>
                                <div class="supplier-cost defaultDisabled">
                                    @Html.ValidationMessageFor(m => m.FuelPricing.SupplierCostMarkupValue)
                                    @Html.ValidationMessageFor(m => m.FuelPricing.SupplierCostMarkupTypeId)
                                    @Html.ValidationMessageFor(m => m.FuelPricing.PricingTypeId)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-3 col-4 fixed-price defaultDisabled fixed-control hide-element">
                    <div class="form-group">
                        <div class="input-group mtm1">
                            <span class="input-group-addon currency-symbol">@Model.FuelPricing.Currency</span>
                            @Html.TextBoxFor(m => m.FuelPricing.PricePerGallon, new { @class = "form-control datatype-decimal always" })
                        </div>
                        @Html.ValidationMessageFor(m => m.FuelPricing.PricePerGallon)
                    </div>
                </div>
                @if (Model.FuelPricing.IsTierPricingRequired)
                {
                    <div class="different-fuelprices">
                        <div id="different-fuelprice-section" class="partial-section quantity-range">
                            <div class="partial-block-collection-section">
                                @if (Model.FuelPricing.DifferentFuelPrices != null && Model.FuelPricing.DifferentFuelPrices.Count() > 0)
                                {
                                    foreach (var fuelprice in Model.FuelPricing.DifferentFuelPrices)
                                    {
                                        Html.RenderPartial("~/Views/Shared/_PartialDifferentFuelPrice.cshtml", fuelprice);
                                    }
                                }
                            </div>
                            <div class="form-group col-md-12">
                                <a href="javascript:void(0)" onclick="AjaxStart(this)" class="add-partial-block" data-url="@Url.Action("DifferentFuelPrice", "FuelRequest")"><span class="fa fa-plus-circle"></span> @Resource.btnLabelAddNewTierPrice</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@using (Html.BeginScripts())
{
    <script>
        var productListUrl = "@Url.Action("GetAllSupplierProducts", "Offer", new { area = "Supplier" })";

        $("#@Html.IdFor(m => m.FuelPricing.FuelPricingDetails.PricingSourceId)").change(function () {
            //refresh fuel type list 
            if (@Model.Id == 0) {
                var target = $("#@Html.IdFor(m => m.FuelTypes)");
                $(".spinner-xsmall").show();

                var source = '@((int)(PricingSource.Axxis))';
                if ($("#@Html.IdFor(m => m.FuelPricing.FuelPricingDetails.PricingSourceId)").length > 0) {
                    source = parseInt($("#@Html.IdFor(m => m.FuelPricing.FuelPricingDetails.PricingSourceId)").val(), 10);
                }

                $.get(productListUrl, { companyId: @Model.CompanyId }, function (response) {
                    target.empty();
                    $(".nearest-fuellist ul").empty();
                    $.each(response, function (i, element) {
                        target.append($('<option></option>').val(element.Id).html(element.Name));
                    });
                    $(".loading-wrapper.loader-fueltype").addClass("hide-element");
                    target.find("option[value='@Model.FuelTypes']").attr("selected", "selected");
                    $(".spinner-xsmall").hide();
                });
            }
            else {
                $(".disable-in-tpo-edit").addClass('pntr-none subSectionOpacity');
            }
        });

    </script>
}