@model BrokerFuelPricingViewModel

@*@Html.HiddenFor(m => m.TierPricing.TierPricingType)
@Html.HiddenFor(m => m.TierPricing.IsResetCumulation)
@Html.HiddenFor(m => m.TierPricing.ResetCumulationSetting.CumulationType)
@Html.HiddenFor(m => m.TierPricing.ResetCumulationSetting.Date)
@Html.HiddenFor(m => m.TierPricing.ResetCumulationSetting.Day)*@

<div class="row mt10">
    <div class="col-sm-12 col-12 mb10">
        @*<label class="f-normal">@Resource.lblTier</label>*@
        <div>
            <table class="table table-hover mb0 details-table">
                <thead>
                    <tr>
                        <th>@Resource.lblFrom</th>
                        <th>@Resource.lblUpto</th>
                        @*<th>@Resource.lblPriceType</th>*@
                        <th>@(string.Format(Resource.lblRackPP, Model.Currency == Currency.USD ? "PPU" : "PPU"))</th>
                        <th>@Resource.lblCityGroupTerminal</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.TierPricing.Pricings.Count > 0)
                    {
                        for (int i = 0; i < Model.TierPricing.Pricings.Count; i++)
                        {
                    <tr>
                        @*@Html.HiddenFor(x => Model.TierPricing.Pricings[i].PricingCode.Id)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].PricingCode.Code)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].PricingCode.Description)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].PricingTypeId)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].PricingSourceId)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].RackAvgTypeId)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].DisplayPrice)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].PricePerGallon)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].MarkertBasedPricingTypeId)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].SupplierCost)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].SupplierCostMarkupTypeId)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].SupplierCostMarkupValue)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].RackPrice)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].FromQuantity)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].ToQuantity)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].TerminalId)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].CityGroupTerminalId)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].Margin)
                        @Html.HiddenFor(x => Model.TierPricing.Pricings[i].MarginTypeId)*@
                        <td>
                            @Model.TierPricing.Pricings[i].FromQuantity.GetPreciseValue(4)

                        </td>
                        <td>
                            @(Model.TierPricing.Pricings[i].ToQuantity == 0 ? Resource.lblHyphen : Model.TierPricing.Pricings[i].ToQuantity.GetCommaSeperatedValue())

                        </td>
                        <td> @(Model.TierPricing.Pricings[i].DisplayPrice)</td>
                        <td>@(Model.TierPricing.Pricings[i].CityGroupTerminalName==null ? "--": Model.TierPricing.Pricings[i].CityGroupTerminalName)</td>
                    </tr>

                        }

                    }
                    else
                    {
                        <tr>
                            <td colspan="2"> @Resource.lblNoDifferentFuelPrice</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
