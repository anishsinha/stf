@model FuelDetailsViewModel

<div class="row disable-in-tpo-edit fuel-display-group hide-in-broker">
    <div class="col-md-12">
        <label class="mb10 mt0 hide-from-tpo f-bold">@Resource.lblFuelType</label>
        @*<div class="form-group mb5">
            <div class="radio dib mr20 mt0 hide-from-tpo">
                <label>
                    @Html.RadioButtonFor(m => m.FuelDisplayGroupId, (int)ProductDisplayGroups.FavoriteFuelType, new { onclick = "showHideControls(this,'standard-fuels','fuels-in-myarea,non-standard-fuels,add-favorite,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);checkOtherFuelType(this)" })
                    @Resource.lblFavorite
                </label>
            </div>
            <div class="radio dib mr20">
                <label class="in-job-area">
                    @Html.RadioButtonFor(m => m.FuelDisplayGroupId, (int)ProductDisplayGroups.FuelTypesInYourArea, new { onclick = "showHideControls(this,'standard-fuels,fuels-in-myarea,add-favorite','non-standard-fuels,all-other-fuels,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);" })
                    @Resource.lblInJobArea
                </label>
            </div>
            <div class="radio dib mr20">
                <label>
                    @Html.RadioButtonFor(m => m.FuelDisplayGroupId, (int)ProductDisplayGroups.CommonFuelType, new { onclick = "showHideControls(this,'standard-fuels,all-other-fuels,add-favorite','fuels-in-myarea,non-standard-fuels,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);" })
                    @Resource.lblCommon
                </label>
            </div>
            <div class="radio dib mr20">
                <label>
                    @Html.RadioButtonFor(m => m.FuelDisplayGroupId, (int)ProductDisplayGroups.LessCommonFuelType, new { onclick = "showHideControls(this,'standard-fuels,all-other-fuels,add-favorite','fuels-in-myarea,non-standard-fuels,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);" })
                    @Resource.lblLessCommon
                </label>
            </div>
            <div class="radio dib">
                <label>
                    @Html.RadioButtonFor(m => m.FuelDisplayGroupId, (int)ProductDisplayGroups.OtherFuelType, new { @class = "otherfueltype", onclick = "showHideControls(this,'non-standard-fuels,add-favorite,taxForOtherFuel','standard-fuels');radioChange(this,null,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal');triggerEvent('.fixed-pricing','click')", onchange = "focusOnFirst(this, 'non-standard-fuels');" })
                    @Resource.lblOther
                </label>
            </div>
        </div>*@
        <div class="mb10">
            <div class="form-check form-check-inline hide-from-tpo">
                @Html.RadioButtonFor(m => m.FuelDisplayGroupId, (int)ProductDisplayGroups.FavoriteFuelType, new { onclick = "showHideControls(this,'standard-fuels','fuels-in-myarea,non-standard-fuels,add-favorite,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);checkOtherFuelType(this)", @id = "RadioFavorite", @class = "form-check-input" })
                <label class="form-check-label" for="RadioFavorite"> @Resource.lblFavorite</label>
            </div>
            <div class="form-check form-check-inline">
                @Html.RadioButtonFor(m => m.FuelDisplayGroupId, (int)ProductDisplayGroups.FuelTypesInYourArea, new { onclick = "showHideControls(this,'standard-fuels,fuels-in-myarea,add-favorite','non-standard-fuels,all-other-fuels,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);", @id = "RadioInJobArea", @class = "form-check-input in-job-area" })
                <label class="form-check-label in-job-area" for="RadioInJobArea"> @Resource.lblInJobArea</label>
            </div>
            <div class="form-check form-check-inline">
                @Html.RadioButtonFor(m => m.FuelDisplayGroupId, (int)ProductDisplayGroups.CommonFuelType, new { onclick = "showHideControls(this,'standard-fuels,all-other-fuels,add-favorite','fuels-in-myarea,non-standard-fuels,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);", @id = "RadioCommon", @class = "form-check-input" })
                <label class="form-check-label" for="RadioCommon">@Resource.lblCommon</label>
            </div>
            <div class="form-check form-check-inline">
                @Html.RadioButtonFor(m => m.FuelDisplayGroupId, (int)ProductDisplayGroups.LessCommonFuelType, new { onclick = "showHideControls(this,'standard-fuels,all-other-fuels,add-favorite','fuels-in-myarea,non-standard-fuels,taxForOtherFuel');radioChange(this,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal', null);", @id = "RadioLessCommon", @class = "form-check-input" })
                <label class="form-check-label" for="RadioLessCommon"> @Resource.lblLessCommon</label>
            </div>
            <div class="form-check form-check-inline">
                @Html.RadioButtonFor(m => m.FuelDisplayGroupId, (int)ProductDisplayGroups.OtherFuelType, new { onclick = "showHideControls(this,'non-standard-fuels,add-favorite,taxForOtherFuel','standard-fuels');radioChange(this,null,'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal');triggerEvent('.fixed-pricing','click')", onchange = "focusOnFirst(this, 'non-standard-fuels');" , @id = "RadioOther", @class = "form-check-input otherfueltype" })
                <label class="form-check-label" for="RadioOther"> @Resource.lblOther</label>
            </div>
        </div>
    </div>
</div>

<div class="row disable-in-tpo-edit">
    <div class="col-sm-12">
            <div class="pa bg-white top0 left0 z-index5 loading-wrapper mtm10 loader-fueltype hide-element"><span class="spinner-dashboard pa"></span></div>
            <div class="standard-fuels">
                <div class="row">
                    <div class="col-sm-8">
                        <div class="row">
                            <div class="col-sm-9">
                                <div id="fuelTypeNearYourArea" class="fuels-in-myarea hide-element">
                                    <div class="pr">
                                        <input type="text" class="form-control nearest-fueltype pl16" onkeydown="javascript:return false">
                                    </div>
                                    <div class="nearest-fuellist pa bg-white">
                                        <ul class="list-unstyled"></ul>
                                        <div class="text-center">
                                            <a href="javascript:void(0)" class="more-nearestfuel">See More</a>
                                            <div class="spinner-xsmall mbm2 ml2" style="display:none"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="hide-element" id="noFavoriteFuelMsg">
                            <div class="alert alert-info mb0 fs13">@Resource.errMessageNoFavFuel</div>
                        </div>
                        <div class="row">
                            <div class="col-sm-9">
                                <div class="form-group mb0">
                                    <div id="allOtherFuelTypes" class="all-other-fuels">
                                        @Html.DropDownListFor(m => m.FuelTypeId, new SelectList(CommonHelperMethods.GetFuelProducts((ProductDisplayGroups)Model.FuelDisplayGroupId, CurrentUser.CompanyId, Model.FuelDisplayJobId), "Id", "Name", Model.FuelTypeId), Resource.lblSelectFuel, new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.FuelTypeId)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="non-standard-fuels hide-element">
                <div class="row mb5">
                    <div class="col-sm-4 col-md-5">
                        <div class="form-group">
                            @Html.LabelFor(m => m.NonStandardFuelName)
                            @Html.TextBoxFor(m => m.NonStandardFuelName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.NonStandardFuelName)
                        </div>
                    </div>
                    <div class="col-sm-5">
                        <div class="form-group mb0">
                            @Html.LabelFor(m => m.NonStandardFuelDescription)
                            @Html.TextAreaFor(m => m.NonStandardFuelDescription, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
    </div>
</div>

@using (Html.BeginScripts())
{
    <script>
        function GetNearestFuels(jobId, targetUrl, zipCode) {            
            var groupId = parseInt($('input[name="@Html.NameFor(m => m.FuelDisplayGroupId)"]:checked').val(), 10);
            var target = $("#@Html.IdFor(m => m.FuelTypeId)");
            $(".spinner-xsmall").show();

            var source = '@((int)(PricingSource.Axxis))';
            if ($(".ddl-pricing-source").length > 0) {
                source = parseInt($(".ddl-pricing-source").val(), 10);
            }

            $.get(targetUrl, { displayGroupId: groupId, jobId: jobId, zipCode: zipCode, source: source }, function (response) {
                target.empty();
                $(".nearest-fuellist ul").empty();
                showHideFavoriteErrorMessage(groupId, response.length);
                $.each(response, function (i, element) {
                    target.append($('<option></option>').val(element.Id).html(element.Name));
                    if (groupId == @((int)(ProductDisplayGroups.FuelTypesInYourArea))) {
                        $(".nearest-fuellist ul").append($('<li></li>').val(element.Id).html(element.Name));
                    }
                });
                $(".loading-wrapper.loader-fueltype").addClass("hide-element");
                target.prepend("<option value @(Model.FuelTypeId.HasValue? "" : "selected='selected'") >@Resource.lblSelectFuel</option>");
                if (groupId == @((int)(ProductDisplayGroups.FuelTypesInYourArea))) {
                    $(".nearest-fuellist ul").prepend("<li>@Resource.lblSelectFuel</li>");
                    $('.nearest-fuellist li:first-child').click();
                }
                target.find("option[value='@Model.FuelTypeId']").attr("selected", "selected");
                $(".spinner-xsmall").hide();
            });
            if (groupId == @((int)(ProductDisplayGroups.OtherFuelType)) && $('input[name="@Html.NameFor(m => m.FuelPricing.PricingTypeId)"]:checked').val() != '@((int)PricingType.PricePerGallon)') {
                $('input:radio[name="@Html.NameFor(m => m.FuelPricing.PricingTypeId)"][value=' +@((int)PricingType.PricePerGallon)+']').prop('checked', true).trigger('click');
            }
        }

        function showHideFavoriteErrorMessage(groupId, dataLen) {
            if (groupId == @((int)(ProductDisplayGroups.FavoriteFuelType)) && dataLen == 0) {
                $('#allOtherFuelTypes').hide();
                $('#noFavoriteFuelMsg').removeClass('hide-element');
            }
            else {
                if (groupId == '@((int)ProductDisplayGroups.FuelTypesInYourArea)') {
                    $('#allOtherFuelTypes').hide();
                    $('#fuelTypeNearYourArea').removeClass('hide-element');
                }
                else {
                    $('#allOtherFuelTypes').show();
                    $('#fuelTypeNearYourArea').addClass('hide-element');
                }
                $('#noFavoriteFuelMsg').addClass('hide-element');
            }
        }

        $(".more-nearestfuel").click(function () {
            $(".spinner-xsmall").show();
            $("#hdnRadius").val(parseInt($("#hdnRadius").val(), 10) + 100);
            var radius = $("#hdnRadius").val();
            if (typeof isExistingJob == 'undefined' || isExistingJob == true) {
                var groupId = $('input[name="@Html.NameFor(m => m.FuelDisplayGroupId)"]:checked').val(), target = $("#@Html.IdFor(m => m.FuelTypeId)");
                $.get("@Url.Action("GetProductList","FuelRequest")", { displayGroupId: groupId, jobId: jobId, radius: radius }, function (response) {
                    $.each(response, function (i, element) {
                        $(".nearest-fuellist ul").append($('<li></li>').val(element.Id).html(element.Name));
                        $("#@Html.IdFor(m => m.FuelTypeId)").append($('<option></option>').val(element.Id).html(element.Name));
                    });
                    $(".spinner-xsmall").hide();
                });
            }
            else {
                $.get("@Url.Action("GetProductListByZip")", { zipCode: zipCode, radius: radius }, function (response) {
                    $.each(response, function (i, element) {
                        $(".nearest-fuellist ul").append($('<li></li>').val(element.Id).html(element.Name));
                        $("#@Html.IdFor(m => m.FuelTypeId)").append($('<option></option>').val(element.Id).html(element.Name));
                    });
                    $(".spinner-xsmall").hide();
                });
            }
        });

        function checkOtherFuelType(favRadio) {
            var IsOtherFuelType = '@Model.IsOtherFuelTypeInFavorite';
            if (IsOtherFuelType.toLowerCase() == 'true') {
                radioChange(favRadio, null, 'wrapper-rackprice,wrapper-suppliercost,city-groupterminal,chkcity-groupterminal');
                triggerEvent('.fixed-pricing', 'click');
            }
        }

        $(document).click(function (e) {
            if (!$(e.target).is('.nearest-fuellist, .nearest-fuellist *,.nearest-fueltype')) {
                $(".nearest-fuellist").hide();
            }
        });

            //Put the text of clicked list item to text box
        $('.nearest-fuellist ul').on('click', 'li', function () {
            $(".nearest-fueltype").val($(this).text());
            $(".nearest-fuellist").hide();
            $("#@Html.IdFor(m => m.FuelTypeId)").val($(this).val());
        });

            //takes first value and adds to text box
        $(".nearest-fueltype").val($(".nearest-fuellist ul li:first-child").text());

        $(".nearest-fueltype").click(function () {
            if ($(".nearest-fuellist").is(':visible')) {
                $(".nearest-fuellist").hide();
            }
            else {
                $(".nearest-fuellist").show();
            }
        });

        $('input[name="@Html.NameFor(m => m.FuelDisplayGroupId)"]').change(function () {
            $(".loading-wrapper.loader-fueltype").removeClass("hide-element");
            var isFuelNearYou = $('input[name="@Html.NameFor(m => m.FuelDisplayGroupId)"]:checked').val() == '@((int)ProductDisplayGroups.FuelTypesInYourArea)' ? true : false;
            if (typeof isExistingJob == 'undefined' || isExistingJob || !isFuelNearYou) {
                GetNearestFuels(jobId, productListUrl, zipCode);
            }
            else {
                if (isFuelNearYou) {
                    $(".nearest-fuellist ul").empty();
                    GetFuelTypesByZipCode(zipCode);
                }
            }
        });

        function GetFuelTypesByZipCode(zipCode) {
            $(".spinner-xsmall").show();
            $("#FuelTypeNearYou").val("");
            $(".nearest-fuellist ul").empty();
            $("#@Html.IdFor(m => m.FuelTypeId)").empty();

            if (zipCode != "") {
                $("#hdnRadius").val(parseInt($("#hdnRadius").val()));
                var radius = $("#hdnRadius").val();
                $.get("@Url.Action("GetProductListByZip")", { zipCode: zipCode, radius: radius }, function (response) {
                    $.each(response, function (i, element) {
                        $(".nearest-fuellist ul").append($('<li></li>').val(element.Id).html(element.Name));
                        $("#@Html.IdFor(m => m.FuelTypeId)").append($('<option></option>').val(element.Id).html(element.Name));
                    });
                    $('.nearest-fuellist li:first-child').click();
                    $("span[data-valmsg-for='FuelTypeInYourAreaId']").hide();

                }).done(function () { $(".spinner-xsmall").hide(); $(".loading-wrapper.loader-fueltype").addClass("hide-element"); });
            }
        }
    </script>
}