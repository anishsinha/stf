@model int
<style>
    .modal-body {
        height: 300px;
        overflow: auto;
    }

    /*#quickBooksSummaryTable*/
</style>
<div class="row mb10">
    <div class="col-sm-12">
        <div class="well pb10 mb5">
            <div class="row">
                <div class="col-xs-12 col-sm-1 col-md-1 pt5 pr0"><i class="fa fa-filter mr5 fs16"></i><label class="f-normal fs16">@Resource.lblFilter</label></div>
                <div class="col-xs-6 col-sm-3 col-md-2 mb5">
                    <input type="text" id="quickBooksFromDate" placeholder="@Resource.lblFrom" class="form-control datepicker" />
                </div>
                <div class="col-xs-6 col-sm-3 col-md-2 mb5"><input type="text" id="quickBooksToDate" placeholder="@Resource.lblTo" class="form-control datepicker" /></div>
                <div class="col-xs-6 col-sm-2 col-md-2 mb5">
                    @Html.DropDownList("CompanyId", new SelectList(CommonHelperMethods.GetQbCompanies(CurrentUser.CompanyId), "Id", "Name"), new { @class = "form-control" })
                </div>
                <div class="col-xs-12 col-sm-4 col-md-3">
                    <input type="button" class="btn btn-primary" value="@Resource.btnLabelApply" id="ApplyDateTime" />
                    <input type="button" class="btn ml5" value="@Resource.btnLabelClearFilter" id="ClearFilterId" />
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div id="90DaysDataWarning" class="col-md-12">
        <div class="alert alert-info fs12 mb15"><strong>@Resource.lblInfo</strong>@Resource.lbl90DaysDataWarning</div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <div class="well bg-white shadow-b">
            <div class="ibox mb0">
                <div class="ibox-content no-padding no-border">
                    <div class="table-responsive" id="quickBooksSummaryTable-div">
                        <table id="quickBooksSummaryTable" class="table table-striped table-bordered table-hover ">
                            <thead>
                                <tr>
                                    @if (CurrentUser.IsSuperAdmin || CurrentUser.IsAccountSpecialist)
                                    {
                                        <th class="workflow-details-header">@Resource.gridColumnWorkflowId / @Resource.gridColumnType / @Resource.gridColumnStatus / @Resource.gridColumnCompany</th>
                                    }
                                    else
                                    {
                                        <th class="workflow-details-header">@Resource.gridColumnWorkflowId / @Resource.gridColumnType / @Resource.gridColumnStatus</th>
                                    }
                                    <th>@Resource.gridColumnPoNumber</th>
                                    <th>@Resource.gridColumnQbRequestId</th>
                                    <th>@Resource.gridColumnQbXmlType</th>
                                    <th>@Resource.gridColumnRequest @Resource.gridColumnType</th>
                                    <th>@Resource.gridColumnRequestCreatedOn</th>
                                    <th>@Resource.gridColumnRequestUpdatedOn</th>
                                    <th>@Resource.gridColumnRequestStatus</th>
                                    <th>@Resource.gridColumnResponse</th>
                                    <th>@Resource.gridColumnResponseUpdatedOn</th>
                                    <th>@Resource.gridColumnAction</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog  modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@Resource.lblQuickBooksLogs</h4>
            </div>
            <div class="modal-body overflow-h no-padding">
                @Html.TextArea("qbDetails", null, new { @style = "height:300px;", @class = "form-control noresize pb20 break-word" })
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script>
    var userQuickBookss, exportColumns = { columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] };
    $(document).ready(function () {

        userQuickBookss = $("#quickBooksSummaryTable").DataTable({
            "ajax": {
                "url": "@Url.Action("GetQuickBooksGrid", "QuickBooks")",
                "type": "POST",
                "datatype": "json",
                "data": function (data) {
                    data.fromDateTime = $("#quickBooksFromDate").val() == '' ? '' : $("#quickBooksFromDate").val();
                    data.toDateTime = $("#quickBooksToDate").val() == '' ? '' : $("#quickBooksToDate").val();
                    data.showRecords = $("[name='quickBooksSummaryTable_length']").val();
                    data.companyId = $("#CompanyId").val();
                    data.accountingWorkflowId = '@Model';
                    $('#quickBooksSummaryTable-div').append("<div class='pa bg-white top0 left0 z-index5 loading-wrapper'><span class='spinner-dashboard pa'></span></div>");
                },
                "dataSrc": function (json) {
                    $("#quickBooksSummaryTable-div").find('.loading-wrapper').remove();
                    return json.data;
                }
            },
            "columns": [
                {
                    "data": function (data) {
                        if ('@CurrentUser.IsSuperAdmin' == 'True') {
                            return data.WorkflowID + ' / ' + data.WorkflowType + ' / ' + data.WorkflowStatus + ' / ' + data.CompanyName;
                        }
                        else {
                            return data.WorkflowID + ' / ' + data.WorkflowType + ' / ' + data.WorkflowStatus;
                        }
                    }, "autoWidth": true
                },
                {
                    "data": "PoNumber", 
                    "render": function (d) {
                        return d == null ? '@Resource.lblHyphen' : d;
                    }, "autoWidth": true
                },
                //{ "data": "PoNumber", "autoWidth": true },
                { "data": "RequestID", "autoWidth": true },
                { "data": "QbXmlType", "autoWidth": true },
                {
                    "data": function (data) {
                        return '<a onclick="getQbRequestXml(' + data.RequestID + ')" type="button" data-toggle="modal" data-target="#myModal">' + data.EntityType + '</a>';
                    }, "autoWidth": true
                },
                {
                    "data": "CreatedOn", "type": 'date-dd-mmm-yy HH:mm:ss',
                    "render": function (d) {
                        return moment(d).format("MM/DD/YY HH:mm:ss");
                    }, "autoWidth": true
                },
                {
                    "data": "ReqUpdatedOn", "type": 'date-dd-mmm-yy HH:mm:ss',
                    "render": function (d) {
                        return moment(d).format("MM/DD/YY HH:mm:ss");
                    }, "autoWidth": true
                },
                { "data": "RequestStatus", "autoWidth": true },
                {
                    "data": function (data) {
                        return data.ResponseID > 0 ? '<a onclick="getQbResponseXml(' + data.ResponseID + ')" type="button" data-toggle="modal" data-target="#myModal">@Resource.btnLabelView</a>' : '@Resource.lblHyphen';
                    }, "autoWidth": true
                },
                {
                    "data": "ResUpdatedOn", "type": 'date-dd-mmm-yy HH:mm:ss',
                    "render": function (d) {
                        return d == null ? '@Resource.lblHyphen' : moment(d).format("MM/DD/YY HH:mm:ss");
                    }, "autoWidth": true
                },
                {
                    "data": function (data) {
                        if (data.RequestStatus == 'Failed') {
                            return '<a onclick="retryQbRequestXml(' + data.RequestID + ',this);" type="button" class="btn btn-default" data-toggle="modal">@Resource.lblRetry</a>';
                        }
                        else {
                            return '';
                        }
                    }, "autoWidth": true
                }
            ],
            "columnDefs": [
                { "name": "WorkflowDetails", "targets": 0, "searchable": true, "orderable": true, "className": "col-group-by" },
                { "name": "PoNumber", "targets": 1, "regex": false, "orderable": false },
                { "name": "RequestID", "targets": 2, "regex": false, "orderable": false },
                { "name": "QbXmlType", "targets": 3, "regex": false, "orderable": false },
                { "name": "EntityType", "targets": 4, "searchable": true, "orderable": true },
                { "name": "CreatedOn", "targets": 5, "searchable": false, "orderable": false },
                { "name": "ReqUpdatedOn", "targets": 6, "searchable": false, "orderable": false },
                { "name": "RequestStatus", "targets": 7, "searchable": false, "orderable": false },
                { "name": "Response", "targets": 8, "searchable": false, "orderable": false },
                { "name": "ResUpdatedOn", "targets": 9, "searchable": false, "orderable": false },
                { "name": "RetryCount", "targets": 10, "searchable": false, "orderable": false }
            ],
            "serverSide": true,
            "searchDelay": 500,
            aaSorting: [[0, 'desc']],
            "pageLength": 10,
            "lengthMenu": [[10, 25, 50], [10, 25, 50]],
            "responsive": true,
            "searching": { "regex": true },
            lengthChange: true,
            "order": [],
            "initComplete": function (settings, json) {
                wrapperHeight();
            },
            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                { extend: 'copy' },
                { extend: 'csv', title: 'QuickBooks_Summary' },
                { extend: 'excel', title: 'QuickBooks_Summary' },
                { extend: 'pdf', title: 'QuickBooks_Summary', orientation: 'landscape' },
                {
                    extend: 'print',
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');
                        $(win.document.body).find('table')
                            .addClass('compact')
                            .css('font-size', 'inherit');
                    }
                }
            ],
            language: {
                sLoadingRecords: "<div class='spinner-small'></div><div class='fs14'>loading</div>",
                search: "<button class='btn btn-primary' id='btnsearch22'> <i class='fa fa-search'></i></button>"
            },
            initComplete: function (settings, json) {
                var api = this.api();
                var textBox = $('#quickBooksSummaryTable_filter .input-sm');
                textBox.unbind();
                textBox.bind('keyup input', function (e) {
                    if (e.keyCode == 8 && !textBox.val() || e.keyCode == 46 && !textBox.val()) {
                    } else if (e.keyCode == 13 || !textBox.val()) {
                        api.search(this.value).draw();
                    }
                });

                $("#btnsearch22").click(function () {
                    api.search(textBox[0].value).draw();
                });
            },
            "fnDrawCallback": function () {
                var groupVal = null, matches = 0, groupColor = null;
                $('tbody tr td.col-group-by').each(function (i) {
                    var currVal = this.innerHTML;
                    if (currVal != groupVal) {
                        groupVal = currVal;
                        groupColor = $(this).parent().css("background-color");
                        matches = 0;
                    } else {
                        matches++;
                    }

                    if (currVal == groupVal && matches > 0) {
                        $(this).html("");
                        $(this).css({ 'border-top': '0px solid white' });
                        if (groupColor == 'rgba(0, 0, 0, 0)') {
                            groupColor = "#fff";
                        }
                        $(this).css('background-color', groupColor);
                    }
                });

                $('tbody tr td.col-group-by').css({ 'border-left': '1px solid #e7e7e7' }); // assign left border to all td's
                $('tbody tr td.col-group-by:last').css({ 'border-bottom': '1px solid #e7e7e7' }); // border to most bottom row of table
            }
        });

        $("[name='quickBooksSummaryTable_length']").on("change", function () {
            userQuickBookss.ajax.reload();
        });
        $("#ApplyDateTime").on("click", function () {
            userQuickBookss.ajax.reload();
        });
        $("#ClearFilterId").on("click", function () {
            $("#quickBooksFromDate").val("");
            $("#quickBooksToDate").val("");
            userQuickBookss.ajax.reload();
        });
        
        $('.datepicker').datetimepicker({
            format: 'MM/DD/YYYY'
        });
    });

    function getQbRequestXml(id) {
        $.ajax({
            url: "@Url.Action("GetQbRequestXml", "QuickBooks", new { Id = "ID"})".replace("ID", id),
            success: function (result) {
                if (result.length != 0)
                    $("#qbDetails").val(result);
                else
                    $("#qbDetails").val("Details not present");
            },
            error: function (err) {
                console.log("Something wrong with QuickBooks" + err);
            }
        });
    }

    function getQbResponseXml(id) {
        $.ajax({
            url: "@Url.Action("GetQbResponseXml", "QuickBooks", new { Id = "ID"})".replace("ID", id),
            success: function (result) {
                if (result.length != 0) {
                    $("#qbDetails").val(result);
                }
                else
                    $("#qbDetails").val("Details not present");
            },
            error: function (err) {
                console.log("Something wrong with QuickBooks" + err);
            }
        });
    }

    function retryQbRequestXml(id,x) {
        $.ajax({
            url: "@Url.Action("RetryFailedQbRequest", new { Id = "ID"})".replace("ID", id),
            success: function (result) {

                if (result === true) {
                    msgsuccess('@Resource.sucessMessageForRetryQbRequest');
                    $(x).addClass("pntr-none subSectionOpacity").css("cursor", "not-allowed");
                }
                else
                    msgerror("Failed...");
            },
            error: function (err) {
                console.log("Something wrong with QuickBooks" + err);
            }
        });
    }
</script>
