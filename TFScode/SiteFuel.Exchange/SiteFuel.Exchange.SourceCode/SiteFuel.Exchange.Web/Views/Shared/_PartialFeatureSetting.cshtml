@model List<FeaturesViewModel>
<style type="text/css">
    .width-25px {
        width: 15px;
        height:15px;
    }
</style>
<div class="col-sm-12">
    <div id="feature-setting-section" class="row equal-container mt5">
        <div class='pa bg-white top0 left0 z-index5 loading-wrapper hide-element'><span class='spinner-dashboard pa'></span></div>
        @foreach (var feature in Model)
        {
            <div class="col-sm-3 equal-column">
                <div class="well mb15">
                    <div class="row">
                        <div class="col-sm-10">
                            <h4 class="fs16 pt0 mb0">
                                @Html.DisplayFor(m => feature.Name)
                                @Html.HiddenFor(m => feature.Id)
                            </h4>
                        </div>
                        <div class="col-sm-2 text-right">
                            <div class="custom-control custom-switch mtm3 pl25">
                                @*<input type="checkbox" class="custom-control-input" id="customSwitch1">*@
                                @Html.CheckBoxFor(m => feature.IsEnabled, new { @id = feature.Id, @class = "custom-control-input", onchange = "updateFeatureSetting(this, " + feature.Id + ");" })
                                @Html.LabelFor(m => feature.IsEnabled, new { @for= feature.Id, @class= "custom-control-label" })
                                @*<label class="custom-control-label" for="customSwitch1"></label>*@
                            </div>
                            @*<label>
                                @Html.CheckBoxFor(m => feature.IsEnabled, new {@id=feature.Id, @class = "form-control width-25px mt0", onchange = "updateFeatureSetting(this, " + feature.Id + ");" })
                            </label>*@
                        </div>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(feature.Description))
                    {
                        <p class="fs12 opacity8 @(string.IsNullOrWhiteSpace(feature.Description) ? "hide-element" : "")">
                            @Html.DisplayFor(m => feature.Description)
                        </p>
                    }
                </div>
            </div>
        }

    </div>
</div>
<script type="text/javascript">
   
    function updateFeatureSetting(chk, id) {
        var isChecked = $(chk).is(":checked");
        //$(chk).closest("#feature-setting-section").find(".loading-wrapper").removeClass('hide-element');
        var url = '@Url.Action("UpdateFeatureSetting", "Profile", new { area = "Settings" })/' + id + '';
        url = url + '?isFeatureEnable=' + isChecked + '';
        $.post(url, function (response) {
            if (response.StatusCode == 0) {
                msgsuccess(response.StatusMessage);
                //if (isChecked) {
                //    $(chk).closest(".well").addClass("active-feature");
                //}
                //else {
                //    $(chk).closest(".well").removeClass("active-feature");
                //}
            }
            else if (response.StatusCode == 1 && response.MessageCode == 401) {
                //Unauthorized
                msgerror(response.StatusMessage);
                setTimeout(function () {
                    window.location.reload(true);
                }, 1000);
            }
            else {
                msgerror(response.StatusMessage);
            }
        }).always(function () {
            //$.removeCookie(featureSettingStorageKey);
            localStorage.removeItem(featureSettingStorageKey);
            setFeatureSetting();
            //setTimeout(function () {
            //    window.location.reload(true);
            //}, 1000);
            $(chk).closest("#feature-setting-section").find(".loading-wrapper").addClass('hide-element');
        });
    }
</script>