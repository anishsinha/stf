@using SiteFuel.Exchange.Web.Common
@model AssetViewModel
<!-- tank details starts -->
<div class="col-sm-12">
    <div class="row well bg-white shadow-a radius10 mb15">
        <div class="col-sm-12">
            <div class="row privateSelect">
                <div class="col-sm-12">
                    <h4 class="pb10">@Resource.headingTankInformation</h4>
                    <div class="row">
                        <div class="col-xs-6 col-sm-3">
                            <div class="form-group">
                                @Html.HiddenFor(m => m.Id)
                                @Html.HiddenFor(m => m.Type)
                                @Html.HiddenFor(m => m.JobId)
                                @Html.HiddenFor(m => m.IsJobDetails)
                                @Html.HiddenFor(m => m.CompanyId)
                                @Html.HiddenFor(m => m.CreatedDate)
                                @Html.HiddenFor(m => m.AssetAdditionalDetail.AssetId)
                                @Html.HiddenFor(m => m.AssetAdditionalDetail.Type)
                                @Html.LabelFor(m => m.Name)<span class="pl4 color-red">*</span>
                                @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Name)
                                @Html.HiddenFor(m => m.InventoryDataCaptureType)
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3">
                            <div class="form-group">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.FuelType)<span class="pl4 color-red">*</span>
                                    @Html.DropDownListFor(m => m.FuelType.Id, new SelectList(CommonHelperMethods.GetAssetFuelTypes(), "Id", "Name", Model.FuelType == null ? 0 : Model.FuelType.Id), string.Format(Resource.valMessageSelect, Resource.lblProductType), new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.FuelType.Id)
                                    @Html.HiddenFor(m => m.FuelType.Name)
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3">
                            <div class="form-group">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.AssetTankFuelTypeId)
                                    @Html.DropDownListFor(m => m.AssetTankFuelTypeId, new SelectList(Model.FuelTypes, "Id", "Name", Model.AssetTankFuelTypeId), string.Format(Resource.valMessageSelect, Resource.lblFuelType), new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.FuelCapacity)<span class="pl4 color-red">*</span>
                                @Html.TextBoxFor(m => m.AssetAdditionalDetail.FuelCapacity, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.FuelCapacity)
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.TankModelTypeId)
                                @Html.DropDownListFor(m => m.AssetAdditionalDetail.TankModelTypeId, new SelectList(CommonHelperMethods.GetTankModelType(CurrentUser.CompanyId), "Id", "Name", Model.AssetAdditionalDetail.TankModelTypeId), "", new { @class = "select2_demo_3 form-control" })
                                @*@Html.ValidationMessageFor(m => m.AssetAdditionalDetail.TankModelTypeId)*@
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-6 col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.TankId)
                                @Html.TextBoxFor(m => m.AssetAdditionalDetail.TankId, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.TankId)
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.StorageId)
                                @Html.TextBoxFor(m => m.AssetAdditionalDetail.StorageId, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.StorageId)
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.TankType)
                                @Html.EnumDropDownListFor(m => m.AssetAdditionalDetail.TankType, new { @class = "form-control remove-empty" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.TankType)
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3 diptest-method-ddl">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.DipTestMethod)
                                @*@Html.EnumDropDownListFor(m => m.AssetAdditionalDetail.DipTestMethod, new { @class = "form-control remove-empty" })*@
                                @Html.DropDownListFor(x => x.AssetAdditionalDetail.DipTestMethod,
                                                        from DipTestMethod dipTestMethod in Enum.GetValues(typeof(DipTestMethod))
                                                        select new SelectListItem() { Text = dipTestMethod.GetDisplayName().ToString(), Value = ((int)dipTestMethod).ToString() }, new { @class = "form-control" }
                                                    )
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.DipTestMethod)
                            </div>
                        </div>

                    </div>
                    @*<div class="row">
            <div class="col-xs-6 col-sm-3">
                <div class="form-group">
                    @Html.LabelFor(m => m.AssetAdditionalDetail.TankNumber)
                    @Html.TextBoxFor(m => m.AssetAdditionalDetail.TankNumber, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.TankNumber)
                </div>
            </div>
        </div>*@
                    <div class="row">
                        <div class="col-xs-6 col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.TankSequence)
                                @Html.TextBoxFor(m => m.AssetAdditionalDetail.TankSequence, new { @class = "form-control datatype-int always", @onkeypress = "return validatePositiveNumber(event,this)" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.TankSequence)
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3 hide-element" id="divPedigreeAssetDBID">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.PedigreeAssetDBID)<span class="pl4 color-red">*</span>
                                @Html.TextBoxFor(m => m.AssetAdditionalDetail.PedigreeAssetDBID, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.PedigreeAssetDBID)
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3 hide-element" id="divSkyBitzRTUID">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.SkyBitzRTUID)<span class="pl4 color-red">*</span>
                                @Html.TextBoxFor(m => m.AssetAdditionalDetail.SkyBitzRTUID, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.SkyBitzRTUID)
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3 hide-element" id="divInsite360TankId">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.Insight360TankId)<span class="pl4 color-red">*</span>
                                @Html.TextBoxFor(m => m.AssetAdditionalDetail.Insight360TankId, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.Insight360TankId)
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3 hide-element veeder-root-controls">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.VeederRootIPAddress)<span class="pl4 color-red">*</span>
                                @Html.TextBoxFor(m => m.AssetAdditionalDetail.VeederRootIPAddress, new { @class = "form-control veeder-root-input-control" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.VeederRootIPAddress, null, new { @class = "veeder-root-validation-msg" })
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3 hide-element veeder-root-controls">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.Port)<span class="pl4 color-red">*</span>
                                @Html.TextBoxFor(m => m.AssetAdditionalDetail.Port, new { @class = "form-control veeder-root-input-control" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.Port, null, new { @class = "veeder-root-validation-msg" })
                            </div>
                        </div>
                        <div class="col-xs-6 col-sm-3 hide-element veeder-root-controls">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.VeederRootTankID)<span class="pl4 color-red">*</span>
                                @Html.TextBoxFor(m => m.AssetAdditionalDetail.VeederRootTankID, new { @class = "form-control veeder-root-input-control" })
                                @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.VeederRootTankID, null, new { @class = "veeder-root-validation-msg" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-6 col-sm-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetAdditionalDetail.TanksConnected)
                                @Html.ListBoxFor(m => m.AssetAdditionalDetail.TanksConnected, new MultiSelectList(CommonHelperMethods.GetAssetOrTankListAsync(CurrentUser.Id, Model.JobId, (int)AssetType.Tank, Model.Id), "Id", "Name", Model.AssetAdditionalDetail.TanksConnected), new { @class = "form-control mlm20" })

                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div id="div_IsStopATGPolling" class="col-xs-6 col-sm-3">
                            <div class="form-check form-check-inline">
                                @Html.CheckBoxFor(m => m.AssetAdditionalDetail.IsStopATGPolling, new { @class = "form-check-input", @id = "AssetAdditionalDetail_IsStopATGPolling" })
                                @Html.LabelFor(m => m.AssetAdditionalDetail.IsStopATGPolling, new { @class = "control-label form-check-label", @for = "AssetAdditionalDetail_IsStopATGPolling" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row well bg-white shadow-a radius10 mb15">
        <div class="col-sm-12">
            <h4 class="pb10">Threshold Settings</h4>
            <div class="row">
                <div class="container ml0">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="row">
                                <div class="col-xs-6 col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetAdditionalDetail.FillType)
                                        @Html.EnumDropDownListFor(m => m.AssetAdditionalDetail.FillType, new { @class = "form-control remove-empty filltype" })
                                        @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.FillType)
                                    </div>
                                </div>
                                <div class="col-xs-6 col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetAdditionalDetail.MaxFill)<span class="pl4 color-red">*</span>
                                        <div class="input-group">
                                            @Html.TextBoxFor(m => m.AssetAdditionalDetail.MaxFill, new { @class = "form-control" })
                                            <span class="input-group-addon hide-element max-fill">@Model.UoM.ToString()</span>
                                            <span class="input-group-addon percent-symbol max-fillpercent">@Resource.constSymbolPercent</span>
                                        </div>
                                        @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.MaxFill)
                                        <span id="max-fill-validation-error" class="field-validation-error hide-element"></span>
                                        <div class="fs12 f-bold pt5 color-orange max-fillpercent" id="maxfillvalue"></div>
                                    </div>
                                </div>
                                <div class="col-xs-6 col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetAdditionalDetail.MinFill)<span class="pl4 color-red">*</span>
                                        <div class="input-group">
                                            @Html.TextBoxFor(m => m.AssetAdditionalDetail.MinFill, new { @class = "form-control" })
                                            <span class="input-group-addon min-fill hide-element">@Model.UoM.ToString()</span>
                                            <span class="input-group-addon percent-symbol min-fillpercent">@Resource.constSymbolPercent</span>
                                        </div>
                                        @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.MinFill)
                                        <span id="min-fill-validation-error" class="field-validation-error hide-element"></span>
                                        <div class="fs12 f-bold pt5 color-orange min-fillpercent" id="minfillvalue"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-6 col-sm-3">
                                    @Html.LabelFor(m => m.AssetAdditionalDetail.RunOutLevel)<span class="pl4 color-red">*</span>
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.AssetAdditionalDetail.RunOutLevel, new { @class = "form-control" })
                                        <span class="input-group-addon percent-symbol">@Resource.constSymbolPercent</span>
                                    </div>
                                    <span id="runout-Level-validation-error" class="field-validation-error hide-element"></span>
                                    @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.RunOutLevel)
                                    <div class="fs12 f-bold pt5 color-orange" id="runoutvalue"></div>
                                </div>
                                <div class="col-xs-6 col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetAdditionalDetail.ThresholdDeliveryRequest)<span class="pl4 color-red">*</span>
                                        <div class="input-group">
                                            @Html.TextBoxFor(m => m.AssetAdditionalDetail.ThresholdDeliveryRequest, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.ThresholdDeliveryRequest)
                                            <span class="input-group-addon percent-symbol">@Resource.constSymbolPercent</span>
                                        </div>
                                        <span id="couldgo-Level-validation-error" class="field-validation-error hide-element"></span>
                                        <div class="fs12 f-bold pt5 color-orange" id="thresholddeliveryrequestvalue"></div>
                                    </div>
                                </div>
                                <div class="col-xs-6 col-sm-3">
                                    @Html.LabelFor(m => m.AssetAdditionalDetail.PhysicalPumpStop)
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.AssetAdditionalDetail.PhysicalPumpStop, new { @class = "form-control" })
                                        <span class="input-group-addon percent-symbol">@Resource.constSymbolPercent</span>
                                    </div>
                                    <span id="physicalpumpstop-validation-error" class="field-validation-error hide-element"></span>
                                    <div class="fs12 f-bold pt5 color-orange" id="physicalpumpstopvalue"></div>
                                </div>
                                <div class="col-xs-6 col-sm-3">
                                    @Html.LabelFor(m => m.AssetAdditionalDetail.WaterLevel)
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.AssetAdditionalDetail.WaterLevel, new { @class = "form-control" })
                                        <span class="input-group-addon water-level hide-element">@Model.UoM.ToString()</span>
                                        <span class="input-group-addon percent-symbol waterlevel-percent">@Resource.constSymbolPercent</span>
                                    </div>
                                    @*<span id="water-level-validation-error" class="field-validation-error hide-element"></span>
                                      <div class="fs12 f-bold pt5 color-orange waterlevel-percent" id="waterlevelvalue"></div>*@
                                    @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.WaterLevel)
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <div class="form-group delivery-day mt20">
                                        @Html.LabelFor(m => m.AssetAdditionalDetail.TankAcceptDelivery)
                                        @Html.ListBoxFor(m => m.AssetAdditionalDetail.TankAcceptDelivery, new SelectList(CommonHelperMethods.GetWeekDays(), "Id", "Code", 0), new { @class = "form-control multi-select schedule-days", @placeholder = Resource.lblDay })
                                        @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.TankAcceptDelivery)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row well bg-white shadow-a radius10 mb15">
        <div class="col-sm-12">
            <h4 class="pb10">Additional Tank Details</h4>
            <div class="row">
                <div class="container ml0">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="row">
                                <div class="col-xs-6 col-sm-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetAdditionalDetail.Manufacturer)
                                        @Html.TextBoxFor(m => m.AssetAdditionalDetail.Manufacturer, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.Manufacturer)
                                    </div>
                                </div>
                                <div class="col-xs-6 col-sm-2">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetAdditionalDetail.ManiFolded)
                                        @Html.EnumDropDownListFor(m => m.AssetAdditionalDetail.ManiFolded, new { @class = "form-control remove-empty" })
                                        @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.ManiFolded)
                                    </div>
                                </div>
                                <div class="col-xs-6 col-sm-2">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetAdditionalDetail.TankConstruction)
                                        @Html.EnumDropDownListFor(m => m.AssetAdditionalDetail.TankConstruction, new { @class = "form-control remove-empty" })
                                        @Html.ValidationMessageFor(m => m.AssetAdditionalDetail.TankConstruction)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row well bg-white shadow-a radius10 mb15">
        <div class="col-sm-12">
            <h4 class="pb10">Notification Settings</h4>
            <div class="row">
                <div class="col-sm-12">
                    <table class="table">
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.AssetAdditionalDetail.NotificationUponUsageSwing)
                            </td>
                            <td width="30%">
                                <div class="input-group">
                                    @Html.TextBoxFor(m => m.AssetAdditionalDetail.NotificationUponUsageSwing, new { @class = "form-control" })
                                    <span class="input-group-addon percent-symbol">@Resource.constSymbolPercent</span>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.AssetAdditionalDetail.NotificationUponUsageSwingValue)
                            </td>
                            <td>
                                <div class="input-group">
                                    @Html.TextBoxFor(m => m.AssetAdditionalDetail.NotificationUponUsageSwingValue, new { @class = "form-control" })
                                    <span class="input-group-addon fs11">@Model.UoM.ToString()</span>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.AssetAdditionalDetail.NotificationUponInventorySwing)
                            </td>
                            <td>
                                <div class="input-group">
                                    @Html.TextBoxFor(m => m.AssetAdditionalDetail.NotificationUponInventorySwing, new { @class = "form-control" })
                                    <span class="input-group-addon percent-symbol">@Resource.constSymbolPercent</span>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.LabelFor(m => m.AssetAdditionalDetail.NotificationUponInventorySwingValue)
                            </td>
                            <td>
                                <div class="input-group">
                                    @Html.TextBoxFor(m => m.AssetAdditionalDetail.NotificationUponInventorySwingValue, new { @class = "form-control" })
                                    <span class="input-group-addon fs11">@Model.UoM.ToString()</span>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-sm-12">
    <div class="row well bg-white shadow-a radius10 mb15 forecasting-settings">
            @Html.PartialFor("~/Views/Shared/Forcasting/_PartialIMSForecasting.cshtml", m => m.ForcastingPreference)
    </div>
</div>
<!-- tank image starts -->
<div class="col-sm-12">
    <div class="row well bg-white shadow-a radius10 mb15">
        <div class="col-sm-12">
            <h4 class="pb10">@Resource.headingImage</h4>
            <div class="row">
                <div class="col-sm-3">
                    <div class="row">
                        <div id="image-block" class="text-center">
                            @if (@Model.DisplayMode == PageDisplayMode.Edit)
                            {
                                @Html.HiddenFor(m => m.Image.Id)
                                @Html.HiddenFor(m => m.Image.Data)
                                @Html.HiddenFor(m => m.Image.IsRemoved, new { @class = "image-remove-status" })
                            }
                            @if (Model.Image == null || Model.Image.Id == 0)
                            {
                                <img id="image-ctrl" class="company-logo-dim img-circle" src="~/Content/images/no-image.png" />
                            }
                            else
                            {
                                <img id="image-ctrl" class="company-logo-dim img-circle" src="@Model.Image.FilePath" />
                            }
                            <input type="file" class="hidden" id="btn-logo" name="imageFile">
                        </div>
                    </div>
                    <div class="row mt5">
                        <div class="col-xs-6 text-right">
                            <input type="button" class="btn btn-primary btn-xs" id="choose-file" value="@Resource.btnLabelSelect">
                        </div>
                        <div class="col-xs-6 text-left">
                            <input type="button" class="btn btn-danger btn-xs" id="remove-file" value="@Resource.btnLabelRemove">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 fs10 col-centered">
                            <div class="text-center text-danger mt10" id="img-message"></div>
                            <div class="alert alert-warning fs10 mt10">@Resource.lblCompanyLogoWarning</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- tank image ends -->
@*@using (Html.BeginScripts())
    {*@
@Scripts.RenderFormat(SiteKeys.ScriptVersion, "~/Content/js/image")

<script type="text/javascript" charset="utf-8">
        var isValidStorageTypeId = true;
        initMultiSelect();
        $(document).ready(function () {
            $(".remove-empty option[value='']").remove();
            SetThresholdValues();
            $('#@Html.IdFor(m =>m.AssetAdditionalDetail.TanksConnected)').multiselect({
                maxHeight: 200,
                includeSelectAllOption: true,
                nonSelectedText: 'Select Tank',
				buttonWidth: '125px'
            });

            setDipTestDataCaptureMethod($("#@Html.IdFor(m => m.AssetAdditionalDetail.DipTestMethod)"));
            $("#@Html.IdFor(m => m.AssetAdditionalDetail.DipTestMethod)").on("change", function (e) {
                setDipTestDataCaptureMethod(e.target);
            });

            $("#@Html.IdFor(m => m.FuelType.Id)").on("change", function (e) {
                var selectedFuel = parseInt($(this).val());
                var name = $('#FuelType_Id option').filter(function () { return this.value == selectedFuel }).text();
                $('#@Html.IdFor(m => m.FuelType.Name)').val(name);

                if (!isNaN(selectedFuel) && selectedFuel != undefined && selectedFuel != null && selectedFuel != '') {
                    $.get("@Url.Action("GetTFXFuelTypeByProductTypeId", "Asset",new { area="Buyer" })", {
                        productTypeId: selectedFuel
                    },
                    function (result) {
                        $("#AssetTankFuelTypeId").empty();
                        $("#AssetTankFuelTypeId").append($('<option></option>').val('').html("Select Fuel Type"));
                        $.each(result.data, function (i, element) {
                            $("#AssetTankFuelTypeId").append($('<option></option>').val(element.Id).html(element.Name));
                        });
                        $("#AssetTankFuelTypeId").val('@Model.AssetTankFuelTypeId');
                    });
                }
            });

            $("#FuelType_Id").trigger("change");

            if ($('#@Html.IdFor(m => m.InventoryDataCaptureType)').val() == '@InventoryDataCaptureType.CallIn') {
                $(".diptest-method-ddl").hide();
                $('.forecasting-settings').hide();
                $("#@Html.IdFor(m => m.AssetAdditionalDetail.DipTestMethod)").val('@((int)DipTestMethod.Manual)').trigger('change');
            }
            else {
                $(".diptest-method-ddl").show();
                $('.forecasting-settings').show();
            }

            $(".veeder-root-input-control").on("change", function (e) {
                var ctrl = $(this);
                if (ctrl.val() != '') {
                    var validationMessageCtrl = ctrl.closest('.veeder-root-controls').find('.veeder-root-validation-msg');
                    validationMessageCtrl.text('');
                }
            });
        });

        $(".select2_demo_3").select2({
            placeholder: "Search Make & Model",
            allowClear: true
        });
        $('.timepicker').datetimepicker({
            format: 'LT',
        });
            $("#@Html.IdFor(m => m.AssetAdditionalDetail.TankId)").focusout(function () {
            ValidateStorageTypeIdAndStorageId();
        });

    $("#@Html.IdFor(m => m.AssetAdditionalDetail.StorageId)").focusout(function () {
        ValidateStorageTypeIdAndStorageId();
    });

    function ValidateStorageTypeIdAndStorageId() {
        var assetId = $("#@Html.IdFor(m=> m.AssetAdditionalDetail.AssetId)").val();
        var tankId = $('#@Html.IdFor(m => m.AssetAdditionalDetail.TankId)').val().trim();
        var storageId = $('#@Html.IdFor(m => m.AssetAdditionalDetail.StorageId)').val().trim();
        validationMessageFor($("#@Html.IdFor(m=>m.AssetAdditionalDetail.TankId)").attr('name'), '');
            if (tankId != null && tankId != "" && storageId != null && storageId != "") {
                $.get("@Url.Action("IsValidTankId", "Validation",new { area= "" })", { jobId:@Model.JobId, assetId: assetId, tankId: tankId, storageId: storageId },
                function (response) {
                    if (!response) {
                        validationMessageFor($("#@Html.IdFor(m=>m.AssetAdditionalDetail.TankId)").attr('name'), '@ResourceMessages.GetMessage(Resource.errMessageTankIdAndStorageIdAlreadyExists)');
                        isValidStorageTypeId = false;
                    }
                    else {
                        isValidStorageTypeId = true;
                    }
                });
            }
        return isValidStorageTypeId;
        }

        $("#@Html.IdFor(m => m.AssetAdditionalDetail.RunOutLevel)").on("change", function (e) {
            SetRunOutValue();
        });

        function SetRunOutValue() {
            var fuelCapacity = $('#@Html.IdFor(m => m.AssetAdditionalDetail.FuelCapacity)').val();
            var runOutLevel = $('#@Html.IdFor(m => m.AssetAdditionalDetail.RunOutLevel)').val();
            if (fuelCapacity != null && fuelCapacity != "" && runOutLevel != null && runOutLevel != "") {

                if (runOutLevel > 100) {
                    $('#runout-Level-validation-error').text('@ResourceMessages.GetMessage(Resource.errMessageInValidPercentValue, new object[] { Resource.lblRunOutLevel })');
                    $('#runout-Level-validation-error').removeClass('hide-element');
                    runoutvalue.innerHTML = '';
                }
                else {
                    $('#runout-Level-validation-error').addClass('hide-element');
                    runoutvalue.innerHTML = (runOutLevel * fuelCapacity) / 100 + ' @Model.UoM.ToString()';
                }
            }
        }

        $("#@Html.IdFor(m => m.AssetAdditionalDetail.PhysicalPumpStop)").on("change", function (e) {
            SetPhysicalPumpStopValue();
        });

        function SetPhysicalPumpStopValue() {
            var fuelCapacity = $('#@Html.IdFor(m => m.AssetAdditionalDetail.FuelCapacity)').val();
            var physicalPumpStop = $('#@Html.IdFor(m => m.AssetAdditionalDetail.PhysicalPumpStop)').val();
            if (fuelCapacity != null && fuelCapacity != "" && physicalPumpStop != null && physicalPumpStop != "") {

                if (physicalPumpStop > 100) {
                    $('#physicalpumpstop-validation-error').text('@ResourceMessages.GetMessage(Resource.errMessageInValidPercentValue, new object[] { Resource.lblPhysicalPumpStop })');
                    $('#physicalpumpstop-validation-error').removeClass('hide-element');
                    physicalpumpstopvalue.innerHTML = '';
                }
                else {
                    $('#physicalpumpstop-validation-error').addClass('hide-element');
                    physicalpumpstopvalue.innerHTML = (physicalPumpStop * fuelCapacity) / 100 + ' @Model.UoM.ToString()';
                }
            }
        }

        $("#@Html.IdFor(m => m.AssetAdditionalDetail.ThresholdDeliveryRequest)").on("change", function (e) {
            SetThresholdDeliveryRequestValue();
        });

        function SetThresholdDeliveryRequestValue() {
            var fuelCapacity = $('#@Html.IdFor(m => m.AssetAdditionalDetail.FuelCapacity)').val();
            var thresholdDeliveryRequest = $('#@Html.IdFor(m => m.AssetAdditionalDetail.ThresholdDeliveryRequest)').val();
            if (fuelCapacity != null && fuelCapacity != "" && thresholdDeliveryRequest != null && thresholdDeliveryRequest != "") {

                if (thresholdDeliveryRequest > 100) {
                    $('#couldgo-Level-validation-error').text('@ResourceMessages.GetMessage(Resource.errMessageInValidPercentValue, new object[] { Resource.lblThresholdDeliveryRequest })');
                    $('#couldgo-Level-validation-error').removeClass('hide-element');
                    thresholddeliveryrequestvalue.innerHTML = '';
                }
                else {
                    $('#couldgo-Level-validation-error').addClass('hide-element');
                    thresholddeliveryrequestvalue.innerHTML = (thresholdDeliveryRequest * fuelCapacity) / 100 + ' @Model.UoM.ToString()';
                }
            }
        }

	$("#@Html.IdFor(m => m.AssetAdditionalDetail.MaxFill)").on("change", function (e) {
            SetMaxFillValue();
        });

    function SetMaxFillValue() {
        var selectedFillType = $('#AssetAdditionalDetail_FillType').find("option:selected").val();
        var fuelCapacity = $('#@Html.IdFor(m => m.AssetAdditionalDetail.FuelCapacity)').val();
        var maxFill = $('#@Html.IdFor(m => m.AssetAdditionalDetail.MaxFill)').val();

        $('#max-fill-validation-error').addClass('hide-element');

        if (selectedFillType == '@((int)FillType.Percent)') {
            if (maxFill > 100) {
                $('#max-fill-validation-error').text('@ResourceMessages.GetMessage(Resource.errMessageInvalidFillGreaterThan, new object[] { Resource.lblMaxFill, Resource.lblFuelCapacity })');
                $('#max-fill-validation-error').removeClass('hide-element');
                $('#maxfillvalue').html('');
            }
            else if (fuelCapacity != null && fuelCapacity != "" && maxFill != null && maxFill != "") {
                    $('#maxfillvalue').html((maxFill * fuelCapacity) / 100 + ' @Model.UoM.ToString()');
            }
        }
        else {
            if (fuelCapacity != null && fuelCapacity != "" && maxFill != null && maxFill != "" && parseFloat(maxFill) > parseFloat(fuelCapacity)) {
                $('#max-fill-validation-error').text('@ResourceMessages.GetMessage(Resource.errMessageInvalidFillGreaterThan, new object[] { Resource.lblMaxFill, Resource.lblFuelCapacity })');
                $('#max-fill-validation-error').removeClass('hide-element');
                $('#maxfillvalue').html('');
            }
        }
    }

        $("#@Html.IdFor(m => m.AssetAdditionalDetail.MinFill)").on("change", function (e) {
                SetMinFillValue();
        });

	function SetMinFillValue() {
		var selectedFillType = $('#AssetAdditionalDetail_FillType').find("option:selected").val();

			if (selectedFillType == '@((int)FillType.Percent)') {
				var fuelCapacity = $('#@Html.IdFor(m => m.AssetAdditionalDetail.FuelCapacity)').val();
                var minFillPercent = $('#@Html.IdFor(m => m.AssetAdditionalDetail.MinFill)').val();
                if (fuelCapacity != null && fuelCapacity != "" && minFillPercent != null && minFillPercent != "") {
                    $('#minfillvalue').html((minFillPercent * fuelCapacity) / 100 + ' @Model.UoM.ToString()');
                }
			}
    }
    $("#@Html.IdFor(m => m.AssetAdditionalDetail.WaterLevel)").on("change", function (e) {
           SetWaterLevelValue();
        });

    function SetWaterLevelValue() {
        var selectedFillType = $('#AssetAdditionalDetail_FillType').find("option:selected").val();
        var fuelCapacity = $('#@Html.IdFor(m => m.AssetAdditionalDetail.FuelCapacity)').val();
        var waterLevel = $('#@Html.IdFor(m => m.AssetAdditionalDetail.WaterLevel)').val();
        $('#water-level-validation-error').addClass('hide-element');

        if (selectedFillType == '@((int)FillType.Percent)') {
            if (waterLevel > 100) {
                $('#water-level-validation-error').text('@ResourceMessages.GetMessage(Resource.errMessageInvalidFillGreaterThan, new object[] { Resource.lblWaterLevel, Resource.lblFuelCapacity })');
                $('#water-level-validation-error').removeClass('hide-element');
                $('#waterlevelvalue').html('');
            }
            else if (fuelCapacity != null && fuelCapacity != "" && waterLevel != null && waterLevel != "") {
                $('#waterlevelvalue').html((waterLevel * fuelCapacity) / 100 + ' @Model.UoM.ToString()');
            }
        }
        else {
            if (fuelCapacity != null && fuelCapacity != "" && waterLevel != null && waterLevel != "" && parseFloat(waterLevel) > parseFloat(fuelCapacity)) {
                $('#water-level-validation-error').text('@ResourceMessages.GetMessage(Resource.errMessageInvalidFillGreaterThan, new object[] { Resource.lblWaterLevel, Resource.lblFuelCapacity })');
                $('#water-level-validation-error').removeClass('hide-element');
                $('#waterlevelvalue').html('');
            }
        }
    }


        $("#@Html.IdFor(m => m.AssetAdditionalDetail.FuelCapacity)").on("change", function (e) {
            SetThresholdValues();
        });

        function SetThresholdValues() {
            SetRunOutValue();
            SetPhysicalPumpStopValue();
            SetThresholdDeliveryRequestValue();
            SetMaxFillValue();
            SetMinFillValue();
            SetWaterLevelValue();
        }

        $(".filltype").change(function () {
            var selectedFillType = $(this).find("option:selected").val();

            if (selectedFillType == '@((int)FillType.Percent)') {
                $(".max-fillpercent").removeClass("hide-element");
                $(".max-fill").addClass("hide-element");
                $(".min-fillpercent").removeClass("hide-element");
                $(".min-fill").addClass("hide-element");
                $(".waterlevel-percent").removeClass("hide-element");
                $(".water-level").addClass("hide-element");
                SetMaxFillValue();
                SetMinFillValue();
                SetWaterLevelValue();
            }
            else if (selectedFillType == '@((int)FillType.UoM)') {
                $(".max-fillpercent").addClass("hide-element");
                $(".max-fill").removeClass("hide-element");
                $(".min-fillpercent").addClass("hide-element");
                $(".min-fill").removeClass("hide-element");
                $(".waterlevel-percent").addClass("hide-element");
                $(".water-level").removeClass("hide-element");
                $('#min-fill-validation-error').addClass('hide-element');
                $('#max-fill-validation-error').addClass('hide-element');
                $('#water-level-validation-error').addClass('hide-element');
            }
        }).trigger('change');

        function getDefaultImage() {
            return '@Url.Content("~/Content/images/no-image.png", true)';
        };

        function getImageFileError() {
            return '@Resource.errMessageImageFileError';
        };

        function getImageFileWarning() {
            return '@Resource.errMessageImageFileWarning';
        };

        $('#btn-logo').change(function (e) {
            if (e.target.files && e.target.files[0]) {
                $("#btn-save").removeAttr("disabled");
            }
        });

        $("#remove-file").click(function () {
            var image = $('#btn-logo');
            var imageId = parseInt($('#@Html.IdFor(m=>m.Image.Id)').val());
            if ((image.files && image.files[0]) || imageId > 0) {
                $("#btn-save").removeAttr("disabled");
            }
            else {
                $("#btn-save").attr("disabled", "disabled");
            }
    });

    function setDipTestDataCaptureMethod(ele) {
        var dipTestMethodId = parseInt($(ele).find(":selected").val());
        if (!isNaN(dipTestMethodId) && dipTestMethodId == @((int)DipTestMethod.Pedigree)) {
            $('#divPedigreeAssetDBID').removeClass('hide-element');
        }
        else {
            $('#@Html.IdFor(m => m.AssetAdditionalDetail.PedigreeAssetDBID)').val('');
            if (!$('#divPedigreeAssetDBID').hasClass('hide-element'))
                $('#divPedigreeAssetDBID').addClass('hide-element');
        }
        if (!isNaN(dipTestMethodId) && dipTestMethodId == @((int)DipTestMethod.Skybitz)) {
            $('#divSkyBitzRTUID').removeClass('hide-element');
        }
        else {
             $('#@Html.IdFor(m => m.AssetAdditionalDetail.SkyBitzRTUID)').val('');
            if (!$('#divSkyBitzRTUID').hasClass('hide-element'))
                $('#divSkyBitzRTUID').addClass('hide-element');
        }
        if (!isNaN(dipTestMethodId) && dipTestMethodId == @((int)DipTestMethod.Insight360)) {
            $('#divInsite360TankId').removeClass('hide-element');
        }
        else {
             $('#@Html.IdFor(m => m.AssetAdditionalDetail.Insight360TankId)').val('');
            if (!$('#divInsite360TankId').hasClass('hide-element'))
                $('#divInsite360TankId').addClass('hide-element');
        }
        if (!isNaN(dipTestMethodId) && dipTestMethodId == @((int)DipTestMethod.VeederRoot)) {
            $('.veeder-root-controls').removeClass('hide-element');
        }
        else {
            $('#@Html.IdFor(m => m.AssetAdditionalDetail.VeederRootIPAddress)').val('');
            $('#@Html.IdFor(m => m.AssetAdditionalDetail.Port)').val('');
            $('#@Html.IdFor(m => m.AssetAdditionalDetail.VeederRootTankID)').val('');
            $('.veeder-root-controls').addClass('hide-element');
        }
        if (isNaN(dipTestMethodId) || dipTestMethodId == @((int)DipTestMethod.Select) || dipTestMethodId == @((int)DipTestMethod.Manual)) {
            $("#AssetAdditionalDetail_IsStopATGPolling").prop('checked', false)
            $("#div_IsStopATGPolling").addClass("pntr-none subSectionOpacity");
            $("#AssetAdditionalDetail_IsStopATGPolling").attr('disabled', true);
        }
        else {
            $("#div_IsStopATGPolling").removeClass("pntr-none subSectionOpacity");
            $("#AssetAdditionalDetail_IsStopATGPolling").attr('disabled', false);
        }
    }

    function validateWaterLevelThreshold(isValid) {
        var waterLevel = parseFloat($('#@Html.IdFor(m => m.AssetAdditionalDetail.WaterLevel)').val());
        var maxFill = parseFloat($('#@Html.IdFor(m => m.AssetAdditionalDetail.MaxFill)').val());
        if (waterLevel < 0) {
            validationMessageFor('AssetAdditionalDetail.WaterLevel', '@ResourceMessages.GetMessage(Resource.valMessageInvalid, new object[] { Resource.lblWaterLevel })');
            isValid = false;
        }
        else if (waterLevel > maxFill){
            validationMessageFor('AssetAdditionalDetail.WaterLevel', '@ResourceMessages.GetMessage(Resource.valMessageWaterLevelGreaterThanMaxFill, new object[] { Resource.lblWaterLevel })');
            isValid = false;
        }
        return isValid;
    }

    function validateVeederRootControls(isValid) {
        var veederRootTankId = $.trim($('#@Html.IdFor(m => m.AssetAdditionalDetail.VeederRootTankID)').val());
        var ipAddress = $.trim($('#@Html.IdFor(m => m.AssetAdditionalDetail.VeederRootIPAddress)').val());
        var portNumber = $.trim($('#@Html.IdFor(m => m.AssetAdditionalDetail.Port)').val());
        if (veederRootTankId == null || veederRootTankId == '' || veederRootTankId == undefined) {
            validationMessageFor('AssetAdditionalDetail.VeederRootTankID', '@ResourceMessages.GetMessage(Resource.valMessageRequired, new object[] { Resource.lblVeederRootTankID })');
            isValid = false;
        }
        if (ipAddress == null || ipAddress == '' || ipAddress == undefined) {
            validationMessageFor('AssetAdditionalDetail.VeederRootIPAddress', '@ResourceMessages.GetMessage(Resource.valMessageRequired, new object[] { Resource.lblVeederRootIpAddress })');
            isValid = false;
        }
        if (portNumber == null || portNumber == '' || portNumber == undefined) {
            validationMessageFor('AssetAdditionalDetail.Port', '@ResourceMessages.GetMessage(Resource.valMessageRequired, new object[] { Resource.lblPort })');
            isValid = false;
        }

        return isValid;
    }

    function validateInsite360TankId(isValid) {
        var Insite360TankId = $.trim($('#@Html.IdFor(m => m.AssetAdditionalDetail.Insight360TankId)').val());
        if (Insite360TankId == null || Insite360TankId == '' || Insite360TankId == undefined) {
            validationMessageFor('AssetAdditionalDetail.Insight360TankId', '@ResourceMessages.GetMessage(Resource.valMessageRequired, new object[] { Resource.lblInSight360ID })');
            isValid = false;
        }
        return isValid;

    }

    function validateSkybitzTankId(isValid) {
        var SkyBitzRTUID = $.trim($('#@Html.IdFor(m => m.AssetAdditionalDetail.SkyBitzRTUID)').val());
        if (SkyBitzRTUID == null || SkyBitzRTUID == '' || SkyBitzRTUID == undefined) {
            validationMessageFor('AssetAdditionalDetail.SkyBitzRTUID', '@ResourceMessages.GetMessage(Resource.valMessageRequired, new object[] { Resource.lblSkyBitzRTUID })');
            isValid = false;
        }
        return isValid;

    }

</script>
@*}*@
<!-- partial view ends -->
