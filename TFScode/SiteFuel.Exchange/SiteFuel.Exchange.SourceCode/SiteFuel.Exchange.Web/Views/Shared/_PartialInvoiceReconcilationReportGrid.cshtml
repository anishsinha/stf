@model InvoiceReportFilter
<div class="row">
    <div class="col-md-12">
        <div class="well bg-white shadow-b">
            <div class="ibox mb0">
                <div class="ibox-content no-padding no-border">
                    <div id="invoice-reconciliation-div" class="table-responsive">
                        <table id="Invoicereconcilationreport-datatable" class="table table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>@Resource.gridColumnCustomer</th>
                                    <th>@Resource.gridColumnDropLocation</th>
                                    <th>@Resource.gridColumnInvoice</th>
                                    <th>@Resource.lblReferenceId</th>
                                    <th>@Resource.lblPoNumber</th>
                                    <th>@Resource.gridColumnDropDate</th>
                                    <th>@Resource.gridColumnInvoiceDate</th>
                                    <th>@Resource.gridColumnFuelType</th>
                                    <th class="uom-by-country">@Resource.gridColumnQuantity (<span class="uom-lbl"></span>)</th>
                                    <th>@Resource.gridColumnPaymentDueDate</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var invoiceReconcilationReportGrid, exportColumns = { columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] };
    var ClearFilter;
    $(document).ready(function () {
        SetUoMCurrencyAndRacklables();
        $('#txtInvoiceReportFromDate').val(GetLocalStorage('txtInvoiceReportFromDate'));
        $('#txtInvoiceReportToDate').val(GetLocalStorage('txtInvoiceReportToDate'));

        ClearFilter = function () {
            $('#txtInvoiceReportFromDate').val('');
            $('#txtInvoiceReportToDate').val('');
            $('#txtInvoiceReportToDate').data("DateTimePicker").minDate($("#txtInvoiceReportFromDate").datetimepicker("minDate"));
            ReloadDataTable();
        }

        if ($('#txtInvoiceReportFromDate').length > 0 && $('#txtInvoiceReportToDate').length > 0) {
            $("#txtInvoiceReportFromDate").on('dp.change dp.show', function (e) {
                if (e.date == false)
                    $('#txtInvoiceReportToDate').data("DateTimePicker").minDate($("#txtInvoiceReportFromDate").datetimepicker("minDate"));
                else
                    $('#txtInvoiceReportToDate').data("DateTimePicker").minDate(moment($('#txtInvoiceReportFromDate').val()));
            });
        }

        invoiceReconcilationReportGrid = $('#Invoicereconcilationreport-datatable').DataTable({
            "ajax": {
                "url": "@Url.Action("InvoiceReconcilationGrid", "", new { area = "" })",
                "type": "POST",
                "datatype": "json",
                "data": function (data) {
                    data.StartDate = $('#txtInvoiceReportFromDate').val() == 'undefined' ? "" : $('#txtInvoiceReportFromDate').val();
                    data.EndDate = $('#txtInvoiceReportToDate').val() == 'undefined' ? "" : $('#txtInvoiceReportToDate').val();
                    data.CompanyId = @CurrentUser.CompanyId;
                    data.SupplierCompanyIds = $('select.suppliercompany').val();
                    data.CustomerCompanyIds = $('select.buyercompany').val();
                    data.JobIds = $('select.job').val();
                    data.CompanyProfile = '@((CurrentUser.CompanyTypeId == CompanyType.BuyerAndSupplier || CurrentUser.CompanyTypeId == CompanyType.BuyerSupplierAndCarrier
                                        || CurrentUser.CompanyTypeId == CompanyType.SupplierAndCarrier) ? (int)CurrentUser.CompanySubTypeId:(int)CurrentUser.CompanyTypeId)';
                    $('#invoice-reconciliation-div').append("<div class='pa bg-white top0 left0 z-index5 loading-wrapper'><span class='spinner-dashboard pa'></span></div>");
                },
                "dataSrc": function (json) {
                    $("#invoice-reconciliation-div").find('.loading-wrapper').remove();
                    return json.data;
                }
            },
            'lengthMenu': [[10, 25, 50, 100, 99999999], [10, 25, 50, 100, "All"]],
            aaSorting: [[]],
            "serverSide": true,
            "searchDelay": 500,
            processing: true,
            "searching": { "regex": true },
            "bProcessing": true,
            lengthChange: true,
            "columns": [
                { "data": "Customer", "autoWidth": true, className: "break-word" },
                { "data": "DropLocation", "autoWidth": true, className: "break-word" },
                { "data": "InvoiceNumber", "autoWidth": true, className: "break-word" },
                { "data": "ReferenceId", "autoWidth": true, className: "break-word" },
                { "data": "PoNumber", "autoWidth": true, className: "break-word" },
                { "data": "DropDate", "autoWidth": true, className: "break-word" },
                { "data": "InvoiceDate", "autoWidth": true, className: "break-word" },
                { "data": "FuelType", "autoWidth": true, className: "break-word" },
                { "data": "Quantity", "autoWidth": true },
                { "data": "PaymentDueDate", "autoWidth": true, className: "break-word" }
            ],
            pageLength: 10,
            responsive: true,
            "order": [],
            "initComplete": function (settings, json) {
                wrapperHeight();
                tabGridHeader(this);
            },
            "drawCallback": function (settings, json) {
                hideLinksForCompanyGroup(this);
            },
            "columnDefs": [
                { "name": "InvoiceAmount", "targets": 0 },
                { "name": "FuelAmount", "targets": 1 },
                { "name": "StateSalesTax", "targets": 2 },
                { "name": "StateTax", "targets": 3 },
                { "name": "FederalTax", "targets": 4 },
                { "name": "DeliveryAmount", "targets": 5 },
                { "name": "InvoiceNumber", "targets": 6 },
                { "name": "InvoiceDate", "targets": 7 },
                { "name": "JobName", "targets": 8 },
                { "name": "FuelType", "targets": 9 }
            ],
            dom: '<"html5buttons"B>lTfgitp',
            buttons: [
                { extend: 'csv', title: '@Resource.headingInvoices', exportOptions: exportColumns },
                { extend: 'excel', title: '@Resource.headingInvoices', exportOptions: exportColumns },
                { extend: 'pdf', title: '@Resource.headingInvoices', exportOptions: exportColumns, orientation: 'landscape' },
                {
                    extend: 'print',
                    customize: function (win) {
                        $(win.document.body).addClass('white-bg');
                        $(win.document.body).css('font-size', '10px');

                        $(win.document.body).find('table')
                            .addClass('compact')
                            .css('font-size', 'inherit');
                    }
                }
            ],
            language: {
                sLoadingRecords: "<div class='spinner-small'></div><div class='fs14'>@Resource.lblLoading</div>",
                search: "<button class='btn btn-primary' id='btnsearch7'> <i class='fa fa-search'></i></button>"
            },
            initComplete: function (settings, json) {
                var api = this.api();
                var textBox = $('#Invoicereconcilationreport-datatable_filter .input-sm');
                textBox.unbind();
                textBox.bind('keyup input', function (e) {
                    if (e.keyCode == 8 && !textBox.val() || e.keyCode == 46 && !textBox.val()) {
                    } else if (e.keyCode == 13 || !textBox.val()) {
                        api.search(this.value).draw();
                    }
                });

                $("#btnsearch7").click(function () {
                    api.search(textBox[0].value).draw();
                });
            }
        });
    });

    function ReloadReconciliationDataTable() {
        SetLocalStorage('txtInvoiceReportFromDate', $('#txtInvoiceReportFromDate').val());
        SetLocalStorage('txtInvoiceReportToDate', $('#txtInvoiceReportToDate').val());
        invoiceReconcilationReportGrid.ajax.reload();
    }
</script>

