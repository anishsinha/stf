{"version":3,"sources":["webpack:///src/app/location/lazy-loading/location-routing.module.ts","webpack:///src/app/location/lazy-loading/location.module.ts","webpack:///src/app/location/models/location.ts","webpack:///src/app/location/pickup-location/bulk-plants/bulk-plants.component.ts","webpack:///src/app/location/pickup-location/bulk-plants/bulk-plants.component.html","webpack:///src/app/location/pickup-location/pickup-location.component.ts","webpack:///src/app/location/pickup-location/pickup-location.component.html","webpack:///src/app/location/pickup-location/terminals/terminals.component.ts","webpack:///src/app/location/pickup-location/terminals/terminals.component.html"],"names":["routelocation","path","component","data","title","LocationRoutingModule","forChild","imports","exports","LocationModule","declarations","LocationDetailsModel","Country","BulkPlantsComponent","locationSercice","fb","stateService","addresService","dtOptions","dtTrigger","locations","StateList","CountryList","CountryGroupList","_loadingAddress","zoomLevel","toogleMap","screenOptions","position","centerLocationLat","centerLocationLog","CountryCentre","USA","lat","lng","CAN","PickupForm","initPickupForm","countryId","getCountryFilter","setAddressValidator","getStates","subscribe","x","getCountries","getCountryGroup","CAR","exportColumns","columns","pagingType","pageLength","lengthMenu","searching","destroy","dom","buttons","extend","exportOptions","orientation","loadDataTable","IsLoading","GetBulkPlants","refreshDatatable","dtElements","forEach","dtElement","dtInstance","then","next","localStorage","getItem","countryCode","get","value","length","county","find","c","Code","Id","countryGroupId","filter","t","CountryId","CountryGroupId","loc","_pForm","group","Address","control","City","StateId","required","StateCode","CountryCode","ZipCode","County","Latitude","Longitude","Name","clearValidators","updateValueAndValidity","validator","setValidators","event","zipCode","target","getAddress","_address","undefined","setCountryCode","state","country","countrygroup","patchValue","CountyName","markAllAsTouched","markAsDirty","setValue","selectedOptions","text","map","googleMap","setMapCenter","$event","selectedCountryId","setCenter","setZoom","bounds","google","maps","LatLngBounds","LatLng","fitBounds","PostBulkPlantLocation","response","StatusCode","msgsuccess","StatusMessage","closePickUpModal","nativeElement","click","msgerror","reset","setCenterMap","mapReady","clearPickUpform","getAddressByZip","setStateCode","countryChanged","savePickupLocation","selector","templateUrl","styleUrls","PickupLocationComponent","CountryEnum","CountryType","checkWindowSelection","Object","keys","k","setItem","CountryFilter","locationViewType","bulkPLantComponent","terminalComponent","type","changeViewType","onCountryChange","TerminalsComponent","locationService","terminals","mapTerminals","serverSide","processing","ajax","dataTablesParameters","callback","requestModel","getTerminals","resp","SetMapTerminals","recordsTotal","recordsFiltered","name","unsubscribe","draw"],"mappings":";;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,QAAMA,aAAa,GAAW,CAC1B;AACIC,UAAI,EAAE,EADV;AACcC,eAAS,EAAE,kHADzB;AAEIC,UAAI,EAAE;AAAEC,aAAK,EAAE;AAAT;AAFV,KAD0B,CAA9B;;QAUaC,qB;;;;;YAAAA;;;;yBAAAA,qB;AAAqB,O;AAAA,gBAHrB,CAAC,6DAAaC,QAAb,CAAsBN,aAAtB,CAAD,CAGqB,EAFpB,4DAEoB;;;;0HAArBK,qB,EAAqB;AAAA;AAAA,kBAFpB,4DAEoB;AAAA,O;AAFR,K;;;;;sEAEbA,qB,EAAqB;cAJjC,sDAIiC;eAJxB;AACNE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBN,aAAtB,CAAD,CADH;AAENQ,iBAAO,EAAE,CAAC,4DAAD;AAFH,S;AAIwB,Q;;;;;;;;;;ACdlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA0BaC,c;;;;;YAAAA;;;;yBAAAA,c;AAAc,O;AAAA,gBAPd,CACL,8EADK,EAEL,0EAFK,EAGL,gFAHK,EAIL,mEAJK,CAOc;;;;0HAAdA,c,EAAc;AAAA,uBAXnB,kGAWmB,EAVnB,sGAUmB,EATnB,iGASmB;AATD,kBAGlB,8EAHkB,EAIlB,0EAJkB,EAKlB,gFALkB,EAMlB,mEANkB;AASC,O;AAHH,K;;;;;sEAGXA,c,EAAc;cAd1B,sDAc0B;eAdjB;AAENC,sBAAY,EAAE,CACV,kGADU,EAEV,sGAFU,EAGV,iGAHU,CAFR;AAONH,iBAAO,EAAE,CACL,8EADK,EAEL,0EAFK,EAGL,gFAHK,EAIL,mEAJK;AAPH,S;AAciB,Q;;;;;;;;;;AC1B3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAAaI,oB;;;;AAkBb,QAAYC,OAAZ;;AAAA,eAAYA,OAAZ,EAAmB;AACf;AACA;AACA;AACH,KAJD,EAAYA,OAAO,KAAPA,OAAO,MAAnB;;;;;;;;;AClBA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACUgC;;AAA0B;;AAA+B;;;;;;AAA/B;;AAAA;;;;;;;;AAN9C;;AACI;;AAAwF;AAAA;;AAAA;;AAAA,iBAAa,WAAb;AAA8B,SAA9B,EAA+B,UAA/B,EAA+B;AAAA;;AAAA;;AAAA,iBAAa,YAAb;AAA+B,SAA9D;;AACpF;;AACI;;AACI;;AACI;;AAAM;;AAAY;;AAAQ;;AAC1B;;AAAgE;;AACpE;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;AAVgB;;AAAA,+FAAyB,WAAzB,EAAyB,iBAAzB,EAAyB,cAAzB,EAAyB,IAAzB;;AACS;;AAAA;;AAGC;;AAAA;;AACA;;AAAA;;AAA0D;;AAAA;;;;;;AAiCxE;;AACI;;AAAI;;AAAY;;AAChB;;AAAI;;AAAe;;AACnB;;AAAI;;AAAY;;AAChB;;AAAI;;AAAiB;;AACrB;;AAAI;;AAAc;;AAClB;;AAAI;;AAAgB;;AACpB;;AAAI;;AAAiB;;AACzB;;;;;;AAPQ;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;AAsBI;;AACI;;AACJ;;;;;;AAJJ;;AAEI;;AAGJ;;;;;;AAH6B;;AAAA;;;;;;AAYzB;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AAEI;;AAGA;;AAGJ;;;;;;AAN6B;;AAAA;;AAGA;;AAAA;;;;;;AAazB;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AAEI;;AAGA;;AAGJ;;;;;;AAN6B;;AAAA;;AAGA;;AAAA;;;;;;AAYzB;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AAEI;;AAGA;;AAGJ;;;;;;AAN6B;;AAAA;;AAGA;;AAAA;;;;;;AAWzB;;AACI;;AACJ;;;;;;AAF+C;;AAC3C;;AAAA;;;;;;AAKJ;;AACI;;AACJ;;;;;;AAJJ;;AAEI;;AAGJ;;;;;;AAH6B;;AAAA;;;;;;AAazB;;AACI;;AACJ;;;;;;AAFuC;;AACnC;;AAAA;;;;;;AAKJ;;AACI;;AACJ;;;;;;AAJJ;;AAEI;;AAGJ;;;;;;AAH6B;;AAAA;;;;;;AAWzB;;AACI;;AACJ;;;;;;AAF4C;;AACxC;;AAAA;;;;;;AANhB;;AACI;;AACI;;AAAO;;AAAO;;AACd;;AACI;;AAAuB;;AAAc;;AACrC;;AAGJ;;AACJ;;AACJ;;;;;;AANoB;;AAAA;;AACA;;AAAA;;;;;;AAUZ;;;;;;AAiBI;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AAEI;;AAGA;;AAGJ;;;;;;AAN6B;;AAAA;;AAGA;;AAAA;;;;;;AAYzB;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AAEI;;AAGA;;AAGJ;;;;;;AAN6B;;AAAA;;AAGA;;AAAA;;;;;;AAMrC;;AACI;;AACJ;;;;;;AAcxB;;AACI;;AACI;;AACA;;AAAuB;;AAAU;;AACrC;;AACJ;;;;QD3NaC,mB;AAyBT,mCAAoBC,eAApB,EAA8DC,EAA9D,EAAuFC,YAAvF,EAA+HC,aAA/H,EAA8J;AAAA;;AAA1I,aAAAH,eAAA,GAAAA,eAAA;AAA0C,aAAAC,EAAA,GAAAA,EAAA;AAAyB,aAAAC,YAAA,GAAAA,YAAA;AAAwC,aAAAC,aAAA,GAAAA,aAAA;AAxBxH,aAAAC,SAAA,GAAiB,EAAjB;AACA,aAAAC,SAAA,GAA0B,IAAI,4CAAJ,EAA1B;AACA,aAAAC,SAAA,GAAoC,EAApC;AAIA,aAAAC,SAAA,GAAyC,EAAzC;AACA,aAAAC,WAAA,GAA8B,EAA9B;AACA,aAAAC,gBAAA,GAAmC,EAAnC;AACA,aAAAC,eAAA,GAA2B,KAA3B;AAKA,aAAAC,SAAA,GAAY,CAAZ;AACA,aAAAC,SAAA,GAAqB,IAArB;AAEA,aAAAC,aAAA,GAAgB;AAAEC,kBAAQ,EAAE;AAAZ,SAAhB;AACA,aAAAC,iBAAA,GAAoB,UAApB;AACA,aAAAC,iBAAA,GAAoB,CAAC,SAArB;AACC,aAAAC,aAAA,GAAgB;AACpBC,aAAG,EAAE;AAAEC,eAAG,EAAE,WAAP;AAAoBC,eAAG,EAAE,CAAC;AAA1B,WADe;AAEpBC,aAAG,EAAE;AAAEF,eAAG,EAAE,WAAP;AAAoBC,eAAG,EAAE,CAAC;AAA1B;AAFe,SAAhB;AAIyJ;;;;eAEjK,oBAAW;AAAA;;AACP,eAAKE,UAAL,GAAkB,KAAKC,cAAL,CAAoB,IAAI,qEAAJ,EAApB,CAAlB;AACA,cAAIC,SAAS,GAAG,KAAKC,gBAAL,EAAhB;AACA,eAAKC,mBAAL,CAAyBF,SAAzB;AACA,eAAKtB,YAAL,CAAkByB,SAAlB,GAA8BC,SAA9B,CAAwC,UAAAC,CAAC;AAAA,mBAAI,KAAI,CAACtB,SAAL,GAAiBsB,CAArB;AAAA,WAAzC;AACA,eAAK3B,YAAL,CAAkB4B,YAAlB,GAAiCF,SAAjC,CAA2C,UAAAC,CAAC;AAAA,mBAAI,KAAI,CAACrB,WAAL,GAAmBqB,CAAvB;AAAA,WAA5C;AACA,eAAK3B,YAAL,CAAkB6B,eAAlB,CAAkC,yDAAQC,GAA1C,EAA+CJ,SAA/C,CAAyD,UAAAC,CAAC;AAAA,mBAAI,KAAI,CAACpB,gBAAL,GAAwBoB,CAA5B;AAAA,WAA1D;AACA,cAAII,aAAa,GAAG;AAAEC,mBAAO,EAAE;AAAX,WAApB;AACA,eAAK9B,SAAL,GAAiB;AACb+B,sBAAU,EAAE,gBADC;AAEbC,sBAAU,EAAE,EAFC;AAGbC,sBAAU,EAAE,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,GAAb,EAAkB,CAAC,CAAnB,CAAD,EAAwB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,GAAb,EAAkB,KAAlB,CAAxB,CAHC;AAIbC,qBAAS,EAAE,IAJE;AAKbC,mBAAO,EAAE,IALI;AAMbC,eAAG,EAAE,0BANQ;AAObC,mBAAO,EAAE,CACL;AAAEC,oBAAM,EAAE,MAAV;AAAkBC,2BAAa,EAAEV;AAAjC,aADK,EAEL;AAAES,oBAAM,EAAE,KAAV;AAAiBpD,mBAAK,EAAE,kBAAxB;AAA4CqD,2BAAa,EAAEV;AAA3D,aAFK,EAGL;AAAES,oBAAM,EAAE,KAAV;AAAiBpD,mBAAK,EAAE,kBAAxB;AAA4CsD,yBAAW,EAAE,WAAzD;AAAsED,2BAAa,EAAEV;AAArF,aAHK,EAIL;AAAES,oBAAM,EAAE,OAAV;AAAmBC,2BAAa,EAAEV;AAAlC,aAJK;AAPI,WAAjB;AAeA,eAAKY,aAAL;AACH;;;eAED,yBAAa;AAAA;;AACT,eAAKC,SAAL,GAAiB,IAAjB;AACA,eAAK9C,eAAL,CAAqB+C,aAArB,CAAmC,KAAKtB,gBAAL,EAAnC,EAA4DG,SAA5D,CAAsE,UAACvC,IAAD,EAAU;AAC5E,gBAAIA,IAAI,IAAI,IAAZ,EAAkB;AACd,oBAAI,CAACiB,SAAL,GAAiBjB,IAAjB;;AACA,oBAAI,CAAC2D,gBAAL;AACH;;AACD,kBAAI,CAACF,SAAL,GAAiB,KAAjB;AACH,WAND;AAOH;;;eACD,4BAAgB;AACZ,eAAKG,UAAL,CAAgBC,OAAhB,CAAwB,UAACC,SAAD,EAAmC;AACvD,gBAAIA,SAAS,CAACC,UAAd,EAA0B;AACtBD,uBAAS,CAACC,UAAV,CAAqBC,IAArB,CAA0B,UAACD,UAAD,EAAgC;AAAEA,0BAAU,CAACb,OAAX;AAAuB,eAAnF;AACH;AACJ,WAJD;AAKA,eAAKlC,SAAL,CAAeiD,IAAf;AACH;;;eAED,4BAAgB;AACZ,iBAAQC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAD,GAA+CD,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAA/C,GAA6FD,YAAY,CAACC,OAAb,CAAqB,uBAArB,IAAgDD,YAAY,CAACC,OAAb,CAAqB,uBAArB,CAAhD,GAAgG,CAApM;AACH;;;aAED,eAAuB;AACnB,cAAIC,WAAW,GAAG,KAAKnC,UAAL,CAAgBoC,GAAhB,CAAoB,aAApB,EAAmCC,KAArD;;AACA,cAAIF,WAAW,IAAI,KAAKjD,WAApB,IAAmC,KAAKA,WAAL,CAAiBoD,MAAjB,GAA0B,CAAjE,EAAoE;AAEhEH,uBAAW,GAAGA,WAAW,IAAI,IAAf,GAAsB,KAAtB,GAA8BA,WAA5C;AACA,gBAAIjC,SAAS,GAAG,CAAhB;AACA,gBAAIqC,MAAM,GAAG,KAAKrD,WAAL,CAAiBsD,IAAjB,CAAsB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACC,IAAF,IAAUP,WAAd;AAAA,aAAvB,CAAb;AACA,gBAAGI,MAAM,IAAIA,MAAM,CAACI,EAApB,EACIzC,SAAS,GAAGqC,MAAM,CAACI,EAAnB;;AAEJ,gBAAIzC,SAAS,IAAI,yDAAQQ,GAAzB,EAA8B;AAC1B,kBAAIkC,cAAc,GAAG,KAAK5C,UAAL,CAAgBoC,GAAhB,CAAoB,gBAApB,EAAsCC,KAA3D;AACA,qBAAO,KAAKpD,SAAL,CAAe4D,MAAf,CAAsB,UAAAC,CAAC;AAAA,uBAAIA,CAAC,CAACC,SAAF,IAAe7C,SAAf,KAA6B0C,cAAc,IAAG,CAAjB,IAAsBE,CAAC,CAACE,cAAF,IAAoBJ,cAAvE,CAAJ;AAAA,eAAvB,CAAP;AACH,aAHD,MAIK;AACD,qBAAO,KAAK3D,SAAL,CAAe4D,MAAf,CAAsB,UAAAC,CAAC;AAAA,uBAAIA,CAAC,CAACC,SAAF,IAAe7C,SAAnB;AAAA,eAAvB,CAAP;AACH;AACJ;AACJ;;;eAED,wBAAe+C,GAAf,EAAwC;AACpC,cAAIC,MAAM,GAAG,KAAKvE,EAAL,CAAQwE,KAAR,CAAc;AACvBC,mBAAO,EAAE,KAAKzE,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACG,OAApB,CADc;AAEvBE,gBAAI,EAAE,KAAK3E,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACK,IAApB,CAFiB;AAGvBC,mBAAO,EAAE,KAAK5E,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACM,OAApB,EAA6B,CAAC,0DAAWC,QAAZ,CAA7B,CAHc;AAIvBC,qBAAS,EAAE,KAAK9E,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACQ,SAApB,EAA+B,CAAC,0DAAWD,QAAZ,CAA/B,CAJY;AAKvBE,uBAAW,EAAE,KAAK/E,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACS,WAApB,EAAiC,CAAC,0DAAWF,QAAZ,CAAjC,CALU;AAMvBT,qBAAS,EAAE,KAAKpE,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACF,SAApB,EAA+B,CAAC,0DAAWS,QAAZ,CAA/B,CANY;AAOvBG,mBAAO,EAAE,KAAKhF,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACU,OAApB,CAPc;AAQvBC,kBAAM,EAAE,KAAKjF,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACW,MAApB,CARe;AASvBC,oBAAQ,EAAE,KAAKlF,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACY,QAApB,CATa;AAUvBC,qBAAS,EAAE,KAAKnF,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACa,SAApB,CAVY;AAWvBC,gBAAI,EAAE,KAAKpF,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACc,IAApB,EAA0B,CAAC,0DAAWP,QAAZ,CAA1B,CAXiB;AAYvBR,0BAAc,EAAE,KAAKrE,EAAL,CAAQ0E,OAAR,CAAgBJ,GAAG,CAACD,cAApB;AAZO,WAAd,CAAb;;AAcA,iBAAOE,MAAP;AACH;;;eAED,6BAAoBhD,SAApB,EAAoC;AAChC,cAAIA,SAAS,IAAI,yDAAQQ,GAAzB,EAA8B;AAC1B,iBAAKV,UAAL,CAAgBoC,GAAhB,CAAoB,SAApB,EAA+B4B,eAA/B;AACA,iBAAKhE,UAAL,CAAgBoC,GAAhB,CAAoB,SAApB,EAA+B6B,sBAA/B;AAEA,iBAAKjE,UAAL,CAAgBoC,GAAhB,CAAoB,MAApB,EAA4B4B,eAA5B;AACA,iBAAKhE,UAAL,CAAgBoC,GAAhB,CAAoB,MAApB,EAA4B6B,sBAA5B;AAEA,iBAAKjE,UAAL,CAAgBoC,GAAhB,CAAoB,SAApB,EAA+B4B,eAA/B;AACA,iBAAKhE,UAAL,CAAgBoC,GAAhB,CAAoB,SAApB,EAA+B6B,sBAA/B,GAR0B,CAU1B;AACA;;AAEA,iBAAKjE,UAAL,CAAgBoC,GAAhB,CAAoB,UAApB,EAAgC4B,eAAhC;AACA,iBAAKhE,UAAL,CAAgBoC,GAAhB,CAAoB,UAApB,EAAgC6B,sBAAhC;AAEA,iBAAKjE,UAAL,CAAgBoC,GAAhB,CAAoB,WAApB,EAAiC4B,eAAjC;AACA,iBAAKhE,UAAL,CAAgBoC,GAAhB,CAAoB,WAApB,EAAiC6B,sBAAjC;AACH,WAlBD,MAmBK;AACD,gBAAIC,SAAS,GAAG,CAAC,0DAAWV,QAAZ,CAAhB;AACA,iBAAKxD,UAAL,CAAgBoC,GAAhB,CAAoB,SAApB,EAA+B+B,aAA/B,CAA6CD,SAA7C;AACA,iBAAKlE,UAAL,CAAgBoC,GAAhB,CAAoB,SAApB,EAA+B6B,sBAA/B;AAEA,iBAAKjE,UAAL,CAAgBoC,GAAhB,CAAoB,MAApB,EAA4B+B,aAA5B,CAA0CD,SAA1C;AACA,iBAAKlE,UAAL,CAAgBoC,GAAhB,CAAoB,MAApB,EAA4B6B,sBAA5B;AAEA,iBAAKjE,UAAL,CAAgBoC,GAAhB,CAAoB,SAApB,EAA+B+B,aAA/B,CAA6CD,SAA7C;AACA,iBAAKlE,UAAL,CAAgBoC,GAAhB,CAAoB,SAApB,EAA+B6B,sBAA/B,GATC,CAWD;AACA;;AAEA,iBAAKjE,UAAL,CAAgBoC,GAAhB,CAAoB,UAApB,EAAgC+B,aAAhC,CAA8CD,SAA9C;AACA,iBAAKlE,UAAL,CAAgBoC,GAAhB,CAAoB,UAApB,EAAgC6B,sBAAhC;AAEA,iBAAKjE,UAAL,CAAgBoC,GAAhB,CAAoB,WAApB,EAAiC+B,aAAjC,CAA+CD,SAA/C;AACA,iBAAKlE,UAAL,CAAgBoC,GAAhB,CAAoB,WAApB,EAAiC6B,sBAAjC;AAGH;AACJ;;;eAED,yBAAgBG,KAAhB,EAA0B;AAAA;;AACtB,cAAMC,OAAO,GAAWD,KAAK,CAACE,MAAN,CAAajC,KAArC,CADsB,CAEtB;AACA;;AACA,cAAIgC,OAAO,CAAC/B,MAAR,GAAiB,CAArB,EAAwB;AACpB,iBAAKlD,eAAL,GAAuB,IAAvB;AACA,iBAAKP,aAAL,CAAmB0F,UAAnB,CAA8BF,OAA9B,EACK/D,SADL,CACe,UAAAvC,IAAI,EAAI;AACf,oBAAI,CAACqB,eAAL,GAAuB,IAAvB;;AACA,kBAAMoF,QAAQ,GAAG,MAAI,CAACxE,UAAL,CAAgBoC,GAAhB,CAAoB,SAApB,CAAjB;;AACA,kBAAIrE,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI0G,SAAxB,IAAqC1G,IAAI,CAAC2F,WAAL,IAAoB,IAA7D,EAAmE;AAC/D,sBAAI,CAACgB,cAAL,CAAoB3G,IAApB;;AACAA,oBAAI,CAACqF,OAAL,GAAeoB,QAAQ,CAACnC,KAAxB;AACA,oBAAIO,cAAc,GAAG,IAArB;;AACA,oBAAM+B,KAAK,GAAG,MAAI,CAAC1F,SAAL,CAAeuD,IAAf,CAAoB,UAAAjC,CAAC;AAAA,yBAAIA,CAAC,CAACmC,IAAF,IAAU3E,IAAI,CAAC0F,SAAnB;AAAA,iBAArB,CAAd;;AACA,oBAAImB,OAAO,GAAG,MAAI,CAAC1F,WAAL,CAAiBsD,IAAjB,CAAsB,UAAAjC,CAAC;AAAA,yBAAIA,CAAC,CAACmC,IAAF,IAAU3E,IAAI,CAAC2F,WAAnB;AAAA,iBAAvB,CAAd;;AACA,oBAAImB,YAAY,GAAG,IAAI,+DAAJ,EAAnB;;AACA,oBAAID,OAAO,IAAIA,OAAO,CAACjC,EAAR,GAAa,CAA5B,EAA+B;AAC3BC,gCAAc,GAAG,CAAjB;AACAiC,8BAAY,CAAClC,EAAb,GAAkB,CAAlB;AACH,iBAHD,MAGO;AACHkC,8BAAY,GAAG,MAAI,CAAC1F,gBAAL,CAAsBqD,IAAtB,CAA2B,UAAAjC,CAAC;AAAA,2BAAIA,CAAC,CAACmC,IAAF,IAAU3E,IAAI,CAAC2F,WAAnB;AAAA,mBAA5B,CAAf;AACAkB,yBAAO,GAAG,IAAI,+DAAJ,EAAV;AACAA,yBAAO,CAACjC,EAAR,GAAa,CAAb;AACAiC,yBAAO,CAAClC,IAAR,GAAe,KAAf;AACH;;AACD,sBAAI,CAAC1C,UAAL,CAAgB8E,UAAhB,CAA2B;AACvBxB,sBAAI,EAAEvF,IAAI,CAACuF,IADY;AAEvBC,yBAAO,EAAEoB,KAAK,GAAGA,KAAK,CAAChC,EAAT,GAAc,IAFL;AAGvBc,2BAAS,EAAE1F,IAAI,CAAC0F,SAHO;AAIvBV,2BAAS,EAAE6B,OAAO,CAACjC,EAJI;AAKvBe,6BAAW,EAAEkB,OAAO,CAAClC,IALE;AAMvBM,gCAAc,EAAE6B,YAAY,CAAClC,EANN;AAOvBgB,yBAAO,EAAE5F,IAAI,CAAC4F,OAPS;AAQvBC,wBAAM,EAAE7F,IAAI,CAACgH,UARU;AASvBlB,0BAAQ,EAAE9F,IAAI,CAAC8F,QATQ;AAUvBC,2BAAS,EAAE/F,IAAI,CAAC+F;AAVO,iBAA3B;;AAYA,sBAAI,CAAC9D,UAAL,CAAgBgF,gBAAhB;;AACA,sBAAI,CAAChF,UAAL,CAAgBiF,WAAhB;AACH;;AACD,oBAAI,CAAC7F,eAAL,GAAuB,KAAvB;AACH,aApCL;AAqCH;AACJ;;;eACD,wBAAerB,IAAf,EAAqB;AACjB,cAAIA,IAAI,CAAC2F,WAAL,IAAoB,IAAxB,EACA;AACI3F,gBAAI,CAAC2F,WAAL,GAAmB,KAAnB;AACH,WAHD,MAIK,IAAI3F,IAAI,CAAC2F,WAAL,IAAoB,IAAxB,EACL;AACI3F,gBAAI,CAAC2F,WAAL,GAAmB,KAAnB;AACH;AACJ;;;eAED,sBAAaU,KAAb,EAAyB;AACrB,eAAKpE,UAAL,CAAgBoC,GAAhB,CAAoB,WAApB,EAAiC8C,QAAjC,CAA0Cd,KAAK,CAACE,MAAN,CAAaa,eAAb,CAA6B,CAA7B,EAAgCC,IAA1E;AACH;;;eAED,kBAASC,GAAT,EAAiB;AACb,eAAKC,SAAL,GAAiBD,GAAjB;AACA,eAAKE,YAAL;AACH;;;eAEM,sBAAaC,MAAb,EAAmB;AACtB,cAAI,CAAC,KAAKxG,SAAL,CAAesD,MAApB,EAA4B;AAC5B,gBAAImD,iBAAiB,GAAG,KAAKtF,gBAAL,EAAxB;AACA,iBAAKV,iBAAL,GAAyB,KAAKE,aAAL,CAAmB,yDAAQ8F,iBAAR,CAAnB,EAA+C5F,GAAxE;AACA,iBAAKH,iBAAL,GAAyB,KAAKC,aAAL,CAAmB,yDAAQ8F,iBAAR,CAAnB,EAA+C3F,GAAxE;;AACA,gBAAI,KAAKwF,SAAT,EAAoB;AAChB,mBAAKA,SAAL,CAAeI,SAAf,CAAyB;AAAE7F,mBAAG,EAAE,KAAKJ,iBAAZ;AAA+BK,mBAAG,EAAE,KAAKJ;AAAzC,eAAzB;AACA,mBAAK4F,SAAL,CAAeK,OAAf,CAAuB,CAAvB;AACC;AACJ;AACJ;;;eAED,wBAAY;AACR,cAAIF,iBAAiB,GAAG,KAAKtF,gBAAL,EAAxB;AACA,eAAKV,iBAAL,GAAyB,KAAKE,aAAL,CAAmB,yDAAQ8F,iBAAR,CAAnB,EAA+C5F,GAAxE;AACA,eAAKH,iBAAL,GAAyB,KAAKC,aAAL,CAAmB,yDAAQ8F,iBAAR,CAAnB,EAA+C3F,GAAxE;;AACA,cAAI,KAAKwF,SAAL,IAAkB,KAAKtG,SAAL,CAAesD,MAAf,IAAyB,CAA3C,IAAgD,KAAKtD,SAAL,CAAesD,MAAf,IAAyB,CAA7E,EAAgF;AAC5E,gBAAMsD,MAAM,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,YAAhB,EAAf;AACAH,kBAAM,CAACxE,MAAP,CAAc,IAAIyE,MAAM,CAACC,IAAP,CAAYE,MAAhB,CAAuB,KAAKvG,iBAA5B,EAA+C,KAAKC,iBAApD,CAAd;AACA,iBAAK4F,SAAL,CAAeW,SAAf,CAAyBL,MAAzB;AACA,iBAAKN,SAAL,CAAeK,OAAf,CAAuB,CAAvB;AACH,WALD,MAKO;AACH,gBAAMC,OAAM,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,YAAhB,EAAf;;AACA,iBAAK/G,SAAL,CAAe4C,OAAf,CAAuB,UAAArB,CAAC,EAAI;AACxBqF,qBAAM,CAACxE,MAAP,CAAc,IAAIyE,MAAM,CAACC,IAAP,CAAYE,MAAhB,CAAuBzF,CAAC,CAACsD,QAAzB,EAAmCtD,CAAC,CAACuD,SAArC,CAAd;AACH,aAFD;AAGA,iBAAKwB,SAAL,CAAeW,SAAf,CAAyBL,OAAzB;AACH;AACJ;;;eAED,8BAAkB;AAAA;;AACd,eAAKlH,eAAL,CAAqBwH,qBAArB,CAA2C,KAAKlG,UAAL,CAAgBqC,KAA3D,EAAkE/B,SAAlE,CAA4E,UAAC6F,QAAD,EAAc;AACtF,gBAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACC,UAAT,IAAuB,CAA/C,EAAkD;AAC9C,gFAAaC,UAAb,CAAwBF,QAAQ,CAACG,aAAjC,EAAgD7B,SAAhD,EAA2DA,SAA3D;;AACA,oBAAI,CAAC8B,gBAAL,CAAsBC,aAAtB,CAAoCC,KAApC;;AACA,oBAAI,CAAClF,aAAL;AACH,aAJD,MAIO;AACH,gFAAamF,QAAb,CAAsBP,QAAQ,CAACG,aAA/B,EAA8C7B,SAA9C,EAAyDA,SAAzD;AACH;AACJ,WARD;AASH;;;eAED,2BAAkB;AACd,eAAKzE,UAAL,CAAgB2G,KAAhB;AACH;;;eAED,0BAAiB;AACb,cAAIzG,SAAS,GAAG,CAAhB;AACA,cAAIiC,WAAW,GAAG,KAAKnC,UAAL,CAAgBoC,GAAhB,CAAoB,aAApB,EAAmCC,KAArD;;AACA,cAAIF,WAAJ,EAAiB;AACb,gBAAIA,WAAW,IAAI,KAAnB,EAA0B;AACtBjC,uBAAS,GAAG,CAAZ;AACH,aAFD,MAGK,IAAIiC,WAAW,IAAI,KAAnB,EAA0B;AAC3BjC,uBAAS,GAAG,CAAZ;AACH;;AACD,iBAAKE,mBAAL,CAAyBF,SAAzB;AACA,iBAAKF,UAAL,CAAgBoC,GAAhB,CAAoB,WAApB,EAAiC8C,QAAjC,CAA0ChF,SAA1C;AACH;AACJ;;;;;;;uBA1RQzB,mB,EAAmB,2I,EAAA,2H,EAAA,oI,EAAA,gI;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA;AAAA;;;oEAKd,qE,EAAkB,I;;;;;;;;;;;;;;;ACvBpC;;AACI;;AACI;;AAA6H;AAAA,mBAAgB,IAAAmI,YAAA,QAAhB;AAAoC,WAApC,EAAqC,UAArC,EAAqC;AAAA,mBAC7I,IAAAC,QAAA,QAD6I;AAC7H,WADwF;;AAEzH;;AAYJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAoG;AAAA,mBAAS,IAAAC,eAAA,EAAT;AAA0B,WAA1B;;AAChG;;AAAsC;;AAC1C;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAqB;;AAAI;;AACzB;;AAAwB;;AAAO;;AAC/B;;AAAqB;;AAAI;;AACzB;;AAA0B;;AAAK;;AAC/B;;AAAuB;;AAAM;;AAC7B;;AAAyB;;AAAQ;;AACjC;;AAA0B;;AAAS;;AACvC;;AACJ;;AACA;;AACI;;AASJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AAGA;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAO;;AAAU;;AACjB;;AACA;;AAMJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAO;;AACd;;AACA;;AASJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAG;;AACV;;AAAkE;AAAA,mBAAS,IAAAC,eAAA,QAAT;AAAgC,WAAhC;;AAAlE;;AAEA;;AASJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAI;;AACX;;AACA;;AASJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAK;;AACZ;;AAAkF;AAAA,mBAAU,IAAAC,YAAA,QAAV;AAA8B,WAA9B;;AAC9E;;AAAuB;;AAAY;;AACnC;;AAGJ;;AACA;;AAMA;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAa;;AACpB;;AACQ;AAAA,mBAAU,IAAAC,cAAA,EAAV;AAA0B,WAA1B;;AACJ;;AAAuB;;AAAc;;AACrC;;AAGJ;;AACA;;AAMJ;;AACJ;;AACA;;AAWA;;AACI;;AACI;;AAAO;;AAAM;;AACb;;AACA;;AASJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAQ;;AACf;;AACA;;AASJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAS;;AAChB;;AACA;;AASJ;;AACJ;;AACA;;AAGJ;;AACJ;;AACA;;AACI;;AAA6F;;AAAM;;AACnG;;AAAqD;AAAA,mBAAS,IAAAC,kBAAA,EAAT;AAA6B,WAA7B;;AAAuD;;AAAG;;AACnH;;AACJ;;AACJ;;AACJ;;AACJ;;AAIA;;;;AAtOiB;;AAAA,kFAAc,WAAd,EAAc,IAAd,EAAc,UAAd,EAAc,qBAAd,EAAc,MAAd,EAAc,aAAd,EAAc,WAAd,EAAc,qBAAd,EAAc,mBAAd,EAAc,IAAd,EAAc,0BAAd,EAAc,iBAAd,EAAc,gBAAd,EAAc,IAAd;;AAES;;AAAA;;AA0BuE;;AAAA,+FAAuB,WAAvB,EAAuB,aAAvB;;AAarE;;AAAA;;AAsBY;;AAAA;;AAKM;;AAAA;;AAYA;;AAAA;;AAgBA;;AAAA;;AAeA;;AAAA;;AAeF;;AAAA;;AACA;;AAAA;;AAIE;;AAAA;;AAcF;;AAAA;;AACA;;AAAA;;AAIE;;AAAA;;AAQA;;AAAA;;AAeA;;AAAA;;AAeA;;AAAA;;AAeA;;AAAA;;AAW4B;;AAAA;;AAOhC;;AAAA;;AAStB;;AAAA;;;;;;;;;sEDtNPzI,mB,EAAmB;cAN/B,uDAM+B;eANrB;AACT0I,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAMqB,Q;;;;;;;;;;;;gBAK3B,0D;iBAAa,qE;;;gBAQb,uD;iBAAU,kB;;;;;;;;;;;;AE/Bf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACYgB;;AAAyD;;AAAY;;;;;;AAA7B;;AAAiB;;AAAA;;;;;;AAMzE;;AAA2C;;AAAU;;;;;;AACrD;;AAA6C;;AAAU;;;;QDR1CC,uB;AAST,yCAAc;AAAA;;AANP,aAAAC,WAAA,GAA8B,wDAA9B;AACA,aAAAC,WAAA,GAAmB,EAAnB;AAKU;;;;eAEjB,oBAAW;AAAA;;AACP,eAAKC,oBAAL;AACA,eAAKD,WAAL,GAAoBE,MAAM,CAACC,IAAP,CAAY,KAAKJ,WAAjB,EAA8B1E,MAA9B,CAAqC,UAAA+E,CAAC;AAAA,mBAAI,OAAO,MAAI,CAACL,WAAL,CAAiBK,CAAjB,CAAP,KAA+B,QAAnC;AAAA,WAAtC,EAAgGvC,GAAhG,CAAoG,UAAA9E,CAAC,EAAI;AAAE,mBAAO;AAAEoC,gBAAE,EAAE,MAAI,CAAC4E,WAAL,CAAiBhH,CAAjB,CAAN;AAA2BwD,kBAAI,EAAExD,CAAjC;AAAoCmC,kBAAI,EAAE;AAA1C,aAAP;AAAuE,WAAlL,CAApB;AACH;;;eAEM,2BAAkB;AACrBT,sBAAY,CAAC4F,OAAb,CAAqB,mBAArB,EAAkD,KAAKC,aAAvD;;AACA,cAAI,KAAKC,gBAAL,IAAyB,CAA7B,EAAgC;AAC5B,iBAAKC,kBAAL,CAAwBzG,aAAxB;AACH,WAFD,MAEO;AACH,iBAAK0G,iBAAL,CAAuB1G,aAAvB;AACH;AACJ;;;eAEM,wBAAe2G,IAAf,EAAwB;AAC3BjG,sBAAY,CAAC4F,OAAb,CAAqB,kBAArB,EAAiDK,IAAjD;AACA,eAAKH,gBAAL,GAAwBG,IAAxB;AACH;;;eACO,gCAAoB;AACxB,eAAKH,gBAAL,GAAyB9F,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAD,GAA8CD,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAA9C,GAA0F,CAAlH;AACA,eAAK4F,aAAL,GAAsB7F,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAD,GAA+CD,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAA/C,GAA6FD,YAAY,CAACC,OAAb,CAAqB,uBAArB,IAAgDD,YAAY,CAACC,OAAb,CAAqB,uBAArB,CAAhD,GAAgG,CAAlN;AACH;;;;;;;uBAhCQoF,uB;AAAuB,K;;;YAAvBA,uB;AAAuB,0C;AAAA;AAAA;oEAMrB,iF,EAAkB,I;;oEAClB,sF,EAAmB,I;;;;;;;;;;;;;;;AClBlC;;AACI;;AACI;;AACI;;AACI;;AACA;;AAAuB;AAAA,mBAAS,IAAAa,cAAA,CAAe,CAAf,CAAT;AAA0B,WAA1B;;AAA4B;;AAAS;;AAC5D;;AACA;;AAAmB;AAAA,mBAAS,IAAAA,cAAA,CAAe,CAAf,CAAT;AAA0B,WAA1B;;AAA4B;;AAAW;;AAC9D;;AACJ;;AACA;;AACI;;AAA6B;AAAA;AAAA,aAA2B,QAA3B,EAA2B;AAAA,mBAAW,IAAAC,eAAA,EAAX;AAA4B,WAAvD;;AACzB;;AACJ;;AACJ;;AACJ;;AACJ;;AAEA;;AACA;;;;AAfyD;;AAAA,mFAAe,OAAf,EAAe,CAAf,EAAe,SAAf,EAAe,yBAAf;;AAEA;;AAAA,mFAAe,OAAf,EAAe,CAAf,EAAe,SAAf,EAAe,yBAAf;;AAKhB;;AAAA;;AACjB;;AAAA;;AAMT;;AAAA;;AACE;;AAAA;;;;;;;;;sEDRJd,uB,EAAuB;cALnC,uDAKmC;eALzB;AACTH,kBAAQ,EAAE,qBADD;AAETC,qBAAW,EAAE,kCAFJ;AAGTC,mBAAS,EAAE,CAAC,iCAAD;AAHF,S;AAKyB,Q;;;;gBAM/B,uD;iBAAU,iF;;;gBACV,uD;iBAAU,sF;;;;;;;;;;;;AElBf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACIY;;AACI;;AAAwF;AAAA;;AAAA;;AAAA,iBAAa,UAAb;AAA8B,SAA9B,EAA+B,UAA/B,EAA+B;AAAA;;AAAA;;AAAA,iBAAa,WAAb;AAA+B,SAA9D;;AACpF;;AACI;;AACI;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;AAPgB;;AAAA,8FAAyB,WAAzB,EAAyB,gBAAzB,EAAyB,cAAzB,EAAyB,IAAzB;;AACS;;AAAA;;AAET;;AAAA;;;;;;AA4B5B;;AACI;;AACI;;AACA;;AAAuB;;AAAU;;AACrC;;AACJ;;;;QD3BagB,kB;AAoBT,kCAAoBC,eAApB,EAAsD;AAAA;;AAAlC,aAAAA,eAAA,GAAAA,eAAA;AAnBb,aAAAxJ,SAAA,GAAiB,EAAjB;AACA,aAAAC,SAAA,GAA0B,IAAI,4CAAJ,EAA1B;AACA,aAAAwJ,SAAA,GAAoC,EAApC;AACA,aAAAC,YAAA,GAAuC,EAAvC;AAKA,aAAAnJ,SAAA,GAAY,CAAZ;AACA,aAAAC,SAAA,GAAqB,IAArB;AAEA,aAAAC,aAAA,GAAgB;AAAEC,kBAAQ,EAAE;AAAZ,SAAhB;AACA,aAAAC,iBAAA,GAAoB,UAApB;AACA,aAAAC,iBAAA,GAAoB,CAAC,SAArB;AACC,aAAAC,aAAA,GAAgB;AACpBC,aAAG,EAAE;AAAEC,eAAG,EAAE,WAAP;AAAoBC,eAAG,EAAE,CAAC;AAA1B,WADe;AAEpBC,aAAG,EAAE;AAAEF,eAAG,EAAE,WAAP;AAAoBC,eAAG,EAAE,CAAC;AAA1B;AAFe,SAAhB;AAKiD;;;;eAGzD,oBAAW;AAAA;;AACP,cAAIa,aAAa,GAAG;AAAEC,mBAAO,EAAE;AAAX,WAApB;AACA,eAAK9B,SAAL,GAAiB;AACb+B,sBAAU,EAAE,gBADC;AAEbC,sBAAU,EAAE,CAFC;AAGbC,sBAAU,EAAE,CAAC,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,CAAD,EAAkB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,CAAlB,CAHC;AAIb0H,sBAAU,EAAE,IAJC;AAKbC,sBAAU,EAAE,IALC;AAMbC,gBAAI,EAAE,cAACC,oBAAD,EAA4BC,QAA5B,EAAyC;AAC3C,kBAAIC,YAAY,GAAGF,oBAAnB;AACAE,0BAAY,CAAC,WAAD,CAAZ,GAA4B,MAAI,CAAC3I,gBAAL,EAA5B;;AACA,oBAAI,CAACmI,eAAL,CAAqBS,YAArB,CAAkCD,YAAlC,EAAgDxI,SAAhD,CAA0D,UAAC0I,IAAD,EAA8B;AACpF,sBAAI,CAACT,SAAL,GAAiBS,IAAI,CAACjL,IAAtB;;AACA,sBAAI,CAACkL,eAAL;;AACIJ,wBAAQ,CAAC;AACLK,8BAAY,EAAEF,IAAI,CAACE,YADd;AAELC,iCAAe,EAAEH,IAAI,CAACG,eAFjB;AAGLpL,sBAAI,EAAEiL,IAAI,CAACjL;AAHN,iBAAD,CAAR;AAKH,eARL;AASH,aAlBY;AAmBbmD,eAAG,EAAE,0BAnBQ;AAoBbC,mBAAO,EAAE,CACL;AAAEC,oBAAM,EAAE,MAAV;AAAkBC,2BAAa,EAAEV;AAAjC,aADK,EAEL;AAAES,oBAAM,EAAE,KAAV;AAAiBpD,mBAAK,EAAE,kBAAxB;AAA4CqD,2BAAa,EAAEV;AAA3D,aAFK,EAGL;AAAES,oBAAM,EAAE,KAAV;AAAiBpD,mBAAK,EAAE,kBAAxB;AAA4CsD,yBAAW,EAAE,WAAzD;AAAsED,2BAAa,EAAEV;AAArF,aAHK,EAIL;AAAES,oBAAM,EAAE,OAAV;AAAmBC,2BAAa,EAAEV;AAAlC,aAJK,CApBI;AA0BbC,mBAAO,EAAE,CACL;AAAE5C,mBAAK,EAAE,MAAT;AAAiBD,kBAAI,EAAE,MAAvB;AAA+BqL,kBAAI,EAAE;AAArC,aADK,EAEL;AAAEpL,mBAAK,EAAE,cAAT;AAAyBD,kBAAI,EAAE,cAA/B;AAA+CqL,kBAAI,EAAE;AAArD,aAFK,EAGL;AAAEpL,mBAAK,EAAE,gBAAT;AAA2BD,kBAAI,EAAE,eAAjC;AAAkDqL,kBAAI,EAAE;AAAxD,aAHK,EAIL;AAAEpL,mBAAK,EAAE,SAAT;AAAoBD,kBAAI,EAAE,SAA1B;AAAqCqL,kBAAI,EAAE;AAA3C,aAJK,EAKL;AAAEpL,mBAAK,EAAE,MAAT;AAAiBD,kBAAI,EAAE,MAAvB;AAA+BqL,kBAAI,EAAE;AAArC,aALK,EAML;AAAEpL,mBAAK,EAAE,OAAT;AAAkBD,kBAAI,EAAE,WAAxB;AAAqCqL,kBAAI,EAAE;AAA3C,aANK;AA1BI,WAAjB;AAkCH;;;eACD,2BAAe;AACX,eAAKrK,SAAL,CAAeiD,IAAf;AACH;;;eAED,uBAAW;AACP;AACA,eAAKjD,SAAL,CAAesK,WAAf;AACH;;;eACD,2BAAkB;AACd,eAAKb,YAAL,GAAoB,KAAKD,SAAL,CAAe1F,MAAf,CAAsB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACe,QAAF,IAAc,CAAd,IAAmBf,CAAC,CAACgB,SAAF,IAAe,CAAtC;AAAA,WAAvB,CAApB;AACH;;;eAED,yBAAa;AACT,eAAKpC,gBAAL;AACH;;;eAED,4BAAmB;AACf,cAAI,KAAKG,SAAL,CAAeC,UAAnB,EAA+B;AAC3B,iBAAKD,SAAL,CAAeC,UAAf,CAA0BC,IAA1B,CAA+B,UAACD,UAAD,EAAgC;AAC3DA,wBAAU,CAACwH,IAAX;AACH,aAFD;AAGH;AACJ;;;eAED,4BAAgB;AACZ,iBAAQrH,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAD,GAA+CD,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAA/C,GAA6FD,YAAY,CAACC,OAAb,CAAqB,uBAArB,IAAgDD,YAAY,CAACC,OAAb,CAAqB,uBAArB,CAAhD,GAAgG,CAApM;AACH;;;eAED,kBAASmD,GAAT,EAAiB;AACb,eAAKC,SAAL,GAAiBD,GAAjB;AACA,eAAKE,YAAL;AACH;;;eAEM,sBAAaC,MAAb,EAAmB;AACtB,cAAI,CAAC,KAAKgD,YAAL,CAAkBlG,MAAvB,EAA+B;AAC/B,gBAAImD,iBAAiB,GAAG,KAAKtF,gBAAL,EAAxB;AACA,iBAAKV,iBAAL,GAAyB,KAAKE,aAAL,CAAmB,yDAAQ8F,iBAAR,CAAnB,EAA+C5F,GAAxE;AACA,iBAAKH,iBAAL,GAAyB,KAAKC,aAAL,CAAmB,yDAAQ8F,iBAAR,CAAnB,EAA+C3F,GAAxE;;AACA,gBAAI,KAAKwF,SAAT,EAAoB;AAChB,mBAAKA,SAAL,CAAeI,SAAf,CAAyB;AAAE7F,mBAAG,EAAE,KAAKJ,iBAAZ;AAA+BK,mBAAG,EAAE,KAAKJ;AAAzC,eAAzB;AACA,mBAAK4F,SAAL,CAAeK,OAAf,CAAuB,CAAvB;AACC;AACJ;AACJ;;;eAED,wBAAY;AACR,cAAIF,iBAAiB,GAAG,KAAKtF,gBAAL,EAAxB;AACA,eAAKV,iBAAL,GAAyB,KAAKE,aAAL,CAAmB,yDAAQ8F,iBAAR,CAAnB,EAA+C5F,GAAxE;AACA,eAAKH,iBAAL,GAAyB,KAAKC,aAAL,CAAmB,yDAAQ8F,iBAAR,CAAnB,EAA+C3F,GAAxE;;AACA,cAAI,KAAKwF,SAAL,IAAkB,KAAKiD,SAAL,CAAejG,MAAf,IAAyB,CAA3C,IAAgD,KAAKiG,SAAL,CAAejG,MAAf,IAAyB,CAA7E,EAAgF;AAC5E,gBAAMsD,MAAM,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,YAAhB,EAAf;AACAH,kBAAM,CAACxE,MAAP,CAAc,IAAIyE,MAAM,CAACC,IAAP,CAAYE,MAAhB,CAAuB,KAAKvG,iBAA5B,EAA+C,KAAKC,iBAApD,CAAd;AACA,iBAAK4F,SAAL,CAAeW,SAAf,CAAyBL,MAAzB;AACA,iBAAKN,SAAL,CAAeK,OAAf,CAAuB,CAAvB;AACH,WALD,MAKO;AACH,gBAAMC,QAAM,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,YAAhB,EAAf;;AACA,iBAAKwC,SAAL,CAAe3G,OAAf,CAAuB,UAAArB,CAAC,EAAI;AACxBqF,sBAAM,CAACxE,MAAP,CAAc,IAAIyE,MAAM,CAACC,IAAP,CAAYE,MAAhB,CAAuBzF,CAAC,CAACsD,QAAzB,EAAmCtD,CAAC,CAACuD,SAArC,CAAd;AACH,aAFD;AAGA,iBAAKwB,SAAL,CAAeW,SAAf,CAAyBL,QAAzB;AACH;AACJ;;;;;;;uBAzHQyC,kB,EAAkB,2I;AAAA,K;;;YAAlBA,kB;AAAkB,oC;AAAA;AAAA;oEAOhB,qE,EAAkB,I;;;;;;;;;;;;;;ACrBjC;;AACI;;AACI;;AAA6H;AAAA,mBAAgB,IAAAzB,YAAA,QAAhB;AAAoC,WAApC,EAAqC,UAArC,EAAqC;AAAA,mBAC7I,IAAAC,QAAA,QAD6I;AAC7H,WADwF;;AAEzH;;AASJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAqB;;AAAI;;AACzB;;AAA6B;;AAAY;;AACzC;;AAA8B;;AAAc;;AAC5C;;AAAwB;;AAAO;;AAC/B;;AAAqB;;AAAI;;AACzB;;AAA0B;;AAAK;;AACnC;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACA;;;;AAlCiB;;AAAA,kFAAc,WAAd,EAAc,IAAd,EAAc,UAAd,EAAc,qBAAd,EAAc,MAAd,EAAc,aAAd,EAAc,WAAd,EAAc,qBAAd,EAAc,mBAAd,EAAc,IAAd,EAAc,0BAAd,EAAc,iBAAd,EAAc,gBAAd,EAAc,IAAd;;AAES;;AAAA;;AAgBsF;;AAAA,+FAAuB,WAAvB,EAAuB,aAAvB;;AAgB5F;;AAAA;;;;;;;;;sEDtBPwB,kB,EAAkB;cAN9B,uDAM8B;eANpB;AACPlB,kBAAQ,EAAE,eADH;AAEPC,qBAAW,EAAE,4BAFN;AAGPC,mBAAS,EAAE,CAAC,2BAAD;AAHJ,S;AAMoB,Q;;;;;;gBAO1B,uD;iBAAU,qE","file":"location-lazy-loading-location-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { PickupLocationComponent } from 'src/app/location/pickup-location/pickup-location.component';\r\n\r\nconst routelocation: Routes = [\r\n    {\r\n        path: \"\", component: PickupLocationComponent,\r\n        data: { title: 'Supplier Location' }\r\n    }\r\n];\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routelocation)],\r\n    exports: [RouterModule]\r\n})\r\nexport class LocationRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PickupLocationComponent } from '../pickup-location/pickup-location.component';\r\nimport { LocationRoutingModule } from './location-routing.module';\r\nimport { SharedModule } from 'src/app/modules/shared.module';\r\nimport { BulkPlantsComponent } from '../pickup-location/bulk-plants/bulk-plants.component';\r\nimport { TerminalsComponent } from '../pickup-location/terminals/terminals.component';\r\nimport { DirectiveModule } from 'src/app/modules/directive.module';\r\nimport { DataTablesModule } from 'angular-datatables';\r\n\r\n\r\n\r\n@NgModule({\r\n\r\n    declarations: [        \r\n        PickupLocationComponent,\r\n        BulkPlantsComponent,\r\n        TerminalsComponent\r\n    ],\r\n    imports: [\r\n        LocationRoutingModule,\r\n        SharedModule,\r\n        DirectiveModule,\r\n        DataTablesModule,\r\n    ]\r\n})\r\nexport class LocationModule { }\r\n","export class LocationDetailsModel {\r\n    public Id: number;\r\n    public Name: string;\r\n    public Abbreviation: string;\r\n    public ControlNumber: string;\r\n    public Address: string;\r\n    public StateCode: string;\r\n    public Latitude: number;\r\n    public Longitude: number;\r\n    public City: string;\r\n    public County: string;\r\n    public ZipCode: string;\r\n    public StateId: number;\r\n    public CountryId: number;\r\n    public CountryCode: string;\r\n    public CountryGroupId: number;\r\n}\r\n\r\nexport enum Country {\r\n    \"USA\" = 1,\r\n    \"CAN\" = 2,\r\n    \"CAR\" = 4\r\n}","import { Component, OnInit, ViewChildren, QueryList, ElementRef, ViewChild } from '@angular/core';\r\nimport { LocationService } from '../../services/location.service';\r\nimport { Subject } from 'rxjs';\r\nimport { DataTableDirective } from 'angular-datatables';\r\nimport { LocationDetailsModel, Country } from '../../models/location';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { DropdownItem, StateDropdownExtendedItem, StatelistService } from '../../../statelist.service';\r\nimport { AddressService } from '../../../address.service';\r\nimport { Declarations } from '../../../declarations.module';\r\n\r\nexport declare var google: any;\r\n\r\n@Component({\r\n  selector: 'app-bulk-plants',\r\n  templateUrl: './bulk-plants.component.html',\r\n  styleUrls: ['./bulk-plants.component.css']\r\n})\r\n\r\nexport class BulkPlantsComponent implements OnInit {\r\n    public dtOptions: any = {};\r\n    public dtTrigger: Subject<any> = new Subject();\r\n    public locations: LocationDetailsModel[] = [];\r\n    public IsLoading: boolean;\r\n    @ViewChildren(DataTableDirective) dtElements: QueryList<DataTableDirective>;\r\n    public PickupForm: FormGroup;\r\n    public StateList: StateDropdownExtendedItem[] = [];\r\n    public CountryList: DropdownItem[] = [];\r\n    public CountryGroupList: DropdownItem[] = [];\r\n    public _loadingAddress: boolean = false;\r\n    //public GridName: typeof GridName = GridName; \r\n\r\n    @ViewChild('closePickUpModal') closePickUpModal: ElementRef;\r\n\r\n    public zoomLevel = 4;\r\n    public toogleMap: Boolean = true;\r\n    public googleMap: any;\r\n    public screenOptions = { position: 3 };\r\n    public centerLocationLat = 47.1853106;\r\n    public centerLocationLog = -125.36955;\r\n    private CountryCentre = {\r\n        USA: { lat: 39.11757961, lng: -103.8784 },\r\n        CAN: { lat: 57.88251631, lng: -98.54842922 }\r\n    };\r\n    constructor(private locationSercice: LocationService, private fb: FormBuilder, private stateService: StatelistService, private addresService: AddressService) { }\r\n\r\n    ngOnInit() {\r\n        this.PickupForm = this.initPickupForm(new LocationDetailsModel());\r\n        let countryId = this.getCountryFilter();\r\n        this.setAddressValidator(countryId);\r\n        this.stateService.getStates().subscribe(x => this.StateList = x);\r\n        this.stateService.getCountries().subscribe(x => this.CountryList = x);\r\n        this.stateService.getCountryGroup(Country.CAR).subscribe(x => this.CountryGroupList = x);\r\n        let exportColumns = { columns: ':visible' };\r\n        this.dtOptions = {\r\n            pagingType: 'simple_numbers',\r\n            pageLength: 10,\r\n            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, \"All\"]],\r\n            searching: true,\r\n            destroy: true,\r\n            dom: '<\"html5buttons\"B>lTfgitp',\r\n            buttons: [\r\n                { extend: 'copy', exportOptions: exportColumns },\r\n                { extend: 'csv', title: 'Terminals Detail', exportOptions: exportColumns },\r\n                { extend: 'pdf', title: 'Terminals Detail', orientation: 'landscape', exportOptions: exportColumns },\r\n                { extend: 'print', exportOptions: exportColumns }\r\n            ],\r\n        };\r\n\r\n        this.loadDataTable();    \r\n    }\r\n\r\n    loadDataTable(): void {\r\n        this.IsLoading = true;\r\n        this.locationSercice.GetBulkPlants(this.getCountryFilter()).subscribe((data) => {\r\n            if (data != null) {\r\n                this.locations = data;\r\n                this.refreshDatatable();\r\n            }\r\n            this.IsLoading = false;\r\n        });\r\n    }\r\n    refreshDatatable(): void {\r\n        this.dtElements.forEach((dtElement: DataTableDirective) => {\r\n            if (dtElement.dtInstance) {\r\n                dtElement.dtInstance.then((dtInstance: DataTables.Api) => { dtInstance.destroy(); });\r\n            }\r\n        });\r\n        this.dtTrigger.next();\r\n    }\r\n\r\n    getCountryFilter(): any{\r\n        return (localStorage.getItem('countryFilterType')) ? (localStorage.getItem('countryFilterType')) : (localStorage.getItem('countryIdForDashboard') ? localStorage.getItem('countryIdForDashboard') : 1);\r\n    }\r\n    \r\n    get StatesListByCountry(): any[] {\r\n        let countryCode = this.PickupForm.get('CountryCode').value;\r\n        if (countryCode && this.CountryList && this.CountryList.length > 0) {\r\n\r\n            countryCode = countryCode == \"US\" ? \"USA\" : countryCode;\r\n            let countryId = 0;\r\n            let county = this.CountryList.find(c => c.Code == countryCode);\r\n            if(county && county.Id)\r\n                countryId = county.Id;\r\n                \r\n            if (countryId == Country.CAR) {\r\n                let countryGroupId = this.PickupForm.get(\"CountryGroupId\").value;\r\n                return this.StateList.filter(t => t.CountryId == countryId && (countryGroupId ==0 || t.CountryGroupId == countryGroupId));\r\n            }\r\n            else {\r\n                return this.StateList.filter(t => t.CountryId == countryId);\r\n            }\r\n        }\r\n    }\r\n    \r\n    initPickupForm(loc: LocationDetailsModel): FormGroup {\r\n        let _pForm = this.fb.group({\r\n            Address: this.fb.control(loc.Address),\r\n            City: this.fb.control(loc.City),\r\n            StateId: this.fb.control(loc.StateId, [Validators.required]),\r\n            StateCode: this.fb.control(loc.StateCode, [Validators.required]),\r\n            CountryCode: this.fb.control(loc.CountryCode, [Validators.required]),\r\n            CountryId: this.fb.control(loc.CountryId, [Validators.required]),\r\n            ZipCode: this.fb.control(loc.ZipCode),\r\n            County: this.fb.control(loc.County),\r\n            Latitude: this.fb.control(loc.Latitude),\r\n            Longitude: this.fb.control(loc.Longitude),\r\n            Name: this.fb.control(loc.Name, [Validators.required]),\r\n            CountryGroupId: this.fb.control(loc.CountryGroupId)\r\n        });\r\n        return _pForm;\r\n    }\r\n\r\n    setAddressValidator(countryId: any) {\r\n        if (countryId == Country.CAR) {\r\n            this.PickupForm.get('Address').clearValidators();\r\n            this.PickupForm.get('Address').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('City').clearValidators();\r\n            this.PickupForm.get('City').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('ZipCode').clearValidators();\r\n            this.PickupForm.get('ZipCode').updateValueAndValidity();\r\n\r\n            //this.PickupForm.get('County').clearValidators();\r\n            //this.PickupForm.get('County').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('Latitude').clearValidators();\r\n            this.PickupForm.get('Latitude').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('Longitude').clearValidators();\r\n            this.PickupForm.get('Longitude').updateValueAndValidity();\r\n        }\r\n        else {\r\n            let validator = [Validators.required];\r\n            this.PickupForm.get('Address').setValidators(validator);\r\n            this.PickupForm.get('Address').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('City').setValidators(validator);\r\n            this.PickupForm.get('City').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('ZipCode').setValidators(validator);\r\n            this.PickupForm.get('ZipCode').updateValueAndValidity();\r\n\r\n            //this.PickupForm.get('County').setValidators(validator);\r\n            //this.PickupForm.get('County').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('Latitude').setValidators(validator);\r\n            this.PickupForm.get('Latitude').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('Longitude').setValidators(validator);\r\n            this.PickupForm.get('Longitude').updateValueAndValidity();\r\n\r\n\r\n        }\r\n    }\r\n    \r\n    getAddressByZip(event: any): void {\r\n        const zipCode: string = event.target.value;\r\n        //const regexUsa = new RegExp(this.regexUsaZip);\r\n        //const regexCan = new RegExp(this.regexCanZip);\r\n        if (zipCode.length > 2) {\r\n            this._loadingAddress = true;\r\n            this.addresService.getAddress(zipCode)\r\n                .subscribe(data => {\r\n                    this._loadingAddress = true;\r\n                    const _address = this.PickupForm.get('Address');\r\n                    if (data != null && data != undefined && data.CountryCode != null) {\r\n                        this.setCountryCode(data);\r\n                        data.Address = _address.value;\r\n                        let countryGroupId = null;\r\n                        const state = this.StateList.find(x => x.Code == data.StateCode);\r\n                        let country = this.CountryList.find(x => x.Code == data.CountryCode);\r\n                        let countrygroup = new DropdownItem();\r\n                        if (country && country.Id > 0) {\r\n                            countryGroupId = 1;\r\n                            countrygroup.Id = 1;\r\n                        } else {\r\n                            countrygroup = this.CountryGroupList.find(x => x.Code == data.CountryCode);\r\n                            country = new DropdownItem();\r\n                            country.Id = 4;\r\n                            country.Code = \"CAR\";\r\n                        }\r\n                        this.PickupForm.patchValue({\r\n                            City: data.City,\r\n                            StateId: state ? state.Id : null,\r\n                            StateCode: data.StateCode,\r\n                            CountryId: country.Id, \r\n                            CountryCode: country.Code,\r\n                            CountryGroupId: countrygroup.Id,\r\n                            ZipCode: data.ZipCode,\r\n                            County: data.CountyName,\r\n                            Latitude: data.Latitude,\r\n                            Longitude: data.Longitude\r\n                        });\r\n                        this.PickupForm.markAllAsTouched();\r\n                        this.PickupForm.markAsDirty();\r\n                    }\r\n                    this._loadingAddress = false;\r\n                });\r\n        }\r\n    }\r\n    setCountryCode(data) {\r\n        if (data.CountryCode == 'US')\r\n        {\r\n            data.CountryCode = 'USA'\r\n        }\r\n        else if (data.CountryCode == 'CA')\r\n        {\r\n            data.CountryCode = 'CAN'\r\n        }\r\n    }\r\n    \r\n    setStateCode(event: any) {\r\n        this.PickupForm.get('StateCode').setValue(event.target.selectedOptions[0].text);\r\n    }\r\n\r\n    mapReady(map: any): void {\r\n        this.googleMap = map;\r\n        this.setMapCenter();\r\n    }\r\n\r\n    public setCenterMap($event): void {\r\n        if (!this.locations.length) {\r\n        let selectedCountryId = this.getCountryFilter();\r\n        this.centerLocationLat = this.CountryCentre[Country[selectedCountryId]].lat;\r\n        this.centerLocationLog = this.CountryCentre[Country[selectedCountryId]].lng;\r\n        if (this.googleMap) {\r\n            this.googleMap.setCenter({ lat: this.centerLocationLat, lng: this.centerLocationLog });\r\n            this.googleMap.setZoom(4);\r\n            }\r\n        }\r\n    }\r\n\r\n    setMapCenter(): void {\r\n        let selectedCountryId = this.getCountryFilter();\r\n        this.centerLocationLat = this.CountryCentre[Country[selectedCountryId]].lat;\r\n        this.centerLocationLog = this.CountryCentre[Country[selectedCountryId]].lng;\r\n        if (this.googleMap && this.locations.length == 0 && this.locations.length == 0) {\r\n            const bounds = new google.maps.LatLngBounds();\r\n            bounds.extend(new google.maps.LatLng(this.centerLocationLat, this.centerLocationLog));\r\n            this.googleMap.fitBounds(bounds);\r\n            this.googleMap.setZoom(4);\r\n        } else {\r\n            const bounds = new google.maps.LatLngBounds();\r\n            this.locations.forEach(x => {\r\n                bounds.extend(new google.maps.LatLng(x.Latitude, x.Longitude));\r\n            });\r\n            this.googleMap.fitBounds(bounds);\r\n        }\r\n    }\r\n\r\n    savePickupLocation(): void {\r\n        this.locationSercice.PostBulkPlantLocation(this.PickupForm.value).subscribe((response) => {\r\n            if (response != null && response.StatusCode == 0) {\r\n                Declarations.msgsuccess(response.StatusMessage, undefined, undefined);\r\n                this.closePickUpModal.nativeElement.click();\r\n                this.loadDataTable();\r\n            } else {\r\n                Declarations.msgerror(response.StatusMessage, undefined, undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    clearPickUpform() {\r\n        this.PickupForm.reset();\r\n    }\r\n\r\n    countryChanged() {\r\n        let countryId = 1;\r\n        let countryCode = this.PickupForm.get('CountryCode').value;\r\n        if (countryCode) {\r\n            if (countryCode == \"CAN\") {\r\n                countryId = 2;\r\n            }\r\n            else if (countryCode == \"CAR\") {\r\n                countryId = 4;\r\n            }\r\n            this.setAddressValidator(countryId);\r\n            this.PickupForm.get('CountryId').setValue(countryId);\r\n        }\r\n    }\r\n}","<div class=\"row mb10\">\r\n    <div class=\"col-sm-12\">\r\n        <agm-map [maxZoom]=\"16\" [fitBounds]=\"true\" [latitude]=\"centerLocationLat\" [zoom]=\"zoomLevel\" [longitude]=\"centerLocationLog\" (boundsChange)=\"setCenterMap($event)\"\r\n                 (mapReady)=\"mapReady($event)\" [fullscreenControl]=\"true\" [fullscreenControlOptions]=\"screenOptions\" [mapTypeControl]=\"true\">\r\n            <ng-container *ngFor=\"let loc of locations\">\r\n                <agm-marker [latitude]=\"loc.Latitude\" [longitude]=\"loc.Longitude\" [agmFitBounds]=\"true\" (mouseOver)=\"infoWindow.open()\" (mouseOut)=\"infoWindow.close()\">\r\n                    <agm-info-window [disableAutoPan]=\"false\" #infoWindow>\r\n                        <div>\r\n                            <p>\r\n                                <span>{{loc.Name}}</span> <br />\r\n                                <span *ngIf=\"loc.Address\">{{loc.Address}}, {{loc.City}}, </span>{{loc.StateCode}}\r\n                            </p>\r\n                        </div>\r\n                    </agm-info-window>\r\n                </agm-marker>\r\n            </ng-container>\r\n        </agm-map>\r\n    </div>\r\n</div>\r\n<div class=\"row mb10\">\r\n    <div class=\"col-md-12\">\r\n        <button class=\"btn btn-default btn-xs pull-left\" data-toggle=\"modal\" data-target=\"#pickup-location\" (click)=\"clearPickUpform()\">\r\n            <i class=\"fas fa-map-marker-alt\"></i> Add New Pick-Up Location\r\n        </button>\r\n    </div>\r\n</div>\r\n<div class=\"well bg-white shadow-b pr\">\r\n    <div class=\"ibox mb0\">\r\n        <div class=\"ibox-content no-padding no-border\">\r\n            <div class=\"table-responsive\">\r\n                <table id=\"table-bulk-plants\" class=\"table table-bordered table-hover\" datatable [dtOptions]=\"dtOptions\" [dtTrigger]=\"dtTrigger\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th data-key=\"tName\">Name</th>\r\n                            <th data-key=\"tAddress\">Address</th>\r\n                            <th data-key=\"tCity\">City</th>\r\n                            <th data-key=\"tStateCode\">State</th>\r\n                            <th data-key=\"tCounty\">County</th>\r\n                            <th data-key=\"tLatitude\">Latitude</th>\r\n                            <th data-key=\"tLongitude\">Longitude</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let row of locations\">\r\n                            <td>{{row.Name}}</td>\r\n                            <td>{{row.Address}}</td>\r\n                            <td>{{row.City}}</td>\r\n                            <td>{{row.StateCode}}</td>\r\n                            <td>{{row.County}}</td>\r\n                            <td>{{row.Latitude}}</td>\r\n                            <td>{{row.Longitude}}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Modal -->\r\n<div class=\"modal fade\" id=\"pickup-location\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\">\r\n    <div class=\"modal-dialog\" role=\"document\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-body\">\r\n                <div class=\"mt10 mb10\">\r\n                    <div class=\"row pr\" [formGroup]=\"PickupForm\">\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Bulk Plant</label>\r\n                                <input type=\"text\" formControlName=\"Name\" class=\"form-control\" placeholder=\"Bulk Plant Name\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('Name').errors\r\n                                      && (PickupForm.get('Name').touched || PickupForm.get('Name').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Name').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Address</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"Address\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('Address').errors\r\n                                      && (PickupForm.get('Address').touched || PickupForm.get('Address').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Address').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Address').errors.pattern\">\r\n                                        Invalid (alphanumeric with comma spaces only)\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Zip</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"ZipCode\" (input)=\"getAddressByZip($event)\" />\r\n                                <!--<input type=\"text\" class=\"form-control\" formControlName=\"ZipCode\" (input)=\"getAddressByZip($event)\" />-->\r\n                                <ng-container *ngIf=\"PickupForm.get('ZipCode').errors\r\n                                      && (PickupForm.get('ZipCode').touched || PickupForm.get('ZipCode').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('ZipCode').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('ZipCode').errors.pattern\">\r\n                                        Invalid zipcode\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>City</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"City\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('City').errors\r\n                                      && (PickupForm.get('City').touched || PickupForm.get('City').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('City').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('City').errors.pattern\">\r\n                                        Invalid (alphanumeric with comma spaces only)\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>State</label>\r\n                                <select formControlName=\"StateId\" class=\"form-control\" placeholder=\"Select State\" (change)=\"setStateCode($event)\">\r\n                                    <option [value]=\"null\">Select State</option>\r\n                                    <option *ngFor=\"let st of StatesListByCountry\" [value]=\"st.Id\">\r\n                                        {{st.Name}}\r\n                                    </option>\r\n                                </select>\r\n                                <ng-container *ngIf=\"PickupForm.get('StateId').errors\r\n                                      && (PickupForm.get('StateId').touched || PickupForm.get('StateId').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('StateId').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                </ng-container>\r\n                                <input type=\"hidden\" formControlName=\"StateCode\" />\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Country/Group</label>\r\n                                <select formControlName=\"CountryCode\" class=\"form-control\" placeholder=\"Select Country\"\r\n                                        (change)=\"countryChanged()\">\r\n                                    <option [value]=\"null\">Select Country</option>\r\n                                    <option *ngFor=\"let ct of CountryList\" [value]=\"ct.Code\">\r\n                                        {{ct.Code}}\r\n                                    </option>\r\n                                </select>\r\n                                <ng-container *ngIf=\"PickupForm.get('CountryCode').errors\r\n                                      && (PickupForm.get('CountryCode').touched || PickupForm.get('CountryCode').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('CountryCode').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\" *ngIf=\"PickupForm.get('CountryCode').value == 'CAR'\">\r\n                            <div class=\"form-group\">\r\n                                <label>Country</label>\r\n                                <select formControlName=\"CountryGroupId\" class=\"form-control\" placeholder=\"Select CountryGroup\">\r\n                                    <option [value]=\"null\">Select Country</option>\r\n                                    <option *ngFor=\"let ct of CountryGroupList\" [value]=\"ct.Id\">\r\n                                        {{ct.Name}}\r\n                                    </option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>County</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"County\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('County').errors\r\n                                      && (PickupForm.get('County').touched || PickupForm.get('County').dirty)\">\r\n                                    <!--<label style=\"color:red\" *ngIf=\"PickupForm.get('County').errors.required\">\r\n                                        Required\r\n                                    </label>-->\r\n                                    <!--<label style=\"color:red\" *ngIf=\"PickupForm.get('County').errors.pattern\">\r\n                                        Invalid (alphanumeric with comma spaces only)\r\n                                    </label>-->\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Latitude</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"Latitude\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('Latitude').errors\r\n                                      && (PickupForm.get('Latitude').touched || PickupForm.get('Latitude').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Latitude').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Latitude').errors.pattern\">\r\n                                        Invalid\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Longitude</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"Longitude\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('Longitude').errors\r\n                                      && (PickupForm.get('Longitude').touched || PickupForm.get('Longitude').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Longitude').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Longitude').errors.pattern\">\r\n                                        Invalid\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"pa bg-white z-index5 loading-wrapper\" *ngIf=\"_loadingAddress\">\r\n                            <span class='spinner-dashboard pa'></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"text-right\">\r\n                    <button type=\"button\" class=\"btn\" data-dismiss=\"modal\" #closePickUpModal id=\"btnPickupClose\">Cancel</button>\r\n                    <button type=\"button\" [disabled]=\"!PickupForm.valid\" (click)=\"savePickupLocation()\" class=\"btn btn-primary\">Add</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"loader\" *ngIf=\"IsLoading\">\r\n    <div class=\"loading-content text-center\">\r\n        <div class=\"spinner\"></div>\r\n        <div class=\"font-bold\">Loading...</div>\r\n    </div>\r\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Country } from '../models/location';\nimport { DropdownItem } from '../../statelist.service';\nimport { TerminalsComponent } from './terminals/terminals.component';\nimport { BulkPlantsComponent } from './bulk-plants/bulk-plants.component';\n\n@Component({\n  selector: 'app-pickup-location',\n  templateUrl: './pickup-location.component.html',\n  styleUrls: ['./pickup-location.component.css']\n})\nexport class PickupLocationComponent implements OnInit {\n    public locationViewType: any;\n    public CountryFilter: any;\n    public CountryEnum: typeof Country = Country;\n    public CountryType: any = [];\n\n    @ViewChild(TerminalsComponent) terminalComponent: TerminalsComponent;\n    @ViewChild(BulkPlantsComponent) bulkPLantComponent: BulkPlantsComponent;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.checkWindowSelection();\n        this.CountryType = (Object.keys(this.CountryEnum).filter(k => typeof this.CountryEnum[k] === \"number\") as string[]).map(x => { return { Id: this.CountryEnum[x], Name: x, Code: \"\" } as DropdownItem });\n    }\n\n    public onCountryChange() {\n        localStorage.setItem('countryFilterType', <string>this.CountryFilter);\n        if (this.locationViewType == 2) {\n            this.bulkPLantComponent.loadDataTable();\n        } else {\n            this.terminalComponent.loadDataTable();\n        }\n    }\n\n    public changeViewType(type: any): void {\n        localStorage.setItem('locationViewType', <string>type);\n        this.locationViewType = type;\n    }\n    private checkWindowSelection(): void {\n        this.locationViewType = (localStorage.getItem('locationViewType')) ? (localStorage.getItem('locationViewType')) : 1;\n        this.CountryFilter = (localStorage.getItem('countryFilterType')) ? (localStorage.getItem('countryFilterType')) : (localStorage.getItem('countryIdForDashboard') ? localStorage.getItem('countryIdForDashboard') : 1);\n    }\n}\n","<div class=\"row\">\r\n    <div class=\"col-sm-12 pull-left\">\r\n        <div class=\"dib border pa5 radius-capsule shadow-b\">\r\n            <div class=\"btn-group btn-filter\">\r\n                <input class=\"hide-element\" type=\"radio\" [name]=\"'type'\" [value]=\"1\" [checked]=\"locationViewType==1\">\r\n                <label class=\"btn ml0\" (click)=\"changeViewType(1)\">Terminals</label>\r\n                <input class=\"hide-element\" type=\"radio\" [name]=\"'type'\" [value]=\"2\" [checked]=\"locationViewType==2\">\r\n                <label class=\"btn\" (click)=\"changeViewType(2)\">Bulk Plants</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group pull-right\">\r\n            <select class=\"form-control\" [(ngModel)]=\"CountryFilter\" (change)=\"onCountryChange()\">\r\n                <option *ngFor=\"let key of CountryType\" [value]=\"key.Id\">{{key.Name}}</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<app-terminals *ngIf=\"locationViewType==1\">Loading...</app-terminals>\r\n<app-bulk-plants *ngIf=\"locationViewType==2\">Loading...</app-bulk-plants>","import { Component, OnInit, ViewChildren, QueryList, ViewChild, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { LocationService } from '../../services/location.service';\r\nimport { Subject } from 'rxjs';\r\nimport { DataTableDirective } from 'angular-datatables';\r\nimport { LocationDetailsModel, Country } from '../../models/location';\r\nimport { DataTablesResponse } from '../../../shared/models/DataTable-models';\r\nexport declare var google: any;\r\n\r\n@Component({\r\n    selector: 'app-terminals',\r\n    templateUrl: './terminals.component.html',\r\n    styleUrls: ['./terminals.component.css']\r\n})\r\n\r\nexport class TerminalsComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    public dtOptions: any = {};\r\n    public dtTrigger: Subject<any> = new Subject();\r\n    public terminals: LocationDetailsModel[] = [];\r\n    public mapTerminals: LocationDetailsModel[] = [];\r\n    public IsLoading: boolean;\r\n\r\n    @ViewChild(DataTableDirective) dtElement: DataTableDirective;\r\n\r\n    public zoomLevel = 4;\r\n    public toogleMap: Boolean = true;\r\n    public googleMap: any;\r\n    public screenOptions = { position: 3 };\r\n    public centerLocationLat = 47.1853106;\r\n    public centerLocationLog = -125.36955;\r\n    private CountryCentre = {\r\n        USA: { lat: 39.11757961, lng: -103.8784 },\r\n        CAN: { lat: 57.88251631, lng: -98.54842922 }\r\n    };\r\n\r\n    constructor(private locationService: LocationService) { }\r\n\r\n\r\n    ngOnInit() {\r\n        let exportColumns = { columns: ':visible' };\r\n        this.dtOptions = {\r\n            pagingType: 'simple_numbers',\r\n            pageLength: 5,\r\n            lengthMenu: [[5, 10, 25, 50], [5, 10, 25, 50]],\r\n            serverSide: true,\r\n            processing: true,\r\n            ajax: (dataTablesParameters: any, callback) => {\r\n                let requestModel = dataTablesParameters;\r\n                requestModel['CountryId'] = this.getCountryFilter();\r\n                this.locationService.getTerminals(requestModel).subscribe((resp: DataTablesResponse) => {\r\n                    this.terminals = resp.data;\r\n                    this.SetMapTerminals();\r\n                        callback({\r\n                            recordsTotal: resp.recordsTotal,\r\n                            recordsFiltered: resp.recordsFiltered,\r\n                            data: resp.data\r\n                        });\r\n                    });\r\n            },\r\n            dom: '<\"html5buttons\"B>lTfgitp',\r\n            buttons: [\r\n                { extend: 'copy', exportOptions: exportColumns },\r\n                { extend: 'csv', title: 'Terminals Detail', exportOptions: exportColumns },\r\n                { extend: 'pdf', title: 'Terminals Detail', orientation: 'landscape', exportOptions: exportColumns },\r\n                { extend: 'print', exportOptions: exportColumns }\r\n            ],\r\n            columns: [\r\n                { title: 'Name', data: 'Name', name: 'Name' },\r\n                { title: 'Abbreviation', data: 'Abbreviation', name: 'Abbreviation'  }, \r\n                { title: 'Control Number', data: 'ControlNumber', name: 'ControlNumber' }, \r\n                { title: 'Address', data: 'Address', name: 'Address' }, \r\n                { title: 'City', data: 'City', name: 'City' }, \r\n                { title: 'State', data: 'StateCode', name: 'StateCode' }]\r\n        };\r\n    }\r\n    ngAfterViewInit(): void {\r\n        this.dtTrigger.next();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        // Do not forget to unsubscribe the event\r\n        this.dtTrigger.unsubscribe();\r\n    }\r\n    SetMapTerminals() {\r\n        this.mapTerminals = this.terminals.filter(t => t.Latitude != 0 && t.Longitude != 0);\r\n    }\r\n\r\n    loadDataTable(): void {\r\n        this.refreshDatatable();\r\n    }\r\n\r\n    refreshDatatable() {\r\n        if (this.dtElement.dtInstance) {\r\n            this.dtElement.dtInstance.then((dtInstance: DataTables.Api) => {\r\n                dtInstance.draw();\r\n            });\r\n        }\r\n    }\r\n\r\n    getCountryFilter(): any {\r\n        return (localStorage.getItem('countryFilterType')) ? (localStorage.getItem('countryFilterType')) : (localStorage.getItem('countryIdForDashboard') ? localStorage.getItem('countryIdForDashboard') : 1);\r\n    }\r\n\r\n    mapReady(map: any): void {\r\n        this.googleMap = map;\r\n        this.setMapCenter();\r\n    }\r\n\r\n    public setCenterMap($event): void {\r\n        if (!this.mapTerminals.length) {\r\n        let selectedCountryId = this.getCountryFilter();\r\n        this.centerLocationLat = this.CountryCentre[Country[selectedCountryId]].lat;\r\n        this.centerLocationLog = this.CountryCentre[Country[selectedCountryId]].lng;\r\n        if (this.googleMap) {\r\n            this.googleMap.setCenter({ lat: this.centerLocationLat, lng: this.centerLocationLog });\r\n            this.googleMap.setZoom(4);\r\n            }\r\n        }\r\n    }\r\n\r\n    setMapCenter(): void {\r\n        let selectedCountryId = this.getCountryFilter();\r\n        this.centerLocationLat = this.CountryCentre[Country[selectedCountryId]].lat;\r\n        this.centerLocationLog = this.CountryCentre[Country[selectedCountryId]].lng;\r\n        if (this.googleMap && this.terminals.length == 0 && this.terminals.length == 0) {\r\n            const bounds = new google.maps.LatLngBounds();\r\n            bounds.extend(new google.maps.LatLng(this.centerLocationLat, this.centerLocationLog));\r\n            this.googleMap.fitBounds(bounds);\r\n            this.googleMap.setZoom(4);\r\n        } else {\r\n            const bounds = new google.maps.LatLngBounds();\r\n            this.terminals.forEach(x => {\r\n                bounds.extend(new google.maps.LatLng(x.Latitude, x.Longitude));\r\n            });\r\n            this.googleMap.fitBounds(bounds);\r\n        }\r\n    }\r\n}\r\n","<div class=\"row mb10\">\r\n    <div class=\"col-sm-12\">\r\n        <agm-map [maxZoom]=\"16\" [fitBounds]=\"true\" [latitude]=\"centerLocationLat\" [zoom]=\"zoomLevel\" [longitude]=\"centerLocationLog\" (boundsChange)=\"setCenterMap($event)\"\r\n                 (mapReady)=\"mapReady($event)\" [fullscreenControl]=\"true\" [fullscreenControlOptions]=\"screenOptions\" [mapTypeControl]=\"true\">\r\n            <ng-container *ngFor=\"let loc of mapTerminals\">\r\n                <agm-marker [latitude]=\"loc.Latitude\" [longitude]=\"loc.Longitude\" [agmFitBounds]=\"true\" (mouseOver)=\"infoWindow.open()\" (mouseOut)=\"infoWindow.close()\" >\r\n                    <agm-info-window [disableAutoPan]=\"false\" #infoWindow>\r\n                        <div>\r\n                            {{loc.Name}}\r\n                        </div>\r\n                    </agm-info-window>\r\n                </agm-marker>\r\n            </ng-container>\r\n        </agm-map>\r\n    </div>\r\n</div>\r\n<div class=\"well bg-white shadow-b pr\">\r\n    <div class=\"ibox mb0\">\r\n        <div class=\"ibox-content no-padding no-border\">\r\n            <div class=\"table-responsive\">\r\n                <table id=\"table-terminals\" class=\"table table-bordered table-hover serverside-table\" datatable [dtOptions]=\"dtOptions\" [dtTrigger]=\"dtTrigger\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th data-key=\"tName\">Name</th>\r\n                            <th data-key=\"tAbbreviation\">Abbreviation</th>\r\n                            <th data-key=\"tControlNumber\">Control Number</th>\r\n                            <th data-key=\"tAddress\">Address</th>\r\n                            <th data-key=\"tCity\">City</th>\r\n                            <th data-key=\"tStateCode\">State</th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"loader\" *ngIf=\"IsLoading\">\r\n    <div class=\"loading-content text-center\">\r\n        <div class=\"spinner\"></div>\r\n        <div class=\"font-bold\">Loading...</div>\r\n    </div>\r\n</div>"]}