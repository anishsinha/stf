{"version":3,"sources":["./src/app/superadmin-create-terminals/create-terminals/create-terminal.component.ts","./src/app/superadmin-create-terminals/create-terminals/create-terminal.component.html","./src/app/superadmin-create-terminals/createterminals.service.ts","./src/app/superadmin-create-terminals/master.component.ts","./src/app/superadmin-create-terminals/master.component.html","./src/app/superadmin-create-terminals/models.ts","./src/app/superadmin-create-terminals/superadmin-create-terminal.module.ts","./src/app/superadmin-create-terminals/terminal-product assignment/terminal-product-assignment.component.ts","./src/app/superadmin-create-terminals/terminal-product assignment/terminal-product-assignment.component.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwE;AACJ;AACrC;AAI6B;AAEH;;;;;;;;;;;IC2BT,uEAA4C;IAAA,uDAAyB;IAAA,4DAAO;;;IAAhC,0DAAyB;IAAzB,0FAAyB;;;IACrE,uEAA4C;IAAA,6DAAE;IAAA,4DAAO;;;IAGrD,uEAA6C;IAAA,uDAA0B;IAAA,4DAAO;;;IAAjC,0DAA0B;IAA1B,2FAA0B;;;IACvE,uEAA6C;IAAA,6DAAE;IAAA,4DAAO;;;IAGtD,uEAAuC;IAAA,uDAAoB;IAAA,4DAAO;;;IAA3B,0DAAoB;IAApB,qFAAoB;;;IAC3D,uEAAuC;IAAA,6DAAE;IAAA,4DAAO;;;IAGhD,uEAAoC;IAAA,uDAAiB;IAAA,4DAAO;;;IAAxB,0DAAiB;IAAjB,kFAAiB;;;IACrD,uEAAoC;IAAA,6DAAE;IAAA,4DAAO;;;IAG7C,uEAAyC;IAAA,uDAAsB;IAAA,4DAAO;;;IAA7B,0DAAsB;IAAtB,uFAAsB;;;IAC/D,uEAAyC;IAAA,6DAAE;IAAA,4DAAO;;;IAGlD,uEAA6C;IAAA,uDAA0B;IAAA,4DAAO;;;IAAjC,0DAA0B;IAA1B,2FAA0B;;;IACvE,uEAA6C;IAAA,6DAAE;IAAA,4DAAO;;;;IAxB9D,qEACI;IAAA,qEAAI;IAAA,uDAAiB;IAAA,4DAAK;IAC1B,qEACI;IAAA,4HAA4C;IAC5C,4HAA4C;IAChD,4DAAK;IACL,qEACI;IAAA,4HAA6C;IAC7C,4HAA6C;IACjD,4DAAK;IACL,qEACI;IAAA,8HAAuC;IACvC,8HAAuC;IAC3C,4DAAK;IACL,sEACI;IAAA,8HAAoC;IACpC,8HAAoC;IACxC,4DAAK;IACL,sEACI;IAAA,8HAAyC;IACzC,8HAAyC;IAC7C,4DAAK;IACL,sEACI;IAAA,8HAA6C;IAC7C,8HAA6C;IACjD,4DAAK;IACL,0EACI;IAAA,8EAA4J;IAAtI,4VAAwB,eAAe,gDAA0B;IAAqE,oEAAgC;IAAA,4DAAS;IAEzM,4DAAK;IACT,4DAAK;;;IA7BG,0DAAiB;IAAjB,kFAAiB;IAEX,0DAAqC;IAArC,mGAAqC;IACrC,0DAAqC;IAArC,mGAAqC;IAGrC,0DAAsC;IAAtC,oGAAsC;IACtC,0DAAsC;IAAtC,oGAAsC;IAGtC,0DAAgC;IAAhC,8FAAgC;IAChC,0DAAgC;IAAhC,8FAAgC;IAGhC,0DAA6B;IAA7B,2FAA6B;IAC7B,0DAA6B;IAA7B,2FAA6B;IAG7B,0DAAkC;IAAlC,gGAAkC;IAClC,0DAAkC;IAAlC,gGAAkC;IAGlC,0DAAsC;IAAtC,oGAAsC;IACtC,0DAAsC;IAAtC,oGAAsC;;;IAoC5C,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,2HACI;IAER,4DAAM;;;IAHG,0DAA0B;IAA1B,2FAA0B;;;IAa/B,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,2HACI;IAER,4DAAM;;;IAHG,0DAAkC;IAAlC,mGAAkC;;;IAevC,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,2HACI;IAER,4DAAM;;;IAHG,0DAAmC;IAAnC,oGAAmC;;;IAaxC,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,2HACI;IAER,4DAAM;;;IAHG,0DAAmC;IAAnC,oGAAmC;;;IAmBhB,2EAAyG;IAAA,4DAAC;IAAA,4DAAO;;;IAI7G,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,2HACI;IAER,4DAAM;;;IAHG,0DAA6B;IAA7B,8FAA6B;;;IAStC,2EAAyG;IAAA,4DAAC;IAAA,4DAAO;;;IAK7G,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,2HACI;IAER,4DAAM;;;IAHG,0DAA6B;IAA7B,8FAA6B;;;IAWtC,2EAAyG;IAAA,4DAAC;IAAA,4DAAO;;;IAK7G,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,4HACI;IAER,4DAAM;;;IAHG,0DAA0B;IAA1B,4FAA0B;;;IASnC,2EAAyG;IAAA,4DAAC;IAAA,4DAAO;;;IAS7G,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,4HACI;IAER,4DAAM;;;IAHG,0DAA4B;IAA5B,8FAA4B;;;IAgBjC,6EAEI;IAAA,uDACJ;IAAA,4DAAS;;;;IAHD,2FAAqB;IAAC,mFAAsB;IAEhD,0DACJ;IADI,8FACJ;;;IAGA,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,4HACI;IAER,4DAAM;;;IAHG,0DAA6B;IAA7B,+FAA6B;;;IA6B1C,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,4HACI;IAER,4DAAM;;;IAHG,0DAA8B;IAA9B,gGAA8B;;;IAenC,sEACI;IAAA,sEACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,4HACI;IAER,4DAAM;;;IAHG,0DAA+B;IAA/B,iGAA+B;;;IA+CxG,0EACI;IAAA,0EACI;IAAA,qEAA2B;IAC/B,4DAAM;IACV,4DAAM;;;;ADlTC,MAAM,uBAAuB;IA2BhC,YAAoB,aAA2C,EAAU,EAAe,EAC5E,YAA8B,EAAU,2BAAsD,EAC9F,eAAuC;QAF/B,kBAAa,GAAb,aAAa,CAA8B;QAAU,OAAE,GAAF,EAAE,CAAa;QAC5E,iBAAY,GAAZ,YAAY,CAAkB;QAAU,gCAA2B,GAA3B,2BAA2B,CAA2B;QAC9F,oBAAe,GAAf,eAAe,CAAwB;QAxB5C,wBAAmB,GAA2B,EAAE,CAAC;QACjD,mBAAc,GAAyB,IAAI,4DAAoB,EAAE,CAAC;QACzE,cAAS,GAAQ,EAAE,CAAC;QACpB,cAAS,GAAiB,IAAI,4CAAO,EAAE,CAAC;QAEjC,iBAAY,GAAW,eAAe,CAAC;QACvC,sBAAiB,GAAW,KAAK,CAAC;QAClC,qBAAgB,GAAW,IAAI,CAAC;QAIvC,iBAAY,GAAiB,IAAI,YAAY,EAAE,CAAC;QAEzC,gBAAW,GAAG,EAAE,CAAC;QACjB,gBAAW,GAAG,EAAE,CAAC;QACjB,eAAU,GAAG,EAAE,CAAC;QAChB,uBAAkB,GAAG,EAAE,CAAC;QACxB,qBAAgB,GAAG,EAAE,CAAC;QAGtB,cAAS,GAAY,KAAK,CAAC;IAIqB,CAAC;IAExD,QAAQ;QACJ,IAAI,CAAC,SAAS,GAAG,iBAAiB,CAAC;QACnC,IAAI,aAAa,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;QAC1D,IAAI,CAAC,SAAS,GAAG;YACb,GAAG,EAAE,0BAA0B;YAC/B,OAAO,EAAE;gBACL,EAAE,MAAM,EAAE,QAAQ,EAAE;gBACpB,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,aAAa,EAAE;gBAChD,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,kBAAkB,EAAE,aAAa,EAAE,aAAa,EAAE;gBAC1E,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,kBAAkB,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,aAAa,EAAE;gBACpG,EAAE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE;aACpD;YACD,UAAU,EAAE,oBAAoB;YAChC,UAAU,EAAE,EAAE;YACd,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,EAAE;YACT,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;SAChE,CAAC;QACF,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACvD,IAAI,IAAI,CAAC,iBAAiB,IAAI,CAAC,EAAE,EAAE,QAAQ;YACvC,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,KAAK,CAAC;YACpC,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,CAAC,MAAM,CAAC;SACzC;QACD,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACzD,MAAM,CAAC,4BAA4B,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;IAC3D,CAAC;IACD,WAAW,CAAC,OAAsB;QAC9B,IAAI,OAAO,CAAC,iBAAiB,IAAI,OAAO,CAAC,iBAAiB,CAAC,YAAY,EAAE;YACrE,yBAAyB;YACzB,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC9B,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC;YACvD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC1C,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAClD,MAAM,CAAC,4BAA4B,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;SAC1D;IACL,CAAC;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;QACxB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QACnG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1E,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAChC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1C,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,CAAC,4BAA4B,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;IAC3D,CAAC;IAED,mBAAmB,CAAC,UAAe;QAC/B,IAAI,UAAU,EAAE;YACZ,IAAI,GAAG,GAAG,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAChC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAC3D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAC5D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,sBAAsB,EAAE,CAAC;YACjE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,sBAAsB,EAAE,CAAC;SACrE;aACI;YACD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,eAAe,EAAE,CAAC;YAC1D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,sBAAsB,EAAE,CAAC;YACjE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,eAAe,EAAE,CAAC;YAC3D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,sBAAsB,EAAE,CAAC;SACrE;IACL,CAAC;IACD,YAAY,CAAC,SAAiB;QAC1B,IAAI,SAAS,IAAI,CAAC,EAAE;YAChB,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,KAAK,CAAC;YACpC,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,CAAC,MAAM,CAAC;SACzC;aACI,IAAI,SAAS,IAAI,CAAC,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,SAAS,CAAC;YACxC,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,CAAC,SAAS,CAAC;SAC5C;aACI;YACD,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,EAAE,CAAC;YACjC,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,CAAC,KAAK,CAAC;SACxC;IACL,CAAC;IAED,cAAc;QACV,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1E,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QACnG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1C,MAAM,CAAC,4BAA4B,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;QACvD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAEpC,CAAC;IACM,cAAc;QACjB,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACjD,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aAC3B;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACM,mBAAmB;QACtB,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACvD,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;aAChC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACM,uBAAuB,CAAC,SAAkB;QAC7C,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACnE,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC;aAC7C;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8BAA8B,CAAC,QAA8B;QACzD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACpC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;YAChC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC3D,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;YACpD,aAAa,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC;YACtD,aAAa,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC;YACtD,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC;YAC1C,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;YACpC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;YACxC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACjE,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrE,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC9C,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC;YAC1C,aAAa,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;YACnD,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC9E,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,yDAAU,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;SAEnF,CAAC;QACF,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC,kBAAkB,CAAC;IAEnC,CAAC;IAED,oBAAoB,CAAC,SAAiB;QAClC,IAAI,SAAS,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACtC,IAAI,SAAc,CAAC;YACnB,IAAI,SAAS,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE;gBACjD,SAAS,GAAG,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;aACrC;iBACI;gBACD,SAAS,GAAG,EAAE,CAAC;aAClB;YACD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAChE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,sBAAsB,EAAE,CAAC;YAChE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAC7D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,sBAAsB,EAAE,CAAC;YAC7D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAC/D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,sBAAsB,EAAE,CAAC;YAC/D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAChE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,sBAAsB,EAAE,CAAC;SACnE;IACL,CAAC;IAED,sBAAsB;QAClB,IAAI,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YACnE,IAAI,IAAI,EAAE;gBACN,MAAM,CAAC,qBAAqB,CAAC,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC;gBAC5D,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;gBAChC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;gBACtB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aAC1B;QAEL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,YAAY,CAAC,QAAQ;QACjB,IAAI,QAAQ,EAAE;YACV,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC5D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YAC5E,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAC9E,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAC9E,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC5D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAChE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACtE,oEAAoE;YACpE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,uEAAuE;YACrI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACpE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACtE,IAAI,QAAQ,CAAC,QAAQ,EAAE;gBACnB,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAC5D,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;aAChE;YACD,IAAI,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;YAC/D,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;YACrC,MAAM,CAAC,4BAA4B,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;SAC1D;IACL,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,CAAC;QAC3C,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QAC9B,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,kCAAkC;YAClC,IAAI,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;YAC7C,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBAChE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,EAAE;oBACtC,iEAAY,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;oBAClE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;oBACvB,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;oBAChC,IAAI,CAAC,cAAc,EAAE,CAAC;oBACtB,IAAI,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAgB,CAAC;oBACxE,aAAa,CAAC,KAAK,EAAE,CAAC;oBACtB,IAAI,CAAC,sBAAsB,EAAE,CAAC;iBACjC;qBAAM;oBACH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;oBACvB,iEAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;iBAC7F;YACL,CAAC,CAAC,CAAC;SACN;aACI;YACD,OAAO;SACV;IACL,CAAC;IAED,SAAS,CAAC,IAAY;QAClB,IAAI,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO;;gBAElD,CACA,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK;;wBAEvC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CACxC;QACL,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,UAAU,CAAC,IAAY;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC7D,CAAC;IAEM,eAAe;QAClB,IAAI,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;QAC3D,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBACzD,IAAI,IAAI,EAAE;oBACN,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC5E,IAAI,OAAO,EAAE;wBACT,IAAI,SAAS,GAAG,OAAO,CAAC,EAAE,CAAC;wBAC3B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;wBAC/D,oEAAoE;wBACpE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBAClE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAC1D,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;wBAC/E,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;wBAC3D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAClE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;wBACpE,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;wBAC5C,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;wBAC7C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;wBAEtF,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE;4BAC/C,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;yBACnE;qBACJ;iBACJ;YACL,CAAC,CAAC,CAAC;SACN;IAEL,CAAC;IACD,mBAAmB,CAAC,GAAW,EAAE,IAAY;QACzC,IAAI,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC;QACpE,IAAI,UAAU,IAAI,GAAG,IAAI,IAAI,EAAE;YAC3B,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SACjC;IACL,CAAC;IAED,aAAa,CAAC,GAAG,EAAE,GAAG;QAClB,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC7D,IAAI,IAAI,EAAE;gBACN,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;gBAChC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;gBACjC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAChC;iBACI,EAAE,oEAAoE;gBACvE,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,GAAG,CAAC;gBAClC,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,GAAG,CAAC;aACrC;QAEL,CAAC,CAAC;IACN,CAAC;IACD,iBAAiB,CAAC,OAAgB;QAC9B,IAAI,SAAS,GAAG,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI,IAAI,OAAO,CAAC,WAAW,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,IAAI,IAAI,IAAI,OAAO,CAAC,WAAW,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;QACvM,IAAI,SAAS,GAAG,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI,IAAI,OAAO,CAAC,SAAS,IAAI,EAAE,IAAI,OAAO,CAAC,SAAS,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC;QAEnJ,IAAI,SAAS,EAAE;YACX,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;YAC9F,IAAI,OAAO,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;YACtG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC9D;aACI,8CAA8C;SACnD;YACI,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;YACzE,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7B,IAAI,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBAChC,IAAI,OAAO,EAAE;oBACT,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;iBAC9D;aACJ;SACJ;QAED,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACnE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAEnE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAE/D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAIrE,IAAI,OAAO,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACrE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACvE,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC;YAC/C,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;SACnD;QAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;IAE1F,CAAC;IAED,aAAa,CAAC,KAAK;QACf,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,YAAY,EAAE,sCAAsC,CAAC;aACzF,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;aACzH,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IAC5C,CAAC;IACM,cAAc;QACjB,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;QAC5E,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;IACjF,CAAC;IAED,WAAW;QACP,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;IACjC,CAAC;;8FAvXQ,uBAAuB;uGAAvB,uBAAuB;QCdpC,yEACI;QAAA,sEACI;QAAA,yEACI;QAAA,yEACI;QAAA,wEAA0B;QAAA,oEAAS;QAAA,4DAAK;QACxC,uEAEI;QAFD,0IAAS,mBAAe,iBAAiB,CAAC,IAAC;QAE1C,kEAAoD;QAAA,0EAAiC;QAAA,kEAAO;QAAA,4DAAO;QACvG,4DAAI;QACR,4DAAM;QACV,4DAAM;QACN,0EACI;QAAA,0EACI;QAAA,0EACI;QAAA,0EACI;QAAA,2EACI;QAAA,2EACI;QAAA,6EACI;QAAA,yEACI;QAAA,sEACI;QAAA,sEAAI;QAAA,gEAAI;QAAA,4DAAK;QACb,sEAAI;QAAA,wEAAY;QAAA,4DAAK;QACrB,sEAAI;QAAA,yEAAa;QAAA,4DAAK;QACtB,sEAAI;QAAA,mEAAO;QAAA,4DAAK;QAChB,sEAAI;QAAA,gEAAI;QAAA,4DAAK;QACb,sEAAI;QAAA,iEAAK;QAAA,4DAAK;QACd,sEAAI;QAAA,0EAAc;QAAA,4DAAK;QACvB,sEAAI;QAAA,kEAAM;QAAA,4DAAK;QACnB,4DAAK;QACT,4DAAQ;QACR,yEACI;QAAA,sHACI;QA8BR,4DAAQ;QACZ,4DAAQ;QACZ,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACF,2EACI;QAAA,2EACI;QAAA,2EACI;QAAA,yEAAoF;QAAxD,2IAAS,oBAAgB,IAAC;QAA8B,oEAAgC;QAAA,4DAAI;QACxH,0EAA6B;QAAA,wDAAa;QAAA,4DAAK;QACnD,4DAAM;QACN,2EACI;QAAA,4EACI;QADmC,oJAAY,cAAU,IAAC;QAC1D,2EACI;QAAA,0EACI;QAAA,2EACI;QAAA,0EACI;QAAA,2EACI;QAAA,2EACI;QAAA,6EACI;QAAA,2EAAc;QAAA,4EAAgD;QAAA,6DAAC;QAAA,4DAAO;QAC1E,4DAAQ;QACR,wEACA;QAAA,sHACI;QAIR,4DAAM;QACV,4DAAM;QACN,2EACI;QAAA,2EACI;QAAA,6EACI;QAAA,mFACJ;QAAA,4DAAQ;QACR,wEACA;QAAA,sHACI;QAIR,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,0EACI;QAAA,2EACI;QAAA,2EACI;QAAA,6EACI;QAAA,qFACJ;QAAA,4DAAQ;QACR,wEACA;QAAA,sHACI;QAIR,4DAAM;QACV,4DAAM;QACN,2EACI;QAAA,2EACI;QAAA,6EACI;QAAA,4EACJ;QAAA,4DAAQ;QACR,wEACA;QAAA,sHACI;QAIR,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,2EACI;QAAA,2EACI;QAAA,0EACI;QAAA,2EACI;QAAA,2EACI;QAAA,2EAEI;QAAA,2EACI;QAAA,0EACI;QAAA,2EACI;QAAA,2EACI;QAAA,yEAAO;QAAA,mEAAO;QAAA,4DAAQ;QACtB,wHAAyG;QACzG,wEAEA;QAAA,sHACI;QAIR,4DAAM;QACV,4DAAM;QACN,2EACI;QAAA,2EACI;QAAA,6EAAoC;QAAA,+DAAG;QAAA,4DAAQ;QAC/C,wHAAyG;QACzG,6EAGA;QADO,iJAAU,qBAAiB,IAAC;QAFnC,4DAGA;QAAA,sHACI;QAIR,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,0EACI;QAAA,4EACI;QAAA,4EACI;QAAA,0EAAO;QAAA,iEAAI;QAAA,4DAAQ;QACnB,0HAAyG;QACzG,yEAGA;QAAA,wHACI;QAIR,4DAAM;QACV,4DAAM;QACN,4EACI;QAAA,4EACI;QAAA,0EAAO;QAAA,wEAAW;QAAA,4DAAQ;QAC1B,0HAAyG;QACzG,qEAEiG;QACjG,yEAIA;QAAA,wHACI;QAIR,4DAAM;QACV,4DAAM;QACN,4EACI;QAAA,4EACI;QAAA,8EACI;QAAA,mEAAK;QAAA,6EAAgD;QAAA,8DAAC;QAAA,4DAAO;QACjE,4DAAQ;QACR,+EAII;QAAA,+EAAiB;QAAA,yEAAY;QAAA,4DAAS;QACtC,8HAEI;QAER,4DAAS;QACT,wHACI;QAIR,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,2EACI;QAAA,2EACI;QAAA,4EACI;QAAA,8EAGA;QADuB,kJAAU,wBAAoB,2BAAuB,eAAe,CAAC,OAAO,IAAC;QAFpG,4DAGA;QAAA,8EAC+B;QAAA,sEAAS;QAAA,4DAAQ;QACpD,4DAAM;QACV,4DAAM;QACN,4EACI;QAAA,4EACI;QAAA,8EAAqC;QAAA,qEAAQ;QAAA,4DAAQ;QACrD,8EAMA;QADO,kJAAU,wBAAoB,2BAAuB,UAAU,CAAC,QAAO,2BAAuB,WAAW,CAAC,OAAO,IAAC;QALzH,4DAMA;QAAA,wHACI;QAIR,4DAAM;QACV,4DAAM;QACN,4EACI;QAAA,4EACI;QAAA,8EAAsC;QAAA,sEAAS;QAAA,4DAAQ;QACvD,8EAKA;QADO,kJAAU,wBAAoB,2BAAuB,UAAU,CAAC,QAAO,2BAAuB,WAAW,CAAC,OAAO,IAAC;QAJzH,4DAKA;QAAA,wHACI;QAIR,4DAAM;QACV,4DAAM;QAcV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,4EACI;QAAA,gFACI;QAAA,mFAE0D;QAD9C,+JAAW,yBAAqB,IAAC;QACA,4DAAa;QAC9D,4DAAU;QACd,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,4EACI;QAAA,4EACI;QAAA,8EACA;QAD2F,gJAAS,oBAAgB,IAAC;QAArH,4DACA;QAAA,yEACJ;QAAA,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAO;QACX,4DAAM;QACV,4DAAM;QACV,4DAAM;QAGV,wHACI;;QAvTgB,0DAAiD;QAAjD,yKAAiD;QAWuB,2DAAuB;QAAvB,oFAAuB;QAcvE,2DAA4C;QAA5C,4FAA4C;QA6C3C,0DAAa;QAAb,8EAAa;QAGpC,0DAAgC;QAAhC,6FAAgC;QAWL,2DAAyB;QAAzB,uFAAyB;QAazB,0DAAiC;QAAjC,+FAAiC;QAejC,0DAAkC;QAAlC,gGAAkC;QAalC,0DAAkC;QAAlC,gGAAkC;QAc1B,0DAA2J;QAA3J,mQAA2J;QAM5F,0DAAwD;QAAxD,sHAAwD;QAGnG,0DAA4B;QAA5B,0FAA4B;QAUe,0DAAwD;QAAxD,sHAAwD;QAInG,0DAA4B;QAA5B,0FAA4B;QAYe,0DAAwD;QAAxD,sHAAwD;QAInG,0DAAyB;QAAzB,uFAAyB;QAUkB,0DAAwD;QAAxD,sHAAwD;QAQnG,0DAA2B;QAA3B,yFAA2B;QAkBpB,2DAAuC;QAAvC,2FAAuC;QAI9C,0DAA4B;QAA5B,0FAA4B;QAelC,0DAAe;QAAf,wEAAe;QAYf,0DAAmE;QAAnE,gIAAmE;QAErE,0DAA6B;QAA7B,2FAA6B;QAa3B,0DAAmE;QAAnE,gIAAmE;QAErE,0DAA8B;QAA9B,4FAA8B;QAyB9C,0DAA8B;QAA9B,2FAA8B;QACvB,0DAAmC;QAAnC,gGAAmC;QAsB3E,0DAAiB;QAAjB,+EAAiB;;6FD9SxB,uBAAuB;cALnC,uDAAS;eAAC;gBACT,QAAQ,EAAE,qBAAqB;gBAC/B,WAAW,EAAE,kCAAkC;gBAC/C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aAC/C;;kBAEI,mDAAK;;AA0XH,MAAM,YAAY;IAMrB;QACI,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,EAAE,wDAAwD,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE;IAC3H,CAAC;CACJ;AAEM,MAAM,UAAU;CAGtB;AACM,MAAM,WAAW;CAGvB;;;;;;;;;;;;;AE9ZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACC;AACQ;;;AAK7C,MAAM,sBAAuB,SAAQ,+DAAW;IAOnD,YAAoB,UAAsB;QACtC,KAAK,EAAE,CAAC;QADQ,eAAU,GAAV,UAAU,CAAY;QANlC,2BAAsB,GAAG,qCAAqC,CAAC;QAC/D,2BAAsB,GAAG,qCAAqC,CAAC;QAC/D,iCAA4B,GAAG,iDAAiD,CAAC;QACjF,6BAAwB,GAAG,wDAAwD,CAAC;QACpF,kCAA6B,GAAG,kDAAkD,CAAC;IAI3F,CAAC;IAEM,mBAAmB,CAAC,SAAiB;QACxC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAQ,IAAI,CAAC,sBAAsB,GAAG,aAAa,GAAG,SAAS,CAAC;aACrF,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAQ,qBAAqB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED,mBAAmB,CAAC,QAAa;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,IAAI,CAAC,sBAAsB,EAAE,QAAQ,CAAC;aAClE,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAM,qBAAqB,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;IAEM,gCAAgC,CAAC,SAAiB;QACrD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAQ,IAAI,CAAC,4BAA4B,GAAG,aAAa,GAAG,SAAS,CAAC;aAC3F,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAQ,kCAAkC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3F,CAAC;IAEM,wBAAwB;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAQ,IAAI,CAAC,wBAAwB,CAAC;aAC3D,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAQ,0BAA0B,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACnF,CAAC;IACM,0BAA0B,CAAC,KAAU;QACxC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAM,IAAI,CAAC,6BAA6B,EAAE,KAAK,CAAC;aACtE,IAAI,CAAC,iEAAU,CAAC,IAAI,CAAC,WAAW,CAAM,4BAA4B,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IACtF,CAAC;;4FAjCQ,sBAAsB;yGAAtB,sBAAsB,WAAtB,sBAAsB,mBAFrB,MAAM;6FAEP,sBAAsB;cAHlC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAGmB;;;;;;;;ICYzD,6EAEI;IAAA,mEAAkC;IAAC,uDACvC;IAAA,4DAAS;;;;IAHmC,gFAAoB;IAEzB,0DACvC;IADuC,2FACvC;;;IAMJ,qFAAuG;;;IAA9D,uGAAuC;;;IAChF,iGAAgI;;;IAA3E,uGAAuC;;ADd7F,MAAM,eAAe;IAOxB,YAAoB,aAA2C;QAA3C,kBAAa,GAAb,aAAa,CAA8B;QAN/D,aAAQ,GAAG,CAAC,CAAC;QACb,qCAAqC;QACrC,gBAAW,GAAmB,EAAE,CAAC;QAGjC,cAAS,GAAG,KAAK,CAAC;IACiD,CAAC;IAEpE,QAAQ;QACJ,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,iBAAiB,GAAG,kFAAO,CAAC,GAAG,CAAC;IACzC,CAAC;IACO,YAAY;QAChB,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,eAAe,CAAC,KAAK;QACxB,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;IAChD,CAAC;IACM,cAAc,CAAC,KAAK;QACvB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC;;8EAxBQ,eAAe;+FAAf,eAAe;QCX5B,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,sEAEA;QAAA,2EAAwD;QAA5B,sIAAS,mBAAe,CAAC,CAAC,IAAC;QAAC,oEAAS;QAAA,4DAAQ;QACzE,sEAEA;QAAA,2EAA+C;QAA5B,sIAAS,mBAAe,CAAC,CAAC,IAAC;QAAC,uFAA4B;QAAA,4DAAQ;QACvF,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,0EACI;QAAA,6EACI;QAD8B,gJAAU,2BAAuB,IAAC;QAChE,mHAEI;QAER,4DAAS;QACb,4DAAM;QACV,4DAAM;QACN,2EACI;QAAA,2EACI;QAAA,8IAAiF;QACjF,sKAA8F;QACtG,4DAAM;QACN,4DAAM;;QAvBmD,0DAAmB;QAAnB,4EAAmB;QAGnB,0DAAmB;QAAnB,4EAAmB;QAQxD,0DAAmC;QAAnC,oFAAmC;QAS1B,0DAAmB;QAAnB,mFAAmB;QACP,0DAAmB;QAAnB,mFAAmB;;6FDd/C,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAO,MAAM,oBAAoB;IAE7B;QACI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;CAkBJ;AAEM,MAAM,OAAO;CAWnB;AAGM,MAAM,+BAA+B;IACxC;QACI,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC7B,CAAC;CAOJ;;;;;;;;;;;;;ACnDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACM;AACQ;AACC;AACF;AACD;AACkC;AACkC;;;AAEzH,MAAM,KAAK,GAAW;IAClB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,iEAAe,EAAE;CAC3C;AAWM,MAAM,8BAA8B;;6GAA9B,8BAA8B;sLAA9B,8BAA8B,kBAPhC;YACL,4DAAY;YACZ,mEAAY;YACZ,mEAAgB;YAChB,4DAAY,CAAC,QAAQ,CAAC,KAAK,CAAC;SAC/B;mIAEU,8BAA8B,mBAR1B,iEAAe,EAAE,mGAAuB,EAAE,qIAAkC,aAEvF,4DAAY;QACZ,mEAAY;QACZ,mEAAgB;6FAIT,8BAA8B;cAT1C,sDAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,iEAAe,EAAE,mGAAuB,EAAE,qIAAkC,CAAC;gBAC5F,OAAO,EAAE;oBACL,4DAAY;oBACZ,mEAAY;oBACZ,mEAAgB;oBAChB,4DAAY,CAAC,QAAQ,CAAC,KAAK,CAAC;iBAC/B;aACF;;;;;;;;;;;;;;ACrBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmF;AACf;AAErC;AAE0B;AAEI;;;;;;;;;;ICWrB,uEAAoD;IAAA,uDAAiC;IAAA,4DAAO;;;IAAxC,0DAAiC;IAAjC,iGAAiC;;;IACrF,uEAAoD;IAAA,6DAAE;IAAA,4DAAO;;;IAG7D,uEACI;IAAA,wEACI;IAAA,uEAAM;IAAA,uDAAyD;IAAA,4DAAO;IAC1E,qEAAe;IAEnB,4DAAO;;;;IAHO,0DAAyD;IAAzD,2JAAyD;;;;IAT/E,qEACI;IAAA,qEAAI;IAAA,wEAAsE;IAAnD,4VAAuB,IAAI,4CAAuB;IAAC,uDAAwB;IAAA,4DAAI;IAAA,4DAAK;IAC3G,qEACI;IAAA,uIAAoD;IACpD,uIAAoD;IACxD,4DAAK;IACL,qEACI;IAAA,uIACI;IAKR,4DAAK;IACT,4DAAK;;;IAbyE,0DAAwB;IAAxB,wFAAwB;IAExF,0DAA6C;IAA7C,0GAA6C;IAC7C,0DAA6C;IAA7C,0GAA6C;IAG7C,0DAA4E;IAA5E,sMAA4E;;;IAoDtF,sEACI;IAAA,oFACJ;IAAA,4DAAM;;;IAHV,0EACI;IAAA,sIACI;IAER,4DAAM;;;IAHG,0DAAiE;IAAjE,kIAAiE;;;IAmB1G,0EACI;IAAA,0EACI;IAAA,qEAA2B;IAC/B,4DAAM;IACV,4DAAM;;ADlFC,MAAM,kCAAkC;IAsB3C,YAAoB,eAAuC,EAAU,EAAe;QAAhE,oBAAe,GAAf,eAAe,CAAwB;QAAU,OAAE,GAAF,EAAE,CAAa;QAjBpF,cAAS,GAAQ,EAAE,CAAC;QACpB,cAAS,GAAiB,IAAI,4CAAO,EAAE,CAAC;QAEjC,2BAAsB,GAAsC,EAAE,CAAC;QAI/D,YAAO,GAAY,KAAK,CAAC;QACzB,aAAQ,GAAY,IAAI,CAAC;QACzB,iBAAY,GAAW,CAAC,CAAC;QACzB,eAAU,GAAkB,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IAOkB,CAAC;IAGzF,QAAQ;QACJ,IAAI,CAAC,SAAS,GAAG;YACb,GAAG,EAAE,0BAA0B;YAC/B,OAAO,EAAE,EACR;YACD,UAAU,EAAE,oBAAoB;YAChC,UAAU,EAAE,EAAE;YACd,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,EAAE;YACT,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;SAChE,CAAC;QAEF,IAAI,CAAC,uBAAuB,GAAG;YAC3B,eAAe,EAAE,KAAK;YACtB,OAAO,EAAE,IAAI;YACb,SAAS,EAAE,MAAM;YACjB,aAAa,EAAE,YAAY;YAC3B,eAAe,EAAE,cAAc;YAC/B,cAAc,EAAE,CAAC;YACjB,iBAAiB,EAAE,IAAI;SAC1B,CAAC;QACF,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,qCAAqC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAE3E,CAAC;IAED,WAAW,CAAC,OAAsB;QAC9B,IAAI,OAAO,CAAC,iBAAiB,IAAI,OAAO,CAAC,iBAAiB,CAAC,YAAY,EAAE;YACrE,IAAI,CAAC,6BAA6B,EAAE;SACvC;IACL,CAAC;IAED,6BAA6B;QACzB,IAAI,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,eAAe,CAAC,gCAAgC,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAChF,IAAI,IAAI,EAAE;gBACN,MAAM,CAAC,8BAA8B,CAAC,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC;gBACrE,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;gBACnC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;gBACtB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aAC1B;QAEL,CAAC,CAAC,CAAC;IACP,CAAC;IACD,qCAAqC,CAAC,eAAgD;QAClF,IAAI,eAAe,IAAI,IAAI,IAAI,eAAe,IAAI,SAAS,EAAE;YACzD,eAAe,GAAG,IAAI,uEAA+B,EAAE,CAAC;SAC3D;QACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACrC,UAAU,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,UAAU,CAAC;YACvD,qBAAqB,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,qBAAqB,CAAC;YAC7E,cAAc,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtF,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC;SAC9D,CAAC,CAAC;IACP,CAAC;IAGD,4BAA4B,CAAC,gBAAsB;QAC/C,IAAI,eAAe,GAAG,EAAE,CAAC;QACzB,IAAI,gBAAgB,IAAI,IAAI,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;YACzD,IAAI,YAAY,GAAG,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;YAC/C,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAC/B;gBACI,gBAAgB,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE,KAAK;oBAC7C,IAAI,KAAK,IAAI,CAAC,EAAE;wBACZ,IAAI,OAAO,CAAC,IAAI,EAAE;4BACd,eAAe,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,GAAG,YAAY,GAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAC,IAAI,CAAC,CAAC;yBACzJ;qBACJ;gBAEL,CAAC,CAAC,CAAC;aACN;iBAED;gBACI,gBAAgB,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE,KAAK;oBACzC,IAAI,OAAO,CAAC,IAAI,EAAE;wBACd,eAAe,GAAI,KAAK,IAAI,gBAAgB,CAAC,MAAM,GAAC,CAAC,EAAC,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;qBACjJ;gBAET,CAAC,CAAC,CAAC;aACN;SACJ;QACD,OAAO,eAAe,CAAC;IAC3B,CAAC;IAGD,aAAa,CAAC,UAAmB;QAC7B,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;aACI;YACD,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;YAC7B,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;SACpC;IACL,CAAC;IACD,iBAAiB;QACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,eAAe,CAAC,wBAAwB,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAC/D,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,WAAW,CAAC,eAAgD;QACxD,IAAI,eAAe,IAAI,IAAI,IAAI,eAAe,IAAI,SAAS,EAAE;YACzD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAChF,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;YACtG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YACxF,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;SACvF;IAEL,CAAC;IAGD,UAAU;QACN,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,CAAC;QAC5C,IAAI,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE;YAChC,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;YAC3C,IAAI,KAAK,EAAE;gBACP,IAAI,KAAK,GAAG,IAAI,uEAA+B,EAAE,CAAC;gBAClD,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;gBACpC,KAAK,CAAC,qBAAqB,GAAG,KAAK,CAAC,qBAAqB,CAAC;gBAC1D,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC;gBAC5C,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;gBACxC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,eAAe,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;oBACtE,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,EAAE;wBACtB,iEAAY,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;wBAClE,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;wBAC1B,IAAI,CAAC,6BAA6B,EAAE,CAAC;qBACxC;yBACI,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,EAAE;wBAC3B,iEAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;qBACnE;oBACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBAC3B,CAAC,CAAC,CAAC;aACN;SAEJ;IAEL,CAAC;;oHAtKQ,kCAAkC;kHAAlC,kCAAkC;QCf/C,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,2EACI;QAAA,wEACI;QAAA,qEACI;QAAA,qEAAI;QAAA,yEAAa;QAAA,4DAAK;QACtB,sEAAI;QAAA,mFAAuB;QAAA,4DAAK;QAChC,sEAAI;QAAA,6EAAiB;QAAA,4DAAK;QAC9B,4DAAK;QACT,4DAAQ;QACR,yEACI;QAAA,8HACI;QAcR,4DAAQ;QACZ,4DAAQ;QACZ,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAGN,uEACI;QAAA,wFACI;QAAA,iFAII;QAJQ,2MAAoB;QAI5B,wEAAkC;QAA/B,sJAAS,kBAAc,KAAK,CAAC,IAAC;QAAC,oEAAgC;QAAA,4DAAI;QACtE,0EAA+B;QAAA,0FAA8B;QAAA,4DAAK;QAClE,+EACI;QAAA,4EACI;QADoC,+JAAY,gBAAY,IAAC;QAC7D,0EACI;QAAA,2EACI;QAAA,2EACI;QAAA,6EAA0B;QAAA,yEAAa;QAAA,4DAAQ;QAC/C,wEACJ;QAAA,4DAAM;QACV,4DAAM;QACN,2EACI;QAAA,2EACI;QAAA,6EAAmC;QAAA,mFAAuB;QAAA,4DAAQ;QAClE,wEACJ;QAAA,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,0EACI;QAAA,2EACI;QAAA,2EACI;QAAA,6EAAkB;QAAA,sEAAU;QAAA,4DAAQ;QAAA,4EAA2B;QAAA,6DAAC;QAAA,4DAAO;QACvE,+FAI0B;QADD,2NAAsB;QAC/C,4DAA0B;QAC1B,iIACI;QAKR,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,2EACI;QAAA,8EAAuE;QAA/D,2JAAS,kBAAc,KAAK,CAAC,IAAC;QAAiC,kEAAM;QAAA,4DAAS;QACtF,8EAA0D;QAAA,gEAAI;QAAA,4DAAS;QAC3E,4DAAM;QACV,4DAAO;QACX,4DAAU;QACd,4DAAa;QACjB,4DAAuB;QAC3B,4DAAM;QAGN,iIACI;;QAxFyF,0DAAuB;QAAvB,oFAAuB;QAShF,2DAA8C;QAA9C,+FAA8C;QA2B9D,0DAAoB;QAApB,+EAAoB;QAOlB,0DAAiC;QAAjC,8FAAiC;QAKoC,0DAAiB;QAAjB,0EAAiB;QAMR,0DAAiB;QAAjB,0EAAiB;QAS5D,0DAAmC;QAAnC,4FAAmC;QAIvD,0DAA8G;QAA9G,gLAA8G;QAoB/H,0DAAiB;QAAjB,+EAAiB;;6FD9ExB,kCAAkC;cAL9C,uDAAS;eAAC;gBACT,QAAQ,EAAE,iCAAiC;gBAC3C,WAAW,EAAE,8CAA8C;gBAC3D,SAAS,EAAE,CAAC,6CAA6C,CAAC;aAC3D;;kBAII,mDAAK","file":"superadmin-create-terminals-superadmin-create-terminal-module-es2015.js","sourcesContent":["import { Component, Input, OnInit, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { MarinePortsandvesselsService } from '../../marine-ports-vessels/marine-portsandvessels.service';\r\nimport { SalesUserService } from '../../sales-user/sales-user.service';\r\nimport { ConfirmationDialogService } from '../../shared-components/confirmation-dialog/confirmation-dialog.service';\r\nimport { TerminalDetailsModel, Geocode } from './../models';\r\nimport { CreateterminalsService} from './../createterminals.service';\r\nimport { Declarations } from '../../declarations.module';\r\n\n@Component({\n  selector: 'app-create-terminal',\n  templateUrl: './create-terminal.component.html',\n  styleUrls: ['./create-terminal.component.css']\n})\nexport class CreateTerminalComponent implements OnInit {\n    @Input() SelectedCountryId: any;\n\n    public ModalText: string;\n\n    public TerminalDetailsData: TerminalDetailsModel[] = [];\n    public TerminalDetail: TerminalDetailsModel = new TerminalDetailsModel();\n    dtOptions: any = {};\n    dtTrigger: Subject<any> = new Subject();\n\n    public popoverTitle: string = 'Are you sure?';\n    public confirmButtonText: string = 'Yes';\n    public cancelButtonText: string = 'No';\n\n    terminalCreateForm: FormGroup;\n\n    mapConstants: MapConstants = new MapConstants();\n\n    public countryList = [];\n    public currucyList = [];\n    public statesList = [];\n    public filteredStatesList = [];\n    public countryGroupList = [];\n    public currentCountryId: any;\n\n    public IsLoading: boolean = false;\n\n    constructor(private marineService: MarinePortsandvesselsService, private fb: FormBuilder,\n        private salesService: SalesUserService, private confirmationdialogueservice: ConfirmationDialogService,\n        private terminalService: CreateterminalsService) { }\n    \n    ngOnInit(): void {\n        this.ModalText = 'Create Terminal';\r\n        var exportColumns = { columns: [0, 1, 2, 3, 4, 5, 6, 7] };\r\n        this.dtOptions = {\r\n            dom: '<\"html5buttons\"B>lTfgitp',\r\n            buttons: [\r\n                { extend: 'colvis' },\r\n                { extend: 'copy', exportOptions: exportColumns },\r\n                { extend: 'csv', title: 'Terminal Details', exportOptions: exportColumns },\r\n                { extend: 'pdf', title: 'Terminal Details', orientation: 'landscape', exportOptions: exportColumns },\r\n                { extend: 'print', exportOptions: exportColumns }\r\n            ],\r\n            pagingType: 'first_last_numbers',\r\n            pageLength: 10,\r\n            ordering: true,\r\n            order: [],\r\n            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, \"All\"]]\r\n        };\r\n        this.getCountryList();\r\n        this.getcountryGroupList();\r\n        this.getStatesOfAllCountries();\r\n        this.TerminalDetail.CountryId = this.SelectedCountryId;\r\n        if (this.SelectedCountryId == 2) { //canada\r\n            this.mapConstants.CenterLat = 56.14;\r\n            this.mapConstants.CenterLon = -106.34;\r\n        }\r\n        this.initializeTerminalCreationForm(this.TerminalDetail);\r\n        jQuery(\"#AddressDetails_Country_Id\").val(\"0\").change();\n    }\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.SelectedCountryId && changes.SelectedCountryId.currentValue) {\r\n            // get call for grid data\r\n            this.getTerminalDetailsData();\r\n            this.TerminalDetail.CountryId = this.SelectedCountryId;\r\n            this.setMapCenter(this.SelectedCountryId);\r\n            this.setAddressValidators(this.SelectedCountryId);\r\n            jQuery(\"#AddressDetails_Country_Id\").val(\"0\").change();\r\n        }\r\n    }\n\n    createTerminal(header: string) {\r\n        this.ModalText = header;\r\n        this.filteredStatesList = this.statesList.filter(s => s.CountryId == this.SelectedCountryId) || [];\r\n        this.terminalCreateForm.get('CountryId').setValue(this.SelectedCountryId);\r\n        this.terminalCreateForm.get('IsGeocodeUsed').setValue(false);\r\n        this.setLatLongValidator(false);\r\n        this.setMapCenter(this.SelectedCountryId);\r\n        this.terminalCreateForm.get('StateId').setValue(null);\r\n        jQuery(\"#AddressDetails_Country_Id\").val(\"0\").change();\r\n    }\n\n    setLatLongValidator(isGeoCoded: any) {\r\n        if (isGeoCoded) {\r\n            let val = [Validators.required];\r\n            this.terminalCreateForm.get('Latitude').setValidators(val);\r\n            this.terminalCreateForm.get('Longitude').setValidators(val);\r\n            this.terminalCreateForm.get('Latitude').updateValueAndValidity();\r\n            this.terminalCreateForm.get('Longitude').updateValueAndValidity();\r\n        }\r\n        else {\r\n            this.terminalCreateForm.get('Latitude').clearValidators();\r\n            this.terminalCreateForm.get('Latitude').updateValueAndValidity();\r\n            this.terminalCreateForm.get('Longitude').clearValidators();\r\n            this.terminalCreateForm.get('Longitude').updateValueAndValidity();\r\n        }\r\n    }\n    setMapCenter(countryId: number) {\r\n        if (countryId == 2) {\r\n            this.mapConstants.CenterLat = 56.14;\r\n            this.mapConstants.CenterLon = -106.34;\r\n        }\r\n        else if (countryId == 4) {\r\n            this.mapConstants.CenterLat = 13.193887;\r\n            this.mapConstants.CenterLon = -59.543198;\r\n        }\r\n        else {\r\n            this.mapConstants.CenterLat = 38;\r\n            this.mapConstants.CenterLon = -98.35;\r\n        }\r\n    }\n\n    clearPanelData() {\r\n        this.terminalCreateForm.reset();\r\n        this.terminalCreateForm.get('CountryId').setValue(this.SelectedCountryId);\r\n        this.terminalCreateForm.get('StateId').setValue(null);\r\n        this.filteredStatesList = this.statesList.filter(s => s.CountryId == this.SelectedCountryId) || [];\r\n        this.setMapCenter(this.SelectedCountryId);\r\n        jQuery(\"#AddressDetails_Country_Id\").val(\"0\").change();\r\n        this.setLatLongValidator(false);\r\n\r\n    }\n    public getCountryList() {\r\n        this.marineService.getCountryList().subscribe(data => {\r\n            if (data && data.length > 0) {\r\n                this.countryList = data;\r\n            }\r\n        });\r\n    }\n    public getcountryGroupList() {\r\n        this.marineService.getCountryGroupList(4).subscribe(data => {\r\n            if (data && data.length > 0) {\r\n                this.countryGroupList = data;\r\n            }\r\n        });\r\n    }\n    public getStatesOfAllCountries(countryId?: number) {\r\n        this.marineService.GetStatesOfAllCountries(countryId).subscribe(data => {\r\n            if (data && data.length > 0) {\r\n                this.statesList = data;\r\n                this.filteredStatesList = this.statesList;\r\n            }\r\n        });\r\n    }\n\n    initializeTerminalCreationForm(terminal: TerminalDetailsModel): FormGroup {\r\n        this.terminalCreateForm = this.fb.group({\r\n            Id: this.fb.control(terminal.Id),\r\n            Name: this.fb.control(terminal.Name, [Validators.required]),\r\n            Abbreviation: this.fb.control(terminal.Abbreviation),\r\n            TerminalOwner: this.fb.control(terminal.TerminalOwner),\r\n            ControlNumber: this.fb.control(terminal.ControlNumber),\r\n            Address: this.fb.control(terminal.Address),\r\n            City: this.fb.control(terminal.City),\r\n            County: this.fb.control(terminal.County),\r\n            StateId: this.fb.control(terminal.StateId, [Validators.required]),\r\n            CountryId: this.fb.control(terminal.CountryId, [Validators.required]),\r\n            StateName: this.fb.control(terminal.StateCode),\r\n            ZipCode: this.fb.control(terminal.ZipCode),\r\n            IsGeocodeUsed: this.fb.control(terminal.IsGeoCoded),\r\n            Latitude: this.fb.control(terminal.Latitude, Validators.pattern('^[0-9.-]*$')),\r\n            Longitude: this.fb.control(terminal.Longitude, Validators.pattern('^[0-9.-]*$')),\r\n\r\n        })\r\n        this.setAddressValidators(terminal.CountryId);\r\n        return this.terminalCreateForm;\r\n\r\n    }\n\n    setAddressValidators(countryId: number) {\r\n        if (countryId && this.terminalCreateForm) {\r\n            let validator: any;\r\n            if (countryId && (countryId == 1 || countryId == 2)) {\r\n                validator = [Validators.required];\r\n            }\r\n            else {\r\n                validator = [];\r\n            }\r\n            this.terminalCreateForm.get('Address').setValidators(validator);\r\n            this.terminalCreateForm.get('Address').updateValueAndValidity();\r\n            this.terminalCreateForm.get('City').setValidators(validator);\r\n            this.terminalCreateForm.get('City').updateValueAndValidity();\r\n            this.terminalCreateForm.get('County').setValidators(validator);\r\n            this.terminalCreateForm.get('County').updateValueAndValidity();\r\n            this.terminalCreateForm.get('ZipCode').setValidators(validator);\r\n            this.terminalCreateForm.get('ZipCode').updateValueAndValidity();\r\n        }\r\n    }\n\n    getTerminalDetailsData() {\r\n        let countryId = this.SelectedCountryId;\r\n        this.IsLoading = true;\r\n        this.terminalService.getTerminalsForGrid(countryId).subscribe((data) => {\r\n            if (data) {\r\n                jQuery(\"#terminal-datatable\").DataTable().clear().destroy();\r\n                this.TerminalDetailsData = data;\r\n                this.dtTrigger.next();\r\n                this.IsLoading = false;\r\n            }\r\n\r\n        });      \r\n    }\n\n    editTerminal(terminal) {\r\n        if (terminal) {\r\n            this.terminalCreateForm.get('Id').setValue(terminal.Id);\r\n            this.terminalCreateForm.get('Name').setValue(terminal.Name);\r\n            this.terminalCreateForm.get('Abbreviation').setValue(terminal.Abbreviation);\r\n            this.terminalCreateForm.get('ControlNumber').setValue(terminal.ControlNumber);\r\n            this.terminalCreateForm.get('TerminalOwner').setValue(terminal.TerminalOwner);\r\n            this.terminalCreateForm.get('Address').setValue(terminal.Address);\r\n            this.terminalCreateForm.get('City').setValue(terminal.City);\r\n            this.terminalCreateForm.get('County').setValue(terminal.County);\r\n            this.terminalCreateForm.get('StateId').setValue(terminal.StateId);\r\n            this.terminalCreateForm.get('CountryId').setValue(terminal.CountryId);\r\n            //this.terminalCreateForm.get('StateName').setValue(terminal.State);\r\n            this.terminalCreateForm.get('ZipCode').setValue(terminal.ZipCode);\r\n            this.terminalCreateForm.get('IsGeocodeUsed').setValue(false); // we dont save IsGeoCode flag at terminal level so it to false always \r\n            this.terminalCreateForm.get('Latitude').setValue(terminal.Latitude);\r\n            this.terminalCreateForm.get('Longitude').setValue(terminal.Longitude);\r\n            if (terminal.Latitude) {\r\n                this.mapConstants.CenterLat = parseFloat(terminal.Latitude);\r\n                this.mapConstants.CenterLon = parseFloat(terminal.Longitude);\r\n            }\r\n            let countryId = this.terminalCreateForm.get('CountryId').value;\r\n            this.setAddressValidators(countryId);\r\n            jQuery(\"#AddressDetails_Country_Id\").val(\"0\").change();\r\n        }\r\n    }\n\n    onSubmit() {\r\n        this.terminalCreateForm.markAllAsTouched();\r\n        this.terminalCreateForm.value;\r\n        if (this.terminalCreateForm.valid) {\r\n            this.IsLoading = true;\r\n            // serverside api to save terminal\r\n            let terminal = this.terminalCreateForm.value;\r\n            this.terminalService.saveTerminalDetails(terminal).subscribe(data => {\r\n                if (data != null && data.StatusCode == 0) {\r\n                    Declarations.msgsuccess(data.StatusMessage, undefined, undefined);\r\n                    this.IsLoading = false;\r\n                    this.terminalCreateForm.reset();\r\n                    this.clearPanelData();\r\n                    let dismissSlider = document.getElementById('btnCancel') as HTMLElement;\r\n                    dismissSlider.click();\r\n                    this.getTerminalDetailsData();\r\n                } else {\r\n                    this.IsLoading = false;\r\n                    Declarations.msgerror(data == null ? 'Failed' : data.StatusMessage, undefined, undefined);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\n\n    isInvalid(name: string): boolean {\r\n        var result = this.terminalCreateForm.get(name).invalid\r\n            &&\r\n            (\r\n            this.terminalCreateForm.get(name).dirty\r\n                ||\r\n            this.terminalCreateForm.get(name).touched\r\n            )\r\n        return result;\r\n    }\r\n\r\n    isRequired(name: string): boolean {\r\n        return this.terminalCreateForm.get(name).errors.required;\r\n    }\n\n    public getAddressByZip() {\r\n        var zipCode = this.terminalCreateForm.get('ZipCode').value;\r\n        if (zipCode) {\r\n            this.marineService.GetAddressByZip(zipCode).subscribe(data => {\r\n                if (data) {\r\n                    var country = this.countryList.find(t => t.Code.includes(data.CountryCode));\r\n                    if (country) {\r\n                        var countryId = country.Id;\r\n                        this.terminalCreateForm.get('CountryId').patchValue(countryId);\r\n                        /*this.terminalCreateForm.get('Address').patchValue(data.Address);*/\r\n                        this.terminalCreateForm.get('County').patchValue(data.CountyName);\r\n                        this.terminalCreateForm.get('City').patchValue(data.City);\r\n                        var stateId = this.statesList.find(x => x.StateCode == data.StateCode).StateId;\r\n                        this.terminalCreateForm.get('StateId').patchValue(stateId);\r\n                        this.terminalCreateForm.get('Latitude').patchValue(data.Latitude);\r\n                        this.terminalCreateForm.get('Longitude').patchValue(data.Longitude);\r\n                        this.mapConstants.CenterLat = data.Latitude;\r\n                        this.mapConstants.CenterLon = data.Longitude;\r\n                        this.filteredStatesList = this.statesList.filter(s => s.CountryId == countryId) || [];\r\n\r\n                        if (!this.terminalCreateForm.get('Address').value) {\r\n                            this.terminalCreateForm.get('Address').patchValue(data.Address);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }\n    getAddressByLatLong(lat: number, long: number) {\r\n        let isGeoCoded = this.terminalCreateForm.get('IsGeocodeUsed').value;\r\n        if (isGeoCoded && lat && long) {\r\n            this.updateGeoCode(lat, long);\r\n        }\r\n    }\n\n    updateGeoCode(lat, lng) {\r\n        this.salesService.GetAddressByLongLat(lat, lng).subscribe(data => {\r\n            if (data) {\r\n                data.Latitude = parseFloat(lat);\r\n                data.Longitude = parseFloat(lng);\r\n                this.updateAddressData(data);\r\n            }\r\n            else { // if no address fetched for lat-long then set only map marker on UI\r\n                this.mapConstants.CenterLat = lat;\r\n                this.mapConstants.CenterLon = lng;\r\n            }\r\n\r\n        })\r\n    }\n    updateAddressData(address: Geocode) {\r\n        let countryId = (address.CountryCode == 'US' || address.CountryCode == 'USA') ? 1 : (address.CountryCode == 'CA' || address.CountryCode == 'CAN') ? 2 : this.terminalCreateForm.get('CountryId').value;\r\n        let stateName = (address.StateName != null && address.StateName != '' && address.StateName != undefined) ? address.StateName : address.CountryName;\r\n\r\n        if (stateName) {\r\n            let state = this.statesList.find(st => st.StateName.toLowerCase() == stateName.toLowerCase());\r\n            let stateId = (state && state.StateId) ? state.StateId : this.terminalCreateForm.get('StateId').value;\r\n            this.terminalCreateForm.get('StateId').patchValue(stateId);\r\n        }\r\n        else //set first state after filtering by countryID\r\n        {\r\n            let states = this.statesList.filter(s => s.CountryId == countryId) || [];\r\n            if (states && states.length > 0) {\r\n                let stateId = states[0].StateId;\r\n                if (stateId) {\r\n                    this.terminalCreateForm.get('StateId').patchValue(stateId);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.terminalCreateForm.get('Address').patchValue(address.Address);\r\n        this.terminalCreateForm.get('City').patchValue(address.City);\r\n        this.terminalCreateForm.get('ZipCode').patchValue(address.ZipCode);\r\n\r\n        this.terminalCreateForm.get('CountryId').patchValue(countryId);\r\n\r\n        this.terminalCreateForm.get('County').patchValue(address.CountyName);\r\n\r\n\r\n\r\n        if (address.Latitude) {\r\n            this.terminalCreateForm.get('Latitude').patchValue(address.Latitude);\r\n            this.terminalCreateForm.get('Longitude').patchValue(address.Longitude);\r\n            this.mapConstants.CenterLat = address.Latitude;\r\n            this.mapConstants.CenterLon = address.Longitude;\r\n        }\r\n\r\n        this.filteredStatesList = this.statesList.filter(s => s.CountryId == countryId) || [];\r\n\r\n    }\n\n    markerDragEnd(event) {\r\n        this.confirmationdialogueservice.confirm('Map update', 'Geo Codes shifted to a new location!')\r\n            .then((confirmed) => (confirmed == true) ? this.updateGeoCode(event.coords.lat, event.coords.lng) : this.previousLatLon())\r\n            .catch(() => this.previousLatLon());\r\n    }\n    public previousLatLon() {\r\n        this.mapConstants.CenterLat = this.terminalCreateForm.get('Latitude').value;\r\n        this.mapConstants.CenterLon = this.terminalCreateForm.get('Longitude').value;\r\n    }\n\n    ngOnDestroy(): void {\r\n        this.dtTrigger.unsubscribe();\r\n    }\n}\n\n\r\nexport class MapConstants {\r\n    CenterLat: number;\r\n    CenterLon: number;\r\n    ZoomArea: number;\r\n    IconUrl: MapIconUrl;\r\n\r\n    constructor() {\r\n        this.CenterLat = 38;\r\n        this.CenterLon = -98.35;\r\n        this.ZoomArea = 15;\r\n        this.IconUrl = { url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png', scaledSize: { width: 40, height: 40 } }\r\n    }\r\n}\r\n\r\nexport class MapIconUrl {\r\n    url: string;\r\n    scaledSize: MapIconSize;\r\n}\r\nexport class MapIconSize {\r\n    width: number;\r\n    height: number\r\n}\n","\n<div class=\"section-marine-ports-grid\">\n    <div>\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <h4 class=\"pt0 pull-left\">Terminals</h4>\n                <a (click)=\"createTerminal('Create Terminal')\" onclick=\"slidePanel('#create-terminal','70%')\" class=\"fs18 pull-left ml10\"\n                    [ngClass]=\"{'disabled': SelectedCountryId =='4'}\">\n                    <i class=\"fa fa-plus-circle fs18 mt4 pull-left\"></i><span class=\"fs14 mt2 pull-left\">Add New</span>\n                </a>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"well bg-white shadowb-b\">\n                    <div class=\"ibox mb0\">\n                        <div class=\"ibox-content no-padding no-border\">\n                            <div id=\"terminal-details-grid\" class=\"table-responsive\">\n                                <table id=\"terminal-datatable\" data-gridname=\"35\" datatable [dtOptions]=\"dtOptions\" [dtTrigger]=\"dtTrigger\" class=\"table table-striped table-bordered table-hover\">\n                                    <thead>\n                                        <tr>\n                                            <th>Name</th>\n                                            <th>Abbreviation</th>\n                                            <th>ControlNumber</th>\n                                            <th>Address</th>\n                                            <th>City</th>\n                                            <th>State</th>\n                                            <th>Terminal Owner</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let terminal of TerminalDetailsData\">\n                                            <td>{{terminal.Name}}</td>\n                                            <td>\n                                                <span *ngIf=\"terminal.Abbreviation != null\">{{terminal.Abbreviation}}</span>\n                                                <span *ngIf=\"terminal.Abbreviation == null\">--</span>\n                                            </td>\n                                            <td>\n                                                <span *ngIf=\"terminal.ControlNumber != null\">{{terminal.ControlNumber}}</span>\n                                                <span *ngIf=\"terminal.ControlNumber == null\">--</span>\n                                            </td>\n                                            <td>\n                                                <span *ngIf=\"terminal.Address != null\">{{terminal.Address}}</span>\n                                                <span *ngIf=\"terminal.Address == null\">--</span>\n                                            </td>\n                                            <td>\n                                                <span *ngIf=\"terminal.City != null\">{{terminal.City}}</span>\n                                                <span *ngIf=\"terminal.City == null\">--</span>\n                                            </td>\n                                            <td>\n                                                <span *ngIf=\"terminal.StateCode != null\">{{terminal.StateCode}}</span>\n                                                <span *ngIf=\"terminal.StateCode == null\">--</span>\n                                            </td>\n                                            <td>\n                                                <span *ngIf=\"terminal.TerminalOwner != null\">{{terminal.TerminalOwner}}</span>\n                                                <span *ngIf=\"terminal.TerminalOwner == null\">--</span>\n                                            </td>\n                                            <td class=\"text-center\">\n                                                <button type=\"button\" (click)=\"createTerminal('Edit Terminal');editTerminal(terminal);\" class=\"btn btn-link\" onclick=\"slidePanel('#create-terminal','70%')\"><i class=\"fas fa-edit fs16\"></i></button>\n                                                <!--<button type=\"button\" class=\"btn btn-link ml10\" mwlConfirmationPopover [popoverTitle]=\"popoverTitle\" [confirmText]=\"confirmButtonText\" [cancelText]=\"cancelButtonText\" placement=\"bottom\" (confirm)=\"deletePort(port)\"><i class=\"fas fa-trash-alt color-maroon\"></i></button>-->\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n    <div id=\"create-terminal\" class=\"side-panel pl5 pr5 scroll-y\">\n        <div class=\"side-panel-wrapper\">\n            <div class=\"pt15 pb0 mb10\">\n                <a class=\"ml15 close-panel\" (click)=\"clearPanelData()\" onclick=\"closeSlidePanel();\"><i class=\"fa fa-close fs18\"></i></a>\n                <h3 class=\"dib mt0 mb0 ml15\">{{ModalText}}</h3>\n            </div>\n            <div class=\"mx-3\">\n                <form [formGroup]=\"terminalCreateForm\" (ngSubmit)=\"onSubmit()\">\n                    <div class=\"row bg-white\">\n                        <div class=\"col-12\">\n                            <div class=\"create-terminal\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-4 form-group\">\n                                        <div class=\"new-terminal-name\">\n                                            <label class=\"terminal-info\">\n                                                Terminal Name <span class=\"required pl4\" aria-required=\"true\">*</span>\n                                            </label>\n                                            <input class=\"form-control\" formControlName=\"Name\" type=\"text\" value=\"\">\n                                            <div *ngIf=\"isInvalid('Name')\" class=\"color-maroon\">\n                                                <div *ngIf=\"isRequired('Name')\">\n                                                    Required.\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-4 form-group\">\n                                        <div class=\"new-terminal-abbreviation\">\n                                            <label class=\"terminal-info\">\n                                                Terminal Abbreviation\n                                            </label>\n                                            <input class=\"form-control\" formControlName=\"Abbreviation\" type=\"text\" value=\"\">\n                                            <div *ngIf=\"isInvalid('Abbreviation')\" class=\"color-maroon\">\n                                                <div *ngIf=\"isRequired('Abbreviation')\">\n                                                    Required.\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-sm-4 form-group\">\n                                        <div class=\"new-terminal-control-number\">\n                                            <label class=\"terminal-info\">\n                                                Terminal Control Number\n                                            </label>\n                                            <input class=\"form-control\" formControlName=\"ControlNumber\" type=\"text\" value=\"\">\n                                            <div *ngIf=\"isInvalid('ControlNumber')\" class=\"color-maroon\">\n                                                <div *ngIf=\"isRequired('ControlNumber')\">\n                                                    Required.\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-4 form-group\">\n                                        <div class=\"new-terminal-owner\">\n                                            <label class=\"terminal-info\">\n                                                Terminal Owner\n                                            </label>\n                                            <input class=\"form-control\" formControlName=\"TerminalOwner\" type=\"text\" value=\"\">\n                                            <div *ngIf=\"isInvalid('TerminalOwner')\" class=\"color-maroon\">\n                                                <div *ngIf=\"isRequired('TerminalOwner')\">\n                                                    Required.\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row mt20\">\n                                    <div class=\"col-sm-12\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-7\">\n                                                <div class=\"wrapper-location\" style=\"display: block;\">\n                                                    <div class=\"address-wrapper\"\n                                                         [ngClass]=\"{'pntr-none subSectionOpacity': terminalCreateForm.controls['IsGeocodeUsed'].value == true && terminalCreateForm.get('CountryId').value != '4'}\">\n                                                        <div class=\"address-controls\">\n                                                            <div class=\"row\">\n                                                                <div class=\"col-sm-8\">\n                                                                    <div class=\"form-group\">\n                                                                        <label>Address</label>\n                                                                        <span class=\"required pl4\" aria-required=\"true\" *ngIf=\"terminalCreateForm.get('CountryId').value != '4'\">*</span>\n                                                                        <input class=\"form-control address addressInput\"\n                                                                               formControlName=\"Address\" value=\"\">\n                                                                        <div *ngIf=\"isInvalid('Address')\" class=\"color-maroon\">\n                                                                            <div *ngIf=\"isRequired('Address')\">\n                                                                                Required.\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                                <div class=\"col-sm-4\">\n                                                                    <div class=\"form-group\">\n                                                                        <label for=\"AddressDetails_ZipCode\">Zip</label>\n                                                                        <span class=\"required pl4\" aria-required=\"true\" *ngIf=\"terminalCreateForm.get('CountryId').value != '4'\">*</span>\n                                                                        <input class=\"form-control\"\n                                                                               formControlName=\"ZipCode\" type=\"text\" value=\"\"\n                                                                               (change)=\"getAddressByZip()\">\n                                                                        <div *ngIf=\"isInvalid('ZipCode')\" class=\"color-maroon\">\n                                                                            <div *ngIf=\"isRequired('ZipCode')\">\n                                                                                Required.\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                            <div class=\"row\">\n                                                                <div class=\"col-sm-4\">\n                                                                    <div class=\"form-group\">\n                                                                        <label>City</label>\n                                                                        <span class=\"required pl4\" aria-required=\"true\" *ngIf=\"terminalCreateForm.get('CountryId').value != '4'\">*</span>\n                                                                        <input class=\"form-control city addressInput\"\n                                                                               id=\"AddressDetails_City\" formControlName=\"City\"\n                                                                               type=\"text\" value=\"\">\n                                                                        <div *ngIf=\"isInvalid('City')\" class=\"color-maroon\">\n                                                                            <div *ngIf=\"isRequired('City')\">\n                                                                                Required.\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                                <div class=\"col-sm-4\">\n                                                                    <div class=\"form-group\">\n                                                                        <label>County Name</label>\n                                                                        <span class=\"required pl4\" aria-required=\"true\" *ngIf=\"terminalCreateForm.get('CountryId').value != '4'\">*</span>\n                                                                        <i class=\"fa fa-info-circle ml5\" data-toggle=\"tooltip\"\n                                                                           data-placement=\"top\"\n                                                                           title=\"Correct County name is required by our Tax service to calculate taxes accurately.\"></i>\n                                                                        <input class=\"form-control county addressInput\"\n                                                                               id=\"AddressDetails_CountyName\"\n                                                                               formControlName=\"County\" type=\"text\" value=\"\"\n                                                                               autocomplete=\"off\">\n                                                                        <div *ngIf=\"isInvalid('County')\" class=\"color-maroon\">\n                                                                            <div *ngIf=\"isRequired('County')\">\n                                                                                Required.\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                                <div class=\"col-sm-4\">\n                                                                    <div class=\"form-group\">\n                                                                        <label for=\"AddressDetails_State_Id\">\n                                                                            State<span class=\"required pl4\" aria-required=\"true\">*</span>\n                                                                        </label>\n                                                                        <select class=\"form-control state addressInput triggerTerminalChange\"\n                                                                                id=\"AddressDetails_State_Id\"\n                                                                                name=\"AddressDetails.State.Id\"\n                                                                                formControlName=\"StateId\">\n                                                                            <option value=\"\">Select State</option>\n                                                                            <option id=\"{{item.StateId}}\" [value]=\"item.StateId\"\n                                                                                    *ngFor=\"let item of filteredStatesList\" [selected]=\"item.StateId== terminalCreateForm.get('StateId').value\">\n                                                                                {{item.StateName}}\n                                                                            </option>\n                                                                        </select>\n                                                                        <div *ngIf=\"isInvalid('StateId')\" class=\"color-maroon\">\n                                                                            <div *ngIf=\"isRequired('StateId')\">\n                                                                                Required.\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                    <div class=\"row\">\n                                                        <div class=\"col-md-12\">\n                                                            <div class=\"form-check form-group form-check-inline\">\n                                                                <input class=\"form-check-input\" id=\"checkbox-geocodes\"\n                                                                       formControlName=\"IsGeocodeUsed\" type=\"checkbox\"\n                                                                       [value]=\"false\" (change)=\"setLatLongValidator(terminalCreateForm.get('IsGeocodeUsed').value)\">\n                                                                <label class=\"form-check-label\"\n                                                                       for=\"checkbox-geocodes\">Geo Codes</label>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"col-xs-6 col-md-4 combineDiv\">\n                                                            <div class=\"form-group\">\n                                                                <label for=\"AddressDetails_Latitude\">Latitude</label>\n                                                                <input class=\"form-control latitude geoInput defaultDisabled\"\n                                                                       id=\"AddressDetails_Latitude\"\n                                                                       name=\"AddressDetails.Latitude\"\n                                                                       formControlName=\"Latitude\" type=\"text\" value=\"0\"\n                                                                       [readonly]=\"terminalCreateForm.get('IsGeocodeUsed').value == false\"\n                                                                       (change)=\"getAddressByLatLong(terminalCreateForm.get('Latitude').value,terminalCreateForm.get('Longitude').value)\">\n                                                                <div *ngIf=\"isInvalid('Latitude')\" class=\"color-maroon\">\n                                                                    <div *ngIf=\"isRequired('Latitude')\">\n                                                                        Required.\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"col-xs-6 col-md-4 combineDiv\">\n                                                            <div class=\"form-group\">\n                                                                <label for=\"AddressDetails_Longitude\">Longitude</label>\n                                                                <input class=\"form-control longitude geoInput defaultDisabled\"\n                                                                       id=\"AddressDetails_Longitude\"\n                                                                       formControlName=\"Longitude\" type=\"text\" value=\"0\"\n                                                                       [readonly]=\"terminalCreateForm.get('IsGeocodeUsed').value == false\"\n                                                                       (change)=\"getAddressByLatLong(terminalCreateForm.get('Latitude').value,terminalCreateForm.get('Longitude').value)\">\n                                                                <div *ngIf=\"isInvalid('Longitude')\" class=\"color-maroon\">\n                                                                    <div *ngIf=\"isRequired('Longitude')\">\n                                                                        Required.\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                        <!--<div class=\"col-md-4\">\n                                <div class=\"form-group\">\n                                    <label for=\"AddressDetails_TimeZoneName\">\n                                        Time\n                                        Zone\n                                    </label>\n                                    <input class=\"form-control timeZoneName defaultDisabled\"\n                                           id=\"AddressDetails_TimeZoneName\"\n                                           formControlName=\"TimeZoneName\" readonly=\"true\"\n                                           type=\"text\" value=\"\"\n                                           [disableControl]=\" portCreateForm.controls['IsGeocodeUsed'].value == false\">\n                                </div>\n                            </div>-->\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"col-sm-5\">\n                                            <agm-map [zoom]=\"mapConstants.ZoomArea\" [latitude]=\"mapConstants.CenterLat\" [longitude]=\"mapConstants.CenterLon\">\n                                                <agm-marker [latitude]=\"mapConstants.CenterLat\" [longitude]=\"mapConstants.CenterLon\" [markerDraggable]=\"true\"\n                                                            (dragEnd)=\"markerDragEnd($event)\"\n                                                            [iconUrl]=\"mapConstants.IconUrl\"></agm-marker>\n                                            </agm-map>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row mt-3\">\n                                <div class=\"col-sm-12 text-right form-buttons\">\n                                    <input type=\"button\" id=\"btnCancel\" value=\"Cancel\" class=\"btn\" onclick=\"closeSlidePanel()\" (click)=\"clearPanelData()\">\n                                    <input class=\"btn btn-primary btn-lg no-disable\" type=\"submit\" value=\"Submit\" />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n\n<div class=\"loader\" *ngIf=\"IsLoading\">\n    <div class=\"loading-content text-center\">\n        <div class=\"spinner\"></div>\n    </div>\n</div>","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\r\nimport { HandleError } from '../errors/HandleError';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CreateterminalsService extends HandleError{\n    private urlGetTerminalsForGrid = '/SuperAdmin/SuperAdmin/GetTerminals';\n    private urlSaveTerminalDetails = '/SuperAdmin/SuperAdmin/SaveTerminal';\n    private urlGetTerminalMappingDetails = 'SuperAdmin/SuperAdmin/GetTerminalMappingDetails';\n    private urlGetAllProductsMapping = 'SuperAdmin/SuperAdmin/GetMstProductsForTerminalMapping';\n    private urlSaveTerminalProductMapping = 'SuperAdmin/SuperAdmin/SaveTerminalProductMapping';\n\n    constructor(private httpClient: HttpClient) {\n        super();\n    }\n\n    public getTerminalsForGrid(countryId: number) {\n        return this.httpClient.get<any[]>(this.urlGetTerminalsForGrid + '?countryId=' + countryId)\n            .pipe(catchError(this.handleError<any[]>('getTerminalsForGrid', [])));\n    }\n\n    saveTerminalDetails(terminal: any) {\n        return this.httpClient.post<any>(this.urlSaveTerminalDetails, terminal)\r\n            .pipe(catchError(this.handleError<any>('saveTerminalDetails', terminal)));\r\n    }\n\n    public getTerminalProductMappingDetails(countryId: number) {\n        return this.httpClient.get<any[]>(this.urlGetTerminalMappingDetails + '?countryId=' + countryId)\n            .pipe(catchError(this.handleError<any[]>('getTerminalProductMappingDetails', [])));\r\n    }\n\n    public getAllProductsForMapping() {\n        return this.httpClient.get<any[]>(this.urlGetAllProductsMapping)\n            .pipe(catchError(this.handleError<any[]>('getAllProductsForMapping', [])));\r\n    }\n    public saveTerminalProductMapping(model: any) {\n        return this.httpClient.post<any>(this.urlSaveTerminalProductMapping, model)\r\n            .pipe(catchError(this.handleError<any>('saveTerminalProductMapping', model)));\r\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MarinePortsandvesselsService } from '../marine-ports-vessels/marine-portsandvessels.service';\nimport { DropdownItem } from 'src/app/statelist.service';\nimport { Country } from 'src/app/self-service-alias/models/location';\ndeclare var currentCompanyId: any;\ndeclare var defaultCountryId: any;\n@Component({\n  selector: 'app-master',\n  templateUrl: './master.component.html',\n  styleUrls: ['./master.component.css']\n})\nexport class MasterComponent implements OnInit {\n    viewType = 1;\n    //country selection related variables\n    CountryList: DropdownItem[] = [];\n    public SelectedCountryId: number;\n\n    IsLoading = false;\n    constructor(private marineService: MarinePortsandvesselsService) { }\n\n    ngOnInit(): void {\n        this.getCountries();\n        this.SelectedCountryId = Country.USA;\n    }\n    private getCountries() {\n        this.marineService.GetAllCountries().subscribe((data) => {\n            this.CountryList = data;\n        });\n    }\n\n    public onCountryChange(event) {\n        this.SelectedCountryId = event.target.value;\n    }\n    public changeViewType(value) {\n        this.viewType = value;\n    }\n\n}\n","<div class=\"row mb-3\">\r\n    <div class=\"col-sm-11\">\r\n        <div class=\"dib border pa5 radius-capsule shadow-b bg-white\">\r\n            <div class=\"btn-group btn-filter\">\r\n                <input class=\"hide-element\" type=\"radio\" [name]=\"'viewType'\" [value]=\"1\"\r\n                       [checked]=\"viewType==1\">\r\n                <label class=\"btn ml0 mr-1\" (click)=\"changeViewType(1)\">Terminals</label>\r\n                <input class=\"hide-element\" type=\"radio\" [name]=\"'viewType'\" [value]=\"2\"\r\n                       [checked]=\"viewType==2\">\r\n                <label class=\"btn\" (click)=\"changeViewType(2)\">Terminals-Product Assignment</label>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-sm-1\">\r\n        <select class=\"form-control mt-1\" (change)=\"onCountryChange($event)\">\r\n            <option *ngFor=\"let country of CountryList\" [value]=\"country.Id\"\r\n                    [selected]=\"SelectedCountryId==country.Id\">\r\n                <i class=\"fa fa-airbnb fa-2x\"></i> {{country.Code}}\r\n            </option>\r\n        </select>\r\n    </div>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n        <app-create-terminal *ngIf=\"viewType==1\" [SelectedCountryId]=\"SelectedCountryId\"></app-create-terminal>\r\n        <app-terminal-product-assignment *ngIf=\"viewType==2\" [SelectedCountryId]=\"SelectedCountryId\"> </app-terminal-product-assignment>\r\n</div>\r\n</div>\r\n\r\n\r\n","import { DropDownItem } from \"../buyer-wally-board/Models/BuyerWallyBoard\";\r\n\r\n\r\nexport class TerminalDetailsModel {\r\n\r\n    constructor() {\r\n        this.IsGeoCoded = false;\r\n    }\r\n    Id: number;\r\n    Name?: string;\r\n    Abbreviation?: number;\r\n    ControlNumber?: number;\r\n    CountryCode?: string;   \r\n    Latitude?: number;\r\n    Longitude?: number;\r\n    Address?: string;\r\n    City?: string;\r\n    CityId?: number;\r\n    StateCode?: string;\r\n    StateId?: number;\r\n    ZipCode?: string;\r\n    IsGeoCoded: boolean;\r\n    County?: string;\r\n    TerminalOwner?: string;\r\n    CountryId?: number;\r\n}\r\n\r\nexport class Geocode {\r\n    Address: string;\r\n    Latitude: number;\r\n    Longitude: number;\r\n    CountyName: string;\r\n    StateCode: string;\r\n    StateName: string;\r\n    City: string;\r\n    CountryCode: string;\r\n    CountryName: string;\r\n    ZipCode: string;\r\n}\r\n\r\n\r\nexport class TerminalMappedProductsGridModel {\r\n    constructor() {\r\n        this.MappedProducts = [];\r\n    }\r\n    TerminalId: number;\r\n    TerminalControlNumber: string;\r\n    TerminalName: string;\r\n    AssignedProducts: string;\r\n    MappedProductCount: number;\r\n    MappedProducts: DropDownItem[];\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SharedModule } from '../modules/shared.module';\nimport { DataTablesModule } from 'angular-datatables';\nimport { MasterComponent } from './master.component';\nimport { CreateTerminalComponent } from './create-terminals/create-terminal.component';\nimport { TerminalProductAssignmentComponent } from './terminal-product assignment/terminal-product-assignment.component';\n\nconst route: Routes = [\n    { path: '', component: MasterComponent }\n]\n\n@NgModule({\n  declarations: [MasterComponent, CreateTerminalComponent, TerminalProductAssignmentComponent],\n  imports: [\n      CommonModule,\n      SharedModule,\n      DataTablesModule,\n      RouterModule.forChild(route)\n  ]\n})\nexport class SuperadminCreateTerminalModule { }\n","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { IDropdownSettings } from 'ng-multiselect-dropdown';\r\nimport { Subject } from 'rxjs';\r\nimport { DropDownItem } from '../../buyer-wally-board/Models/BuyerWallyBoard';\r\nimport { Declarations } from '../../declarations.module';\r\nimport { CreateterminalsService } from '../createterminals.service';\r\nimport { TerminalMappedProductsGridModel } from './../models'\n\n\n@Component({\n  selector: 'app-terminal-product-assignment',\n  templateUrl: './terminal-product-assignment.component.html',\n  styleUrls: ['./terminal-product-assignment.component.css']\n})\nexport class TerminalProductAssignmentComponent implements OnInit, OnChanges{\n\n    public IsLoading: boolean;\n    @Input() SelectedCountryId: any;\n\n    dtOptions: any = {};\n    dtTrigger: Subject<any> = new Subject();\n\n    public terminalMappingDetails: TerminalMappedProductsGridModel[] = [];\n\n\n\n    public _opened: boolean = false;\n    public _animate: boolean = true;\n    public _positionNum: number = 1;\n    public _POSITIONS: Array<string> = ['left', 'right', 'top', 'bottom'];\n    public terminalMappingForm: FormGroup;\n    public terminalMappingDetail: TerminalMappedProductsGridModel;\n    public productList: any[];\n    public multiselectSettingsById: IDropdownSettings;\n    public Products: DropDownItem[];\n\n    constructor(private terminalService: CreateterminalsService, private fb: FormBuilder) { }\n    \r\n\n    ngOnInit(): void {\r\n        this.dtOptions = {\r\n            dom: '<\"html5buttons\"B>lTfgitp',\r\n            buttons: [               \r\n            ],\r\n            pagingType: 'first_last_numbers',\r\n            pageLength: 10,\r\n            ordering: true,\r\n            order: [],\r\n            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, \"All\"]]\r\n        };\r\n\r\n        this.multiselectSettingsById = {\n            singleSelection: false,\n            idField: \"Id\",\n            textField: \"Name\",\n            selectAllText: \"Select All\",\n            unSelectAllText: \"UnSelect All\",\n            itemsShowLimit: 5,\n            allowSearchFilter: true\n        };\r\n        this.getAllProductsDDL();\r\n        this.initializeTerminalMappingCreationForm(this.terminalMappingDetail);\n\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.SelectedCountryId && changes.SelectedCountryId.currentValue) {\r\n            this.getTerminalMappingDetailsData()\r\n        }\r\n    }\n\n    getTerminalMappingDetailsData() {\r\n        let countryId = this.SelectedCountryId;\r\n        this.IsLoading = true;\r\n        this.terminalService.getTerminalProductMappingDetails(countryId).subscribe((data) => {\r\n            if (data) {\r\n                jQuery(\"#terminal-products-datatable\").DataTable().clear().destroy();\r\n                this.terminalMappingDetails = data;\r\n                this.dtTrigger.next();\r\n                this.IsLoading = false;\r\n            }\r\n\r\n        });\r\n    }\n    initializeTerminalMappingCreationForm(terminalMapping: TerminalMappedProductsGridModel) {\n        if (terminalMapping == null || terminalMapping == undefined) {\r\n            terminalMapping = new TerminalMappedProductsGridModel();\r\n        }\r\n        this.terminalMappingForm = this.fb.group({\r\n            TerminalId: this.fb.control(terminalMapping.TerminalId),\r\n            TerminalControlNumber: this.fb.control(terminalMapping.TerminalControlNumber),\r\n            MappedProducts: this.fb.control(terminalMapping.MappedProducts, [Validators.required]),\r\n            TerminalName: this.fb.control(terminalMapping.TerminalName)\r\n        });\r\n    }\n\n\n    formatProductsForGridDisplay(assignedProducts:any[]) {\n        let formattedString = \"\";\r\n        if (assignedProducts != null && assignedProducts.length > 0) {\r\n            let displayCount = assignedProducts.length - 3;\r\n            if (assignedProducts.length > 3)\r\n            {\r\n                assignedProducts.forEach(function (product, index) {\r\n                    if (index <= 2) {\r\n                        if (product.Name) {\r\n                            formattedString = index == 2 ? formattedString.concat(product.Name, \"     \", \"+\" + displayCount+\" other\") : formattedString.concat(product.Name,\", \");\r\n                        }\r\n                    }\r\n\r\n                });\r\n            }\r\n            else \r\n            {\r\n                assignedProducts.forEach(function (product, index) {\r\n                        if (product.Name) {\r\n                            formattedString =  index == assignedProducts.length-1? formattedString.concat(product.Name, \" \") : formattedString.concat(product.Name, \", \");\r\n                        }\r\n\r\n                });\r\n            }\r\n        }\r\n        return formattedString;\r\n    }\n\n\n    _toggleOpened(shouldOpen: boolean) {\n        if (shouldOpen) {            \n            this._opened = true;\n        }\n        else {\n            this._opened = !this._opened;\n            this.terminalMappingForm.reset();\n        }\n    }\n    getAllProductsDDL() {\r\n        this.IsLoading = true;\r\n        this.terminalService.getAllProductsForMapping().subscribe((data) => {\r\n            this.IsLoading = false;\r\n            this.productList = data;\r\n        });\r\n    }\n\n    editMapping(terminalMapping: TerminalMappedProductsGridModel) {\n        if (terminalMapping != null && terminalMapping != undefined) {\n            this.terminalMappingForm.get('TerminalId').setValue(terminalMapping.TerminalId);\r\n            this.terminalMappingForm.get('TerminalControlNumber').setValue(terminalMapping.TerminalControlNumber);\r\n            this.terminalMappingForm.get('MappedProducts').setValue(terminalMapping.MappedProducts);\r\n            this.terminalMappingForm.get('TerminalName').setValue(terminalMapping.TerminalName);\r\n        }\n        \r\n    }\n\n\n    SubmitForm() {\n        this.terminalMappingForm.markAllAsTouched();\n        if (this.terminalMappingForm.valid) {\n            let model = this.terminalMappingForm.value;\r\n            if (model) {\r\n                let input = new TerminalMappedProductsGridModel();\r\n                input.TerminalId = model.TerminalId;\r\n                input.TerminalControlNumber = model.TerminalControlNumber;\r\n                input.MappedProducts = model.MappedProducts;\r\n                input.TerminalName = model.TerminalName;\r\n                this.IsLoading = true;\r\n                this.terminalService.saveTerminalProductMapping(input).subscribe((data) => {\r\n                    if (data.StatusCode == 0) {\r\n                        Declarations.msgsuccess(data.StatusMessage, undefined, undefined);\r\n                        this._toggleOpened(false);\r\n                        this.getTerminalMappingDetailsData();\r\n                    }\r\n                    else if (data.StatusCode == 1) {\r\n                        Declarations.msgerror(data.StatusMessage, undefined, undefined);\r\n                    }\r\n                    this.IsLoading = false;\r\n                });\r\n            }\r\n            \r\n        }\n        \r\n    }\n}\n","<div class=\"row\">\n    <div class=\"col-md-12\">\n        <div class=\"well bg-white shadowb-b\">\n            <div class=\"ibox mb0\">\n                <div class=\"ibox-content no-padding no-border\">\n                    <div id=\"terminal-products-grid\" class=\"table-responsive\">\n                        <table id=\"terminal-products-datatable\" data-gridname=\"35\" datatable [dtOptions]=\"dtOptions\" [dtTrigger]=\"dtTrigger\" class=\"table table-striped table-bordered table-hover\">\n                            <thead>\n                                <tr>\n                                    <th>Terminal Name</th>\n                                    <th>Terminal Control Number</th>\n                                    <th>Assigned Products</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let mapping of terminalMappingDetails\">\n                                    <td><a [routerLink]=\"\" (click)=\"_toggleOpened(true);editMapping(mapping)\">{{mapping.TerminalName}}</a></td>\n                                    <td>\n                                        <span *ngIf=\"mapping.TerminalControlNumber != null\">{{mapping.TerminalControlNumber}}</span>\n                                        <span *ngIf=\"mapping.TerminalControlNumber == null\">--</span>\n                                    </td>\n                                    <td>                                      \n                                        <span *ngIf=\"mapping?.MappedProducts.length && mapping?.MappedProducts.length > 0\">\n                                            <ng-container>                                              \n                                                <span>{{formatProductsForGridDisplay(mapping?.MappedProducts)}}</span>                                              \n                                            </ng-container>\n                                            \n                                        </span>\n                                    </td>                                   \n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<div>\n    <ng-sidebar-container>\n        <ng-sidebar [(opened)]=\"_opened\"\n                    [animate]=\"_animate\"\n                    [position]=\"_POSITIONS[_positionNum]\"\n                    style=\"height: 100vh\">\n            <a (click)=\"_toggleOpened(false)\"><i class=\"fa fa-close fs18\"></i></a>\n            <h3 class=\"dib ml10 mt10 mb10\">Terminal-Product(s) Assignment</h3>\n            <content class=\"pr30\">\n                <form [formGroup]=\"terminalMappingForm\" (ngSubmit)=\"SubmitForm()\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label for=\"TerminalName\">Terminal Name</label>\n                                <input formControlName=\"TerminalName\" class=\"form-control\" [readonly]=\"true\">\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label for=\"TerminalControlNumber\">Terminal Control Number</label>\n                                <input formControlName=\"TerminalControlNumber\" class=\"form-control\" [readonly]=\"true\">\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label for=\"Jobs\">Product(s)</label><span class=\"color-maroon\">*</span>\n                                <ng-multiselect-dropdown formControlName=\"MappedProducts\"\n                                                         [placeholder]=\"'Select Product(s)'\"\n                                                         [settings]=\"multiselectSettingsById\" [data]=\"productList\"\n                                                         [(ngModel)]=\"Products\">\n                                </ng-multiselect-dropdown>\n                                <div *ngIf=\"terminalMappingForm.get('MappedProducts').invalid && terminalMappingForm.get('MappedProducts').touched\" class=\"color-maroon\">\n                                    <div *ngIf=\"terminalMappingForm.get('MappedProducts').errors.required\">\n                                        Product(s) is required.\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"text-right\">\n                        <button (click)=\"_toggleOpened(false)\" class=\"btn btn-lg\" type=\"reset\">Cancel</button>\n                        <button class=\"ml15 btn btn-primary btn-lg\" type=\"submit\">Save</button>\n                    </div>\n                </form>\n            </content>\n        </ng-sidebar>\n    </ng-sidebar-container>\n</div>\n\n\n<div class=\"loader\" *ngIf=\"IsLoading\">\n    <div class=\"loading-content text-center\">\n        <div class=\"spinner\"></div>\n    </div>\n</div>\n\n"],"sourceRoot":"webpack:///"}