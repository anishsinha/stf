{"version":3,"sources":["webpack:///src/app/superadmin-create-terminals/create-terminals/create-terminal.component.ts","webpack:///src/app/superadmin-create-terminals/create-terminals/create-terminal.component.html","webpack:///src/app/superadmin-create-terminals/createterminals.service.ts","webpack:///src/app/superadmin-create-terminals/master.component.ts","webpack:///src/app/superadmin-create-terminals/master.component.html","webpack:///src/app/superadmin-create-terminals/models.ts","webpack:///src/app/superadmin-create-terminals/superadmin-create-terminal.module.ts","webpack:///src/app/superadmin-create-terminals/terminal-product assignment/terminal-product-assignment.component.ts","webpack:///src/app/superadmin-create-terminals/terminal-product assignment/terminal-product-assignment.component.html"],"names":["CreateTerminalComponent","marineService","fb","salesService","confirmationdialogueservice","terminalService","TerminalDetailsData","TerminalDetail","dtOptions","dtTrigger","popoverTitle","confirmButtonText","cancelButtonText","mapConstants","MapConstants","countryList","currucyList","statesList","filteredStatesList","countryGroupList","IsLoading","ModalText","exportColumns","columns","dom","buttons","extend","exportOptions","title","orientation","pagingType","pageLength","ordering","order","lengthMenu","getCountryList","getcountryGroupList","getStatesOfAllCountries","CountryId","SelectedCountryId","CenterLat","CenterLon","initializeTerminalCreationForm","jQuery","val","change","changes","currentValue","getTerminalDetailsData","setMapCenter","setAddressValidators","header","filter","s","terminalCreateForm","get","setValue","setLatLongValidator","isGeoCoded","required","setValidators","updateValueAndValidity","clearValidators","countryId","reset","subscribe","data","length","getCountryGroupList","GetStatesOfAllCountries","terminal","group","Id","control","Name","Abbreviation","TerminalOwner","ControlNumber","Address","City","County","StateId","StateName","StateCode","ZipCode","IsGeocodeUsed","IsGeoCoded","Latitude","pattern","Longitude","validator","getTerminalsForGrid","DataTable","clear","destroy","next","parseFloat","value","markAllAsTouched","valid","saveTerminalDetails","StatusCode","msgsuccess","StatusMessage","undefined","clearPanelData","dismissSlider","document","getElementById","click","msgerror","name","result","invalid","dirty","touched","errors","zipCode","GetAddressByZip","country","find","t","Code","includes","CountryCode","patchValue","CountyName","stateId","x","lat","long","updateGeoCode","lng","GetAddressByLongLat","updateAddressData","address","stateName","CountryName","state","st","toLowerCase","states","event","confirm","then","confirmed","coords","previousLatLon","unsubscribe","createTerminal","onSubmit","getAddressByZip","getAddressByLatLong","markerDragEnd","selector","templateUrl","styleUrls","ZoomArea","IconUrl","url","scaledSize","width","height","MapIconUrl","MapIconSize","CreateterminalsService","httpClient","urlGetTerminalsForGrid","urlSaveTerminalDetails","urlGetTerminalMappingDetails","urlGetAllProductsMapping","urlSaveTerminalProductMapping","pipe","handleError","post","model","providedIn","MasterComponent","viewType","CountryList","getCountries","USA","GetAllCountries","target","changeViewType","onCountryChange","TerminalDetailsModel","Geocode","TerminalMappedProductsGridModel","MappedProducts","route","path","component","SuperadminCreateTerminalModule","forChild","declarations","imports","TerminalProductAssignmentComponent","terminalMappingDetails","_opened","_animate","_positionNum","_POSITIONS","multiselectSettingsById","singleSelection","idField","textField","selectAllText","unSelectAllText","itemsShowLimit","allowSearchFilter","getAllProductsDDL","initializeTerminalMappingCreationForm","terminalMappingDetail","getTerminalMappingDetailsData","getTerminalProductMappingDetails","terminalMapping","terminalMappingForm","TerminalId","TerminalControlNumber","TerminalName","assignedProducts","formattedString","displayCount","forEach","product","index","concat","shouldOpen","getAllProductsForMapping","productList","input","saveTerminalProductMapping","_toggleOpened","SubmitForm"],"mappings":"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","file":"superadmin-create-terminals-superadmin-create-terminal-module-es5.js","sourcesContent":["import { Component, Input, OnInit, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { MarinePortsandvesselsService } from '../../marine-ports-vessels/marine-portsandvessels.service';\r\nimport { SalesUserService } from '../../sales-user/sales-user.service';\r\nimport { ConfirmationDialogService } from '../../shared-components/confirmation-dialog/confirmation-dialog.service';\r\nimport { TerminalDetailsModel, Geocode } from './../models';\r\nimport { CreateterminalsService} from './../createterminals.service';\r\nimport { Declarations } from '../../declarations.module';\r\n\n@Component({\n  selector: 'app-create-terminal',\n  templateUrl: './create-terminal.component.html',\n  styleUrls: ['./create-terminal.component.css']\n})\nexport class CreateTerminalComponent implements OnInit {\n    @Input() SelectedCountryId: any;\n\n    public ModalText: string;\n\n    public TerminalDetailsData: TerminalDetailsModel[] = [];\n    public TerminalDetail: TerminalDetailsModel = new TerminalDetailsModel();\n    dtOptions: any = {};\n    dtTrigger: Subject<any> = new Subject();\n\n    public popoverTitle: string = 'Are you sure?';\n    public confirmButtonText: string = 'Yes';\n    public cancelButtonText: string = 'No';\n\n    terminalCreateForm: FormGroup;\n\n    mapConstants: MapConstants = new MapConstants();\n\n    public countryList = [];\n    public currucyList = [];\n    public statesList = [];\n    public filteredStatesList = [];\n    public countryGroupList = [];\n    public currentCountryId: any;\n\n    public IsLoading: boolean = false;\n\n    constructor(private marineService: MarinePortsandvesselsService, private fb: FormBuilder,\n        private salesService: SalesUserService, private confirmationdialogueservice: ConfirmationDialogService,\n        private terminalService: CreateterminalsService) { }\n    \n    ngOnInit(): void {\n        this.ModalText = 'Create Terminal';\r\n        var exportColumns = { columns: [0, 1, 2, 3, 4, 5, 6, 7] };\r\n        this.dtOptions = {\r\n            dom: '<\"html5buttons\"B>lTfgitp',\r\n            buttons: [\r\n                { extend: 'colvis' },\r\n                { extend: 'copy', exportOptions: exportColumns },\r\n                { extend: 'csv', title: 'Terminal Details', exportOptions: exportColumns },\r\n                { extend: 'pdf', title: 'Terminal Details', orientation: 'landscape', exportOptions: exportColumns },\r\n                { extend: 'print', exportOptions: exportColumns }\r\n            ],\r\n            pagingType: 'first_last_numbers',\r\n            pageLength: 10,\r\n            ordering: true,\r\n            order: [],\r\n            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, \"All\"]]\r\n        };\r\n        this.getCountryList();\r\n        this.getcountryGroupList();\r\n        this.getStatesOfAllCountries();\r\n        this.TerminalDetail.CountryId = this.SelectedCountryId;\r\n        if (this.SelectedCountryId == 2) { //canada\r\n            this.mapConstants.CenterLat = 56.14;\r\n            this.mapConstants.CenterLon = -106.34;\r\n        }\r\n        this.initializeTerminalCreationForm(this.TerminalDetail);\r\n        jQuery(\"#AddressDetails_Country_Id\").val(\"0\").change();\n    }\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.SelectedCountryId && changes.SelectedCountryId.currentValue) {\r\n            // get call for grid data\r\n            this.getTerminalDetailsData();\r\n            this.TerminalDetail.CountryId = this.SelectedCountryId;\r\n            this.setMapCenter(this.SelectedCountryId);\r\n            this.setAddressValidators(this.SelectedCountryId);\r\n            jQuery(\"#AddressDetails_Country_Id\").val(\"0\").change();\r\n        }\r\n    }\n\n    createTerminal(header: string) {\r\n        this.ModalText = header;\r\n        this.filteredStatesList = this.statesList.filter(s => s.CountryId == this.SelectedCountryId) || [];\r\n        this.terminalCreateForm.get('CountryId').setValue(this.SelectedCountryId);\r\n        this.terminalCreateForm.get('IsGeocodeUsed').setValue(false);\r\n        this.setLatLongValidator(false);\r\n        this.setMapCenter(this.SelectedCountryId);\r\n        this.terminalCreateForm.get('StateId').setValue(null);\r\n        jQuery(\"#AddressDetails_Country_Id\").val(\"0\").change();\r\n    }\n\n    setLatLongValidator(isGeoCoded: any) {\r\n        if (isGeoCoded) {\r\n            let val = [Validators.required];\r\n            this.terminalCreateForm.get('Latitude').setValidators(val);\r\n            this.terminalCreateForm.get('Longitude').setValidators(val);\r\n            this.terminalCreateForm.get('Latitude').updateValueAndValidity();\r\n            this.terminalCreateForm.get('Longitude').updateValueAndValidity();\r\n        }\r\n        else {\r\n            this.terminalCreateForm.get('Latitude').clearValidators();\r\n            this.terminalCreateForm.get('Latitude').updateValueAndValidity();\r\n            this.terminalCreateForm.get('Longitude').clearValidators();\r\n            this.terminalCreateForm.get('Longitude').updateValueAndValidity();\r\n        }\r\n    }\n    setMapCenter(countryId: number) {\r\n        if (countryId == 2) {\r\n            this.mapConstants.CenterLat = 56.14;\r\n            this.mapConstants.CenterLon = -106.34;\r\n        }\r\n        else if (countryId == 4) {\r\n            this.mapConstants.CenterLat = 13.193887;\r\n            this.mapConstants.CenterLon = -59.543198;\r\n        }\r\n        else {\r\n            this.mapConstants.CenterLat = 38;\r\n            this.mapConstants.CenterLon = -98.35;\r\n        }\r\n    }\n\n    clearPanelData() {\r\n        this.terminalCreateForm.reset();\r\n        this.terminalCreateForm.get('CountryId').setValue(this.SelectedCountryId);\r\n        this.terminalCreateForm.get('StateId').setValue(null);\r\n        this.filteredStatesList = this.statesList.filter(s => s.CountryId == this.SelectedCountryId) || [];\r\n        this.setMapCenter(this.SelectedCountryId);\r\n        jQuery(\"#AddressDetails_Country_Id\").val(\"0\").change();\r\n        this.setLatLongValidator(false);\r\n\r\n    }\n    public getCountryList() {\r\n        this.marineService.getCountryList().subscribe(data => {\r\n            if (data && data.length > 0) {\r\n                this.countryList = data;\r\n            }\r\n        });\r\n    }\n    public getcountryGroupList() {\r\n        this.marineService.getCountryGroupList(4).subscribe(data => {\r\n            if (data && data.length > 0) {\r\n                this.countryGroupList = data;\r\n            }\r\n        });\r\n    }\n    public getStatesOfAllCountries(countryId?: number) {\r\n        this.marineService.GetStatesOfAllCountries(countryId).subscribe(data => {\r\n            if (data && data.length > 0) {\r\n                this.statesList = data;\r\n                this.filteredStatesList = this.statesList;\r\n            }\r\n        });\r\n    }\n\n    initializeTerminalCreationForm(terminal: TerminalDetailsModel): FormGroup {\r\n        this.terminalCreateForm = this.fb.group({\r\n            Id: this.fb.control(terminal.Id),\r\n            Name: this.fb.control(terminal.Name, [Validators.required]),\r\n            Abbreviation: this.fb.control(terminal.Abbreviation),\r\n            TerminalOwner: this.fb.control(terminal.TerminalOwner),\r\n            ControlNumber: this.fb.control(terminal.ControlNumber),\r\n            Address: this.fb.control(terminal.Address),\r\n            City: this.fb.control(terminal.City),\r\n            County: this.fb.control(terminal.County),\r\n            StateId: this.fb.control(terminal.StateId, [Validators.required]),\r\n            CountryId: this.fb.control(terminal.CountryId, [Validators.required]),\r\n            StateName: this.fb.control(terminal.StateCode),\r\n            ZipCode: this.fb.control(terminal.ZipCode),\r\n            IsGeocodeUsed: this.fb.control(terminal.IsGeoCoded),\r\n            Latitude: this.fb.control(terminal.Latitude, Validators.pattern('^[0-9.-]*$')),\r\n            Longitude: this.fb.control(terminal.Longitude, Validators.pattern('^[0-9.-]*$')),\r\n\r\n        })\r\n        this.setAddressValidators(terminal.CountryId);\r\n        return this.terminalCreateForm;\r\n\r\n    }\n\n    setAddressValidators(countryId: number) {\r\n        if (countryId && this.terminalCreateForm) {\r\n            let validator: any;\r\n            if (countryId && (countryId == 1 || countryId == 2)) {\r\n                validator = [Validators.required];\r\n            }\r\n            else {\r\n                validator = [];\r\n            }\r\n            this.terminalCreateForm.get('Address').setValidators(validator);\r\n            this.terminalCreateForm.get('Address').updateValueAndValidity();\r\n            this.terminalCreateForm.get('City').setValidators(validator);\r\n            this.terminalCreateForm.get('City').updateValueAndValidity();\r\n            this.terminalCreateForm.get('County').setValidators(validator);\r\n            this.terminalCreateForm.get('County').updateValueAndValidity();\r\n            this.terminalCreateForm.get('ZipCode').setValidators(validator);\r\n            this.terminalCreateForm.get('ZipCode').updateValueAndValidity();\r\n        }\r\n    }\n\n    getTerminalDetailsData() {\r\n        let countryId = this.SelectedCountryId;\r\n        this.IsLoading = true;\r\n        this.terminalService.getTerminalsForGrid(countryId).subscribe((data) => {\r\n            if (data) {\r\n                jQuery(\"#terminal-datatable\").DataTable().clear().destroy();\r\n                this.TerminalDetailsData = data;\r\n                this.dtTrigger.next();\r\n                this.IsLoading = false;\r\n            }\r\n\r\n        });      \r\n    }\n\n    editTerminal(terminal) {\r\n        if (terminal) {\r\n            this.terminalCreateForm.get('Id').setValue(terminal.Id);\r\n            this.terminalCreateForm.get('Name').setValue(terminal.Name);\r\n            this.terminalCreateForm.get('Abbreviation').setValue(terminal.Abbreviation);\r\n            this.terminalCreateForm.get('ControlNumber').setValue(terminal.ControlNumber);\r\n            this.terminalCreateForm.get('TerminalOwner').setValue(terminal.TerminalOwner);\r\n            this.terminalCreateForm.get('Address').setValue(terminal.Address);\r\n            this.terminalCreateForm.get('City').setValue(terminal.City);\r\n            this.terminalCreateForm.get('County').setValue(terminal.County);\r\n            this.terminalCreateForm.get('StateId').setValue(terminal.StateId);\r\n            this.terminalCreateForm.get('CountryId').setValue(terminal.CountryId);\r\n            //this.terminalCreateForm.get('StateName').setValue(terminal.State);\r\n            this.terminalCreateForm.get('ZipCode').setValue(terminal.ZipCode);\r\n            this.terminalCreateForm.get('IsGeocodeUsed').setValue(false); // we dont save IsGeoCode flag at terminal level so it to false always \r\n            this.terminalCreateForm.get('Latitude').setValue(terminal.Latitude);\r\n            this.terminalCreateForm.get('Longitude').setValue(terminal.Longitude);\r\n            if (terminal.Latitude) {\r\n                this.mapConstants.CenterLat = parseFloat(terminal.Latitude);\r\n                this.mapConstants.CenterLon = parseFloat(terminal.Longitude);\r\n            }\r\n            let countryId = this.terminalCreateForm.get('CountryId').value;\r\n            this.setAddressValidators(countryId);\r\n            jQuery(\"#AddressDetails_Country_Id\").val(\"0\").change();\r\n        }\r\n    }\n\n    onSubmit() {\r\n        this.terminalCreateForm.markAllAsTouched();\r\n        this.terminalCreateForm.value;\r\n        if (this.terminalCreateForm.valid) {\r\n            this.IsLoading = true;\r\n            // serverside api to save terminal\r\n            let terminal = this.terminalCreateForm.value;\r\n            this.terminalService.saveTerminalDetails(terminal).subscribe(data => {\r\n                if (data != null && data.StatusCode == 0) {\r\n                    Declarations.msgsuccess(data.StatusMessage, undefined, undefined);\r\n                    this.IsLoading = false;\r\n                    this.terminalCreateForm.reset();\r\n                    this.clearPanelData();\r\n                    let dismissSlider = document.getElementById('btnCancel') as HTMLElement;\r\n                    dismissSlider.click();\r\n                    this.getTerminalDetailsData();\r\n                } else {\r\n                    this.IsLoading = false;\r\n                    Declarations.msgerror(data == null ? 'Failed' : data.StatusMessage, undefined, undefined);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\n\n    isInvalid(name: string): boolean {\r\n        var result = this.terminalCreateForm.get(name).invalid\r\n            &&\r\n            (\r\n            this.terminalCreateForm.get(name).dirty\r\n                ||\r\n            this.terminalCreateForm.get(name).touched\r\n            )\r\n        return result;\r\n    }\r\n\r\n    isRequired(name: string): boolean {\r\n        return this.terminalCreateForm.get(name).errors.required;\r\n    }\n\n    public getAddressByZip() {\r\n        var zipCode = this.terminalCreateForm.get('ZipCode').value;\r\n        if (zipCode) {\r\n            this.marineService.GetAddressByZip(zipCode).subscribe(data => {\r\n                if (data) {\r\n                    var country = this.countryList.find(t => t.Code.includes(data.CountryCode));\r\n                    if (country) {\r\n                        var countryId = country.Id;\r\n                        this.terminalCreateForm.get('CountryId').patchValue(countryId);\r\n                        /*this.terminalCreateForm.get('Address').patchValue(data.Address);*/\r\n                        this.terminalCreateForm.get('County').patchValue(data.CountyName);\r\n                        this.terminalCreateForm.get('City').patchValue(data.City);\r\n                        var stateId = this.statesList.find(x => x.StateCode == data.StateCode).StateId;\r\n                        this.terminalCreateForm.get('StateId').patchValue(stateId);\r\n                        this.terminalCreateForm.get('Latitude').patchValue(data.Latitude);\r\n                        this.terminalCreateForm.get('Longitude').patchValue(data.Longitude);\r\n                        this.mapConstants.CenterLat = data.Latitude;\r\n                        this.mapConstants.CenterLon = data.Longitude;\r\n                        this.filteredStatesList = this.statesList.filter(s => s.CountryId == countryId) || [];\r\n\r\n                        if (!this.terminalCreateForm.get('Address').value) {\r\n                            this.terminalCreateForm.get('Address').patchValue(data.Address);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }\n    getAddressByLatLong(lat: number, long: number) {\r\n        let isGeoCoded = this.terminalCreateForm.get('IsGeocodeUsed').value;\r\n        if (isGeoCoded && lat && long) {\r\n            this.updateGeoCode(lat, long);\r\n        }\r\n    }\n\n    updateGeoCode(lat, lng) {\r\n        this.salesService.GetAddressByLongLat(lat, lng).subscribe(data => {\r\n            if (data) {\r\n                data.Latitude = parseFloat(lat);\r\n                data.Longitude = parseFloat(lng);\r\n                this.updateAddressData(data);\r\n            }\r\n            else { // if no address fetched for lat-long then set only map marker on UI\r\n                this.mapConstants.CenterLat = lat;\r\n                this.mapConstants.CenterLon = lng;\r\n            }\r\n\r\n        })\r\n    }\n    updateAddressData(address: Geocode) {\r\n        let countryId = (address.CountryCode == 'US' || address.CountryCode == 'USA') ? 1 : (address.CountryCode == 'CA' || address.CountryCode == 'CAN') ? 2 : this.terminalCreateForm.get('CountryId').value;\r\n        let stateName = (address.StateName != null && address.StateName != '' && address.StateName != undefined) ? address.StateName : address.CountryName;\r\n\r\n        if (stateName) {\r\n            let state = this.statesList.find(st => st.StateName.toLowerCase() == stateName.toLowerCase());\r\n            let stateId = (state && state.StateId) ? state.StateId : this.terminalCreateForm.get('StateId').value;\r\n            this.terminalCreateForm.get('StateId').patchValue(stateId);\r\n        }\r\n        else //set first state after filtering by countryID\r\n        {\r\n            let states = this.statesList.filter(s => s.CountryId == countryId) || [];\r\n            if (states && states.length > 0) {\r\n                let stateId = states[0].StateId;\r\n                if (stateId) {\r\n                    this.terminalCreateForm.get('StateId').patchValue(stateId);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.terminalCreateForm.get('Address').patchValue(address.Address);\r\n        this.terminalCreateForm.get('City').patchValue(address.City);\r\n        this.terminalCreateForm.get('ZipCode').patchValue(address.ZipCode);\r\n\r\n        this.terminalCreateForm.get('CountryId').patchValue(countryId);\r\n\r\n        this.terminalCreateForm.get('County').patchValue(address.CountyName);\r\n\r\n\r\n\r\n        if (address.Latitude) {\r\n            this.terminalCreateForm.get('Latitude').patchValue(address.Latitude);\r\n            this.terminalCreateForm.get('Longitude').patchValue(address.Longitude);\r\n            this.mapConstants.CenterLat = address.Latitude;\r\n            this.mapConstants.CenterLon = address.Longitude;\r\n        }\r\n\r\n        this.filteredStatesList = this.statesList.filter(s => s.CountryId == countryId) || [];\r\n\r\n    }\n\n    markerDragEnd(event) {\r\n        this.confirmationdialogueservice.confirm('Map update', 'Geo Codes shifted to a new location!')\r\n            .then((confirmed) => (confirmed == true) ? this.updateGeoCode(event.coords.lat, event.coords.lng) : this.previousLatLon())\r\n            .catch(() => this.previousLatLon());\r\n    }\n    public previousLatLon() {\r\n        this.mapConstants.CenterLat = this.terminalCreateForm.get('Latitude').value;\r\n        this.mapConstants.CenterLon = this.terminalCreateForm.get('Longitude').value;\r\n    }\n\n    ngOnDestroy(): void {\r\n        this.dtTrigger.unsubscribe();\r\n    }\n}\n\n\r\nexport class MapConstants {\r\n    CenterLat: number;\r\n    CenterLon: number;\r\n    ZoomArea: number;\r\n    IconUrl: MapIconUrl;\r\n\r\n    constructor() {\r\n        this.CenterLat = 38;\r\n        this.CenterLon = -98.35;\r\n        this.ZoomArea = 15;\r\n        this.IconUrl = { url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png', scaledSize: { width: 40, height: 40 } }\r\n    }\r\n}\r\n\r\nexport class MapIconUrl {\r\n    url: string;\r\n    scaledSize: MapIconSize;\r\n}\r\nexport class MapIconSize {\r\n    width: number;\r\n    height: number\r\n}\n","\n<div class=\"section-marine-ports-grid\">\n    <div>\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <h4 class=\"pt0 pull-left\">Terminals</h4>\n                <a (click)=\"createTerminal('Create Terminal')\" onclick=\"slidePanel('#create-terminal','70%')\" class=\"fs18 pull-left ml10\"\n                    [ngClass]=\"{'disabled': SelectedCountryId =='4'}\">\n                    <i class=\"fa fa-plus-circle fs18 mt4 pull-left\"></i><span class=\"fs14 mt2 pull-left\">Add New</span>\n                </a>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"well bg-white shadowb-b\">\n                    <div class=\"ibox mb0\">\n                        <div class=\"ibox-content no-padding no-border\">\n                            <div id=\"terminal-details-grid\" class=\"table-responsive\">\n                                <table id=\"terminal-datatable\" data-gridname=\"35\" datatable [dtOptions]=\"dtOptions\" [dtTrigger]=\"dtTrigger\" class=\"table table-striped table-bordered table-hover\">\n                                    <thead>\n                                        <tr>\n                                            <th>Name</th>\n                                            <th>Abbreviation</th>\n                                            <th>ControlNumber</th>\n                                            <th>Address</th>\n                                            <th>City</th>\n                                            <th>State</th>\n                                            <th>Terminal Owner</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let terminal of TerminalDetailsData\">\n                                            <td>{{terminal.Name}}</td>\n                                            <td>\n                                                <span *ngIf=\"terminal.Abbreviation != null\">{{terminal.Abbreviation}}</span>\n                                                <span *ngIf=\"terminal.Abbreviation == null\">--</span>\n                                            </td>\n                                            <td>\n                                                <span *ngIf=\"terminal.ControlNumber != null\">{{terminal.ControlNumber}}</span>\n                                                <span *ngIf=\"terminal.ControlNumber == null\">--</span>\n                                            </td>\n                                            <td>\n                                                <span *ngIf=\"terminal.Address != null\">{{terminal.Address}}</span>\n                                                <span *ngIf=\"terminal.Address == null\">--</span>\n                                            </td>\n                                            <td>\n                                                <span *ngIf=\"terminal.City != null\">{{terminal.City}}</span>\n                                                <span *ngIf=\"terminal.City == null\">--</span>\n                                            </td>\n                                            <td>\n                                                <span *ngIf=\"terminal.StateCode != null\">{{terminal.StateCode}}</span>\n                                                <span *ngIf=\"terminal.StateCode == null\">--</span>\n                                            </td>\n                                            <td>\n                                                <span *ngIf=\"terminal.TerminalOwner != null\">{{terminal.TerminalOwner}}</span>\n                                                <span *ngIf=\"terminal.TerminalOwner == null\">--</span>\n                                            </td>\n                                            <td class=\"text-center\">\n                                                <button type=\"button\" (click)=\"createTerminal('Edit Terminal');editTerminal(terminal);\" class=\"btn btn-link\" onclick=\"slidePanel('#create-terminal','70%')\"><i class=\"fas fa-edit fs16\"></i></button>\n                                                <!--<button type=\"button\" class=\"btn btn-link ml10\" mwlConfirmationPopover [popoverTitle]=\"popoverTitle\" [confirmText]=\"confirmButtonText\" [cancelText]=\"cancelButtonText\" placement=\"bottom\" (confirm)=\"deletePort(port)\"><i class=\"fas fa-trash-alt color-maroon\"></i></button>-->\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n    <div id=\"create-terminal\" class=\"side-panel pl5 pr5 scroll-y\">\n        <div class=\"side-panel-wrapper\">\n            <div class=\"pt15 pb0 mb10\">\n                <a class=\"ml15 close-panel\" (click)=\"clearPanelData()\" onclick=\"closeSlidePanel();\"><i class=\"fa fa-close fs18\"></i></a>\n                <h3 class=\"dib mt0 mb0 ml15\">{{ModalText}}</h3>\n            </div>\n            <div class=\"mx-3\">\n                <form [formGroup]=\"terminalCreateForm\" (ngSubmit)=\"onSubmit()\">\n                    <div class=\"row bg-white\">\n                        <div class=\"col-12\">\n                            <div class=\"create-terminal\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-4 form-group\">\n                                        <div class=\"new-terminal-name\">\n                                            <label class=\"terminal-info\">\n                                                Terminal Name <span class=\"required pl4\" aria-required=\"true\">*</span>\n                                            </label>\n                                            <input class=\"form-control\" formControlName=\"Name\" type=\"text\" value=\"\">\n                                            <div *ngIf=\"isInvalid('Name')\" class=\"color-maroon\">\n                                                <div *ngIf=\"isRequired('Name')\">\n                                                    Required.\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-4 form-group\">\n                                        <div class=\"new-terminal-abbreviation\">\n                                            <label class=\"terminal-info\">\n                                                Terminal Abbreviation\n                                            </label>\n                                            <input class=\"form-control\" formControlName=\"Abbreviation\" type=\"text\" value=\"\">\n                                            <div *ngIf=\"isInvalid('Abbreviation')\" class=\"color-maroon\">\n                                                <div *ngIf=\"isRequired('Abbreviation')\">\n                                                    Required.\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-sm-4 form-group\">\n                                        <div class=\"new-terminal-control-number\">\n                                            <label class=\"terminal-info\">\n                                                Terminal Control Number\n                                            </label>\n                                            <input class=\"form-control\" formControlName=\"ControlNumber\" type=\"text\" value=\"\">\n                                            <div *ngIf=\"isInvalid('ControlNumber')\" class=\"color-maroon\">\n                                                <div *ngIf=\"isRequired('ControlNumber')\">\n                                                    Required.\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-4 form-group\">\n                                        <div class=\"new-terminal-owner\">\n                                            <label class=\"terminal-info\">\n                                                Terminal Owner\n                                            </label>\n                                            <input class=\"form-control\" formControlName=\"TerminalOwner\" type=\"text\" value=\"\">\n                                            <div *ngIf=\"isInvalid('TerminalOwner')\" class=\"color-maroon\">\n                                                <div *ngIf=\"isRequired('TerminalOwner')\">\n                                                    Required.\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row mt20\">\n                                    <div class=\"col-sm-12\">\n                                        <div class=\"row\">\n                                            <div class=\"col-sm-7\">\n                                                <div class=\"wrapper-location\" style=\"display: block;\">\n                                                    <div class=\"address-wrapper\"\n                                                         [ngClass]=\"{'pntr-none subSectionOpacity': terminalCreateForm.controls['IsGeocodeUsed'].value == true && terminalCreateForm.get('CountryId').value != '4'}\">\n                                                        <div class=\"address-controls\">\n                                                            <div class=\"row\">\n                                                                <div class=\"col-sm-8\">\n                                                                    <div class=\"form-group\">\n                                                                        <label>Address</label>\n                                                                        <span class=\"required pl4\" aria-required=\"true\" *ngIf=\"terminalCreateForm.get('CountryId').value != '4'\">*</span>\n                                                                        <input class=\"form-control address addressInput\"\n                                                                               formControlName=\"Address\" value=\"\">\n                                                                        <div *ngIf=\"isInvalid('Address')\" class=\"color-maroon\">\n                                                                            <div *ngIf=\"isRequired('Address')\">\n                                                                                Required.\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                                <div class=\"col-sm-4\">\n                                                                    <div class=\"form-group\">\n                                                                        <label for=\"AddressDetails_ZipCode\">Zip</label>\n                                                                        <span class=\"required pl4\" aria-required=\"true\" *ngIf=\"terminalCreateForm.get('CountryId').value != '4'\">*</span>\n                                                                        <input class=\"form-control\"\n                                                                               formControlName=\"ZipCode\" type=\"text\" value=\"\"\n                                                                               (change)=\"getAddressByZip()\">\n                                                                        <div *ngIf=\"isInvalid('ZipCode')\" class=\"color-maroon\">\n                                                                            <div *ngIf=\"isRequired('ZipCode')\">\n                                                                                Required.\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                            <div class=\"row\">\n                                                                <div class=\"col-sm-4\">\n                                                                    <div class=\"form-group\">\n                                                                        <label>City</label>\n                                                                        <span class=\"required pl4\" aria-required=\"true\" *ngIf=\"terminalCreateForm.get('CountryId').value != '4'\">*</span>\n                                                                        <input class=\"form-control city addressInput\"\n                                                                               id=\"AddressDetails_City\" formControlName=\"City\"\n                                                                               type=\"text\" value=\"\">\n                                                                        <div *ngIf=\"isInvalid('City')\" class=\"color-maroon\">\n                                                                            <div *ngIf=\"isRequired('City')\">\n                                                                                Required.\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                                <div class=\"col-sm-4\">\n                                                                    <div class=\"form-group\">\n                                                                        <label>County Name</label>\n                                                                        <span class=\"required pl4\" aria-required=\"true\" *ngIf=\"terminalCreateForm.get('CountryId').value != '4'\">*</span>\n                                                                        <i class=\"fa fa-info-circle ml5\" data-toggle=\"tooltip\"\n                                                                           data-placement=\"top\"\n                                                                           title=\"Correct County name is required by our Tax service to calculate taxes accurately.\"></i>\n                                                                        <input class=\"form-control county addressInput\"\n                                                                               id=\"AddressDetails_CountyName\"\n                                                                               formControlName=\"County\" type=\"text\" value=\"\"\n                                                                               autocomplete=\"off\">\n                                                                        <div *ngIf=\"isInvalid('County')\" class=\"color-maroon\">\n                                                                            <div *ngIf=\"isRequired('County')\">\n                                                                                Required.\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                                <div class=\"col-sm-4\">\n                                                                    <div class=\"form-group\">\n                                                                        <label for=\"AddressDetails_State_Id\">\n                                                                            State<span class=\"required pl4\" aria-required=\"true\">*</span>\n                                                                        </label>\n                                                                        <select class=\"form-control state addressInput triggerTerminalChange\"\n                                                                                id=\"AddressDetails_State_Id\"\n                                                                                name=\"AddressDetails.State.Id\"\n                                                                                formControlName=\"StateId\">\n                                                                            <option value=\"\">Select State</option>\n                                                                            <option id=\"{{item.StateId}}\" [value]=\"item.StateId\"\n                                                                                    *ngFor=\"let item of filteredStatesList\" [selected]=\"item.StateId== terminalCreateForm.get('StateId').value\">\n                                                                                {{item.StateName}}\n                                                                            </option>\n                                                                        </select>\n                                                                        <div *ngIf=\"isInvalid('StateId')\" class=\"color-maroon\">\n                                                                            <div *ngIf=\"isRequired('StateId')\">\n                                                                                Required.\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                    <div class=\"row\">\n                                                        <div class=\"col-md-12\">\n                                                            <div class=\"form-check form-group form-check-inline\">\n                                                                <input class=\"form-check-input\" id=\"checkbox-geocodes\"\n                                                                       formControlName=\"IsGeocodeUsed\" type=\"checkbox\"\n                                                                       [value]=\"false\" (change)=\"setLatLongValidator(terminalCreateForm.get('IsGeocodeUsed').value)\">\n                                                                <label class=\"form-check-label\"\n                                                                       for=\"checkbox-geocodes\">Geo Codes</label>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"col-xs-6 col-md-4 combineDiv\">\n                                                            <div class=\"form-group\">\n                                                                <label for=\"AddressDetails_Latitude\">Latitude</label>\n                                                                <input class=\"form-control latitude geoInput defaultDisabled\"\n                                                                       id=\"AddressDetails_Latitude\"\n                                                                       name=\"AddressDetails.Latitude\"\n                                                                       formControlName=\"Latitude\" type=\"text\" value=\"0\"\n                                                                       [readonly]=\"terminalCreateForm.get('IsGeocodeUsed').value == false\"\n                                                                       (change)=\"getAddressByLatLong(terminalCreateForm.get('Latitude').value,terminalCreateForm.get('Longitude').value)\">\n                                                                <div *ngIf=\"isInvalid('Latitude')\" class=\"color-maroon\">\n                                                                    <div *ngIf=\"isRequired('Latitude')\">\n                                                                        Required.\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"col-xs-6 col-md-4 combineDiv\">\n                                                            <div class=\"form-group\">\n                                                                <label for=\"AddressDetails_Longitude\">Longitude</label>\n                                                                <input class=\"form-control longitude geoInput defaultDisabled\"\n                                                                       id=\"AddressDetails_Longitude\"\n                                                                       formControlName=\"Longitude\" type=\"text\" value=\"0\"\n                                                                       [readonly]=\"terminalCreateForm.get('IsGeocodeUsed').value == false\"\n                                                                       (change)=\"getAddressByLatLong(terminalCreateForm.get('Latitude').value,terminalCreateForm.get('Longitude').value)\">\n                                                                <div *ngIf=\"isInvalid('Longitude')\" class=\"color-maroon\">\n                                                                    <div *ngIf=\"isRequired('Longitude')\">\n                                                                        Required.\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                        <!--<div class=\"col-md-4\">\n                                <div class=\"form-group\">\n                                    <label for=\"AddressDetails_TimeZoneName\">\n                                        Time\n                                        Zone\n                                    </label>\n                                    <input class=\"form-control timeZoneName defaultDisabled\"\n                                           id=\"AddressDetails_TimeZoneName\"\n                                           formControlName=\"TimeZoneName\" readonly=\"true\"\n                                           type=\"text\" value=\"\"\n                                           [disableControl]=\" portCreateForm.controls['IsGeocodeUsed'].value == false\">\n                                </div>\n                            </div>-->\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"col-sm-5\">\n                                            <agm-map [zoom]=\"mapConstants.ZoomArea\" [latitude]=\"mapConstants.CenterLat\" [longitude]=\"mapConstants.CenterLon\">\n                                                <agm-marker [latitude]=\"mapConstants.CenterLat\" [longitude]=\"mapConstants.CenterLon\" [markerDraggable]=\"true\"\n                                                            (dragEnd)=\"markerDragEnd($event)\"\n                                                            [iconUrl]=\"mapConstants.IconUrl\"></agm-marker>\n                                            </agm-map>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row mt-3\">\n                                <div class=\"col-sm-12 text-right form-buttons\">\n                                    <input type=\"button\" id=\"btnCancel\" value=\"Cancel\" class=\"btn\" onclick=\"closeSlidePanel()\" (click)=\"clearPanelData()\">\n                                    <input class=\"btn btn-primary btn-lg no-disable\" type=\"submit\" value=\"Submit\" />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n\n<div class=\"loader\" *ngIf=\"IsLoading\">\n    <div class=\"loading-content text-center\">\n        <div class=\"spinner\"></div>\n    </div>\n</div>","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\r\nimport { HandleError } from '../errors/HandleError';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CreateterminalsService extends HandleError{\n    private urlGetTerminalsForGrid = '/SuperAdmin/SuperAdmin/GetTerminals';\n    private urlSaveTerminalDetails = '/SuperAdmin/SuperAdmin/SaveTerminal';\n    private urlGetTerminalMappingDetails = 'SuperAdmin/SuperAdmin/GetTerminalMappingDetails';\n    private urlGetAllProductsMapping = 'SuperAdmin/SuperAdmin/GetMstProductsForTerminalMapping';\n    private urlSaveTerminalProductMapping = 'SuperAdmin/SuperAdmin/SaveTerminalProductMapping';\n\n    constructor(private httpClient: HttpClient) {\n        super();\n    }\n\n    public getTerminalsForGrid(countryId: number) {\n        return this.httpClient.get<any[]>(this.urlGetTerminalsForGrid + '?countryId=' + countryId)\n            .pipe(catchError(this.handleError<any[]>('getTerminalsForGrid', [])));\n    }\n\n    saveTerminalDetails(terminal: any) {\n        return this.httpClient.post<any>(this.urlSaveTerminalDetails, terminal)\r\n            .pipe(catchError(this.handleError<any>('saveTerminalDetails', terminal)));\r\n    }\n\n    public getTerminalProductMappingDetails(countryId: number) {\n        return this.httpClient.get<any[]>(this.urlGetTerminalMappingDetails + '?countryId=' + countryId)\n            .pipe(catchError(this.handleError<any[]>('getTerminalProductMappingDetails', [])));\r\n    }\n\n    public getAllProductsForMapping() {\n        return this.httpClient.get<any[]>(this.urlGetAllProductsMapping)\n            .pipe(catchError(this.handleError<any[]>('getAllProductsForMapping', [])));\r\n    }\n    public saveTerminalProductMapping(model: any) {\n        return this.httpClient.post<any>(this.urlSaveTerminalProductMapping, model)\r\n            .pipe(catchError(this.handleError<any>('saveTerminalProductMapping', model)));\r\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MarinePortsandvesselsService } from '../marine-ports-vessels/marine-portsandvessels.service';\nimport { DropdownItem } from 'src/app/statelist.service';\nimport { Country } from 'src/app/self-service-alias/models/location';\ndeclare var currentCompanyId: any;\ndeclare var defaultCountryId: any;\n@Component({\n  selector: 'app-master',\n  templateUrl: './master.component.html',\n  styleUrls: ['./master.component.css']\n})\nexport class MasterComponent implements OnInit {\n    viewType = 1;\n    //country selection related variables\n    CountryList: DropdownItem[] = [];\n    public SelectedCountryId: number;\n\n    IsLoading = false;\n    constructor(private marineService: MarinePortsandvesselsService) { }\n\n    ngOnInit(): void {\n        this.getCountries();\n        this.SelectedCountryId = Country.USA;\n    }\n    private getCountries() {\n        this.marineService.GetAllCountries().subscribe((data) => {\n            this.CountryList = data;\n        });\n    }\n\n    public onCountryChange(event) {\n        this.SelectedCountryId = event.target.value;\n    }\n    public changeViewType(value) {\n        this.viewType = value;\n    }\n\n}\n","<div class=\"row mb-3\">\r\n    <div class=\"col-sm-11\">\r\n        <div class=\"dib border pa5 radius-capsule shadow-b bg-white\">\r\n            <div class=\"btn-group btn-filter\">\r\n                <input class=\"hide-element\" type=\"radio\" [name]=\"'viewType'\" [value]=\"1\"\r\n                       [checked]=\"viewType==1\">\r\n                <label class=\"btn ml0 mr-1\" (click)=\"changeViewType(1)\">Terminals</label>\r\n                <input class=\"hide-element\" type=\"radio\" [name]=\"'viewType'\" [value]=\"2\"\r\n                       [checked]=\"viewType==2\">\r\n                <label class=\"btn\" (click)=\"changeViewType(2)\">Terminals-Product Assignment</label>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-sm-1\">\r\n        <select class=\"form-control mt-1\" (change)=\"onCountryChange($event)\">\r\n            <option *ngFor=\"let country of CountryList\" [value]=\"country.Id\"\r\n                    [selected]=\"SelectedCountryId==country.Id\">\r\n                <i class=\"fa fa-airbnb fa-2x\"></i> {{country.Code}}\r\n            </option>\r\n        </select>\r\n    </div>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n        <app-create-terminal *ngIf=\"viewType==1\" [SelectedCountryId]=\"SelectedCountryId\"></app-create-terminal>\r\n        <app-terminal-product-assignment *ngIf=\"viewType==2\" [SelectedCountryId]=\"SelectedCountryId\"> </app-terminal-product-assignment>\r\n</div>\r\n</div>\r\n\r\n\r\n","import { DropDownItem } from \"../buyer-wally-board/Models/BuyerWallyBoard\";\r\n\r\n\r\nexport class TerminalDetailsModel {\r\n\r\n    constructor() {\r\n        this.IsGeoCoded = false;\r\n    }\r\n    Id: number;\r\n    Name?: string;\r\n    Abbreviation?: number;\r\n    ControlNumber?: number;\r\n    CountryCode?: string;   \r\n    Latitude?: number;\r\n    Longitude?: number;\r\n    Address?: string;\r\n    City?: string;\r\n    CityId?: number;\r\n    StateCode?: string;\r\n    StateId?: number;\r\n    ZipCode?: string;\r\n    IsGeoCoded: boolean;\r\n    County?: string;\r\n    TerminalOwner?: string;\r\n    CountryId?: number;\r\n}\r\n\r\nexport class Geocode {\r\n    Address: string;\r\n    Latitude: number;\r\n    Longitude: number;\r\n    CountyName: string;\r\n    StateCode: string;\r\n    StateName: string;\r\n    City: string;\r\n    CountryCode: string;\r\n    CountryName: string;\r\n    ZipCode: string;\r\n}\r\n\r\n\r\nexport class TerminalMappedProductsGridModel {\r\n    constructor() {\r\n        this.MappedProducts = [];\r\n    }\r\n    TerminalId: number;\r\n    TerminalControlNumber: string;\r\n    TerminalName: string;\r\n    AssignedProducts: string;\r\n    MappedProductCount: number;\r\n    MappedProducts: DropDownItem[];\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SharedModule } from '../modules/shared.module';\nimport { DataTablesModule } from 'angular-datatables';\nimport { MasterComponent } from './master.component';\nimport { CreateTerminalComponent } from './create-terminals/create-terminal.component';\nimport { TerminalProductAssignmentComponent } from './terminal-product assignment/terminal-product-assignment.component';\n\nconst route: Routes = [\n    { path: '', component: MasterComponent }\n]\n\n@NgModule({\n  declarations: [MasterComponent, CreateTerminalComponent, TerminalProductAssignmentComponent],\n  imports: [\n      CommonModule,\n      SharedModule,\n      DataTablesModule,\n      RouterModule.forChild(route)\n  ]\n})\nexport class SuperadminCreateTerminalModule { }\n","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { IDropdownSettings } from 'ng-multiselect-dropdown';\r\nimport { Subject } from 'rxjs';\r\nimport { DropDownItem } from '../../buyer-wally-board/Models/BuyerWallyBoard';\r\nimport { Declarations } from '../../declarations.module';\r\nimport { CreateterminalsService } from '../createterminals.service';\r\nimport { TerminalMappedProductsGridModel } from './../models'\n\n\n@Component({\n  selector: 'app-terminal-product-assignment',\n  templateUrl: './terminal-product-assignment.component.html',\n  styleUrls: ['./terminal-product-assignment.component.css']\n})\nexport class TerminalProductAssignmentComponent implements OnInit, OnChanges{\n\n    public IsLoading: boolean;\n    @Input() SelectedCountryId: any;\n\n    dtOptions: any = {};\n    dtTrigger: Subject<any> = new Subject();\n\n    public terminalMappingDetails: TerminalMappedProductsGridModel[] = [];\n\n\n\n    public _opened: boolean = false;\n    public _animate: boolean = true;\n    public _positionNum: number = 1;\n    public _POSITIONS: Array<string> = ['left', 'right', 'top', 'bottom'];\n    public terminalMappingForm: FormGroup;\n    public terminalMappingDetail: TerminalMappedProductsGridModel;\n    public productList: any[];\n    public multiselectSettingsById: IDropdownSettings;\n    public Products: DropDownItem[];\n\n    constructor(private terminalService: CreateterminalsService, private fb: FormBuilder) { }\n    \r\n\n    ngOnInit(): void {\r\n        this.dtOptions = {\r\n            dom: '<\"html5buttons\"B>lTfgitp',\r\n            buttons: [               \r\n            ],\r\n            pagingType: 'first_last_numbers',\r\n            pageLength: 10,\r\n            ordering: true,\r\n            order: [],\r\n            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, \"All\"]]\r\n        };\r\n\r\n        this.multiselectSettingsById = {\n            singleSelection: false,\n            idField: \"Id\",\n            textField: \"Name\",\n            selectAllText: \"Select All\",\n            unSelectAllText: \"UnSelect All\",\n            itemsShowLimit: 5,\n            allowSearchFilter: true\n        };\r\n        this.getAllProductsDDL();\r\n        this.initializeTerminalMappingCreationForm(this.terminalMappingDetail);\n\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.SelectedCountryId && changes.SelectedCountryId.currentValue) {\r\n            this.getTerminalMappingDetailsData()\r\n        }\r\n    }\n\n    getTerminalMappingDetailsData() {\r\n        let countryId = this.SelectedCountryId;\r\n        this.IsLoading = true;\r\n        this.terminalService.getTerminalProductMappingDetails(countryId).subscribe((data) => {\r\n            if (data) {\r\n                jQuery(\"#terminal-products-datatable\").DataTable().clear().destroy();\r\n                this.terminalMappingDetails = data;\r\n                this.dtTrigger.next();\r\n                this.IsLoading = false;\r\n            }\r\n\r\n        });\r\n    }\n    initializeTerminalMappingCreationForm(terminalMapping: TerminalMappedProductsGridModel) {\n        if (terminalMapping == null || terminalMapping == undefined) {\r\n            terminalMapping = new TerminalMappedProductsGridModel();\r\n        }\r\n        this.terminalMappingForm = this.fb.group({\r\n            TerminalId: this.fb.control(terminalMapping.TerminalId),\r\n            TerminalControlNumber: this.fb.control(terminalMapping.TerminalControlNumber),\r\n            MappedProducts: this.fb.control(terminalMapping.MappedProducts, [Validators.required]),\r\n            TerminalName: this.fb.control(terminalMapping.TerminalName)\r\n        });\r\n    }\n\n\n    formatProductsForGridDisplay(assignedProducts:any[]) {\n        let formattedString = \"\";\r\n        if (assignedProducts != null && assignedProducts.length > 0) {\r\n            let displayCount = assignedProducts.length - 3;\r\n            if (assignedProducts.length > 3)\r\n            {\r\n                assignedProducts.forEach(function (product, index) {\r\n                    if (index <= 2) {\r\n                        if (product.Name) {\r\n                            formattedString = index == 2 ? formattedString.concat(product.Name, \"     \", \"+\" + displayCount+\" other\") : formattedString.concat(product.Name,\", \");\r\n                        }\r\n                    }\r\n\r\n                });\r\n            }\r\n            else \r\n            {\r\n                assignedProducts.forEach(function (product, index) {\r\n                        if (product.Name) {\r\n                            formattedString =  index == assignedProducts.length-1? formattedString.concat(product.Name, \" \") : formattedString.concat(product.Name, \", \");\r\n                        }\r\n\r\n                });\r\n            }\r\n        }\r\n        return formattedString;\r\n    }\n\n\n    _toggleOpened(shouldOpen: boolean) {\n        if (shouldOpen) {            \n            this._opened = true;\n        }\n        else {\n            this._opened = !this._opened;\n            this.terminalMappingForm.reset();\n        }\n    }\n    getAllProductsDDL() {\r\n        this.IsLoading = true;\r\n        this.terminalService.getAllProductsForMapping().subscribe((data) => {\r\n            this.IsLoading = false;\r\n            this.productList = data;\r\n        });\r\n    }\n\n    editMapping(terminalMapping: TerminalMappedProductsGridModel) {\n        if (terminalMapping != null && terminalMapping != undefined) {\n            this.terminalMappingForm.get('TerminalId').setValue(terminalMapping.TerminalId);\r\n            this.terminalMappingForm.get('TerminalControlNumber').setValue(terminalMapping.TerminalControlNumber);\r\n            this.terminalMappingForm.get('MappedProducts').setValue(terminalMapping.MappedProducts);\r\n            this.terminalMappingForm.get('TerminalName').setValue(terminalMapping.TerminalName);\r\n        }\n        \r\n    }\n\n\n    SubmitForm() {\n        this.terminalMappingForm.markAllAsTouched();\n        if (this.terminalMappingForm.valid) {\n            let model = this.terminalMappingForm.value;\r\n            if (model) {\r\n                let input = new TerminalMappedProductsGridModel();\r\n                input.TerminalId = model.TerminalId;\r\n                input.TerminalControlNumber = model.TerminalControlNumber;\r\n                input.MappedProducts = model.MappedProducts;\r\n                input.TerminalName = model.TerminalName;\r\n                this.IsLoading = true;\r\n                this.terminalService.saveTerminalProductMapping(input).subscribe((data) => {\r\n                    if (data.StatusCode == 0) {\r\n                        Declarations.msgsuccess(data.StatusMessage, undefined, undefined);\r\n                        this._toggleOpened(false);\r\n                        this.getTerminalMappingDetailsData();\r\n                    }\r\n                    else if (data.StatusCode == 1) {\r\n                        Declarations.msgerror(data.StatusMessage, undefined, undefined);\r\n                    }\r\n                    this.IsLoading = false;\r\n                });\r\n            }\r\n            \r\n        }\n        \r\n    }\n}\n","<div class=\"row\">\n    <div class=\"col-md-12\">\n        <div class=\"well bg-white shadowb-b\">\n            <div class=\"ibox mb0\">\n                <div class=\"ibox-content no-padding no-border\">\n                    <div id=\"terminal-products-grid\" class=\"table-responsive\">\n                        <table id=\"terminal-products-datatable\" data-gridname=\"35\" datatable [dtOptions]=\"dtOptions\" [dtTrigger]=\"dtTrigger\" class=\"table table-striped table-bordered table-hover\">\n                            <thead>\n                                <tr>\n                                    <th>Terminal Name</th>\n                                    <th>Terminal Control Number</th>\n                                    <th>Assigned Products</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let mapping of terminalMappingDetails\">\n                                    <td><a [routerLink]=\"\" (click)=\"_toggleOpened(true);editMapping(mapping)\">{{mapping.TerminalName}}</a></td>\n                                    <td>\n                                        <span *ngIf=\"mapping.TerminalControlNumber != null\">{{mapping.TerminalControlNumber}}</span>\n                                        <span *ngIf=\"mapping.TerminalControlNumber == null\">--</span>\n                                    </td>\n                                    <td>                                      \n                                        <span *ngIf=\"mapping?.MappedProducts.length && mapping?.MappedProducts.length > 0\">\n                                            <ng-container>                                              \n                                                <span>{{formatProductsForGridDisplay(mapping?.MappedProducts)}}</span>                                              \n                                            </ng-container>\n                                            \n                                        </span>\n                                    </td>                                   \n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<div>\n    <ng-sidebar-container>\n        <ng-sidebar [(opened)]=\"_opened\"\n                    [animate]=\"_animate\"\n                    [position]=\"_POSITIONS[_positionNum]\"\n                    style=\"height: 100vh\">\n            <a (click)=\"_toggleOpened(false)\"><i class=\"fa fa-close fs18\"></i></a>\n            <h3 class=\"dib ml10 mt10 mb10\">Terminal-Product(s) Assignment</h3>\n            <content class=\"pr30\">\n                <form [formGroup]=\"terminalMappingForm\" (ngSubmit)=\"SubmitForm()\">\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label for=\"TerminalName\">Terminal Name</label>\n                                <input formControlName=\"TerminalName\" class=\"form-control\" [readonly]=\"true\">\n                            </div>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label for=\"TerminalControlNumber\">Terminal Control Number</label>\n                                <input formControlName=\"TerminalControlNumber\" class=\"form-control\" [readonly]=\"true\">\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <div class=\"form-group\">\n                                <label for=\"Jobs\">Product(s)</label><span class=\"color-maroon\">*</span>\n                                <ng-multiselect-dropdown formControlName=\"MappedProducts\"\n                                                         [placeholder]=\"'Select Product(s)'\"\n                                                         [settings]=\"multiselectSettingsById\" [data]=\"productList\"\n                                                         [(ngModel)]=\"Products\">\n                                </ng-multiselect-dropdown>\n                                <div *ngIf=\"terminalMappingForm.get('MappedProducts').invalid && terminalMappingForm.get('MappedProducts').touched\" class=\"color-maroon\">\n                                    <div *ngIf=\"terminalMappingForm.get('MappedProducts').errors.required\">\n                                        Product(s) is required.\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"text-right\">\n                        <button (click)=\"_toggleOpened(false)\" class=\"btn btn-lg\" type=\"reset\">Cancel</button>\n                        <button class=\"ml15 btn btn-primary btn-lg\" type=\"submit\">Save</button>\n                    </div>\n                </form>\n            </content>\n        </ng-sidebar>\n    </ng-sidebar-container>\n</div>\n\n\n<div class=\"loader\" *ngIf=\"IsLoading\">\n    <div class=\"loading-content text-center\">\n        <div class=\"spinner\"></div>\n    </div>\n</div>\n\n"]}