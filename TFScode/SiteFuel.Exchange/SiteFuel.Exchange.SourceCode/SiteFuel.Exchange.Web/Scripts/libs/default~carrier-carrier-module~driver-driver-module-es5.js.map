{"version":3,"sources":["webpack:///src/app/carrier/service/route-info.service.ts","webpack:///src/app/company-addresses/region/service/region.service.ts"],"names":["RouteInfoService","httpClient","urlGetRouteInfoDetails","urlGetRegionLocationDetails","urlGetRouteLocationDetails","urlDeleteRouteInfo","urlCreateRouteInfo","urlUpdateRouteInfo","routeInfoDetails","routeInfo","regionId","get","pipe","handleError","Id","data","post","memberData","next","providedIn","httpOptions","headers","RegionService","createUrl","updateUrl","deleteUrl","getRegionsUrl","getSourceRegionsUrl","createSourceRegionUrl","updateSourceRegionUrl","deleteSourceRegionUrl","getJobsUrl","getDriversUrl","getDispatchersUrl","getTrailersUrl","stateUrl","shiftByDriverUrl","getRegionSchedulsbyRegionIdUrl","getRouteByReginId","getCompanyShiftsUrl","getRegionDriversUrl","addDriverScheduleUrl","addRegionScheduleUrl","updateDriverScheduleUrl","deleteDriverScheduleUrl","getCarriersUrl","getRegionShiftMapping","getCarrierRegionsUrl","getSelectedCarriersByRegionUrl","isSourceRegionAvailableUrl","getProductTypeUrl","getFuelProductUrl","isPublishedDRUrl","onLoadingChanged","regiondId","region","name","id","countryId","driverIds","scheduleType","routeId","model","date","postModel","SelectedDate","driverScheduleMappingViewModels","productIds","fuelTypeIds"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAWaA,gB;;;;;AAWT,gCAAoBC,UAApB,EAA4C;AAAA;;AAAA;;AACxC;AADgB,cAAAA,UAAA,GAAAA,UAAA;AARZ,cAAAC,sBAAA,GAAyB,8CAAzB;AACA,cAAAC,2BAAA,GAA8B,mDAA9B;AACA,cAAAC,0BAAA,GAA6B,kDAA7B;AACA,cAAAC,kBAAA,GAAqB,0CAArB;AACA,cAAAC,kBAAA,GAAqB,0CAArB;AACA,cAAAC,kBAAA,GAAqB,0CAArB;AAKJ,cAAKC,gBAAL,GAAwB,IAAI,oDAAJ,CAAoB,MAAKC,SAAzB,CAAxB;AAFwC;AAG3C;;;;eAED,2BAAkBC,QAAlB,EAAkC;AAC9B,iBAAO,KAAKT,UAAL,CAAgBU,GAAhB,CAA2B,KAAKT,sBAAL,GAA8B,YAA9B,GAA6CQ,QAAxE,EACFE,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,mBAAtB,EAA2C,IAA3C,CAAX,CADH,CAAP;AAEH;;;eACD,8BAAqBH,QAArB,EAAqC;AACjC,iBAAO,KAAKT,UAAL,CAAgBU,GAAhB,CAA2B,KAAKR,2BAAL,GAAmC,YAAnC,GAAkDO,QAA7E,EACFE,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,sBAAtB,EAA8C,IAA9C,CAAX,CADH,CAAP;AAEH;;;eACD,6BAAoBC,EAApB,EAAgCJ,QAAhC,EAAgD;AAC5C,iBAAO,KAAKT,UAAL,CAAgBU,GAAhB,CAA2B,KAAKP,0BAAL,GAAkC,MAAlC,GAA2CU,EAA3C,GAAgD,YAAhD,GAA+DJ,QAA1F,EACFE,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,sBAAtB,EAA8C,IAA9C,CAAX,CADH,CAAP;AAEH;;;eACD,yBAAgBE,IAAhB,EAAyB;AACrB,iBAAO,KAAKd,UAAL,CAAgBe,IAAhB,CAA0B,KAAKX,kBAA/B,EAAmDU,IAAnD,EACFH,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,iBAAtB,EAAyC,IAAzC,CAAX,CADH,CAAP;AAEH;;;eACD,yBAAgBE,IAAhB,EAA2C;AACvC,iBAAO,KAAKd,UAAL,CAAgBe,IAAhB,CAA0B,KAAKV,kBAA/B,EAAmDS,IAAnD,EACFH,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,iBAAtB,EAAyC,IAAzC,CAAX,CADH,CAAP;AAEH;;;eACD,yBAAgBE,IAAhB,EAA2C;AACvC,iBAAO,KAAKd,UAAL,CAAgBe,IAAhB,CAA0B,KAAKT,kBAA/B,EAAmDQ,IAAnD,EACFH,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,iBAAtB,EAAyC,IAAzC,CAAX,CADH,CAAP;AAEH;;;eACD,uBAAcI,UAAd,EAA+B;AAC3B,eAAKT,gBAAL,CAAsBU,IAAtB,CAA2BD,UAA3B;AACH;;;;MA1CiC,sE;;;uBAAzBjB,gB,EAAgB,uH;AAAA,K;;;aAAhBA,gB;AAAgB,eAAhBA,gBAAgB,K;AAAA,kBAHb;;;;;sEAGHA,gB,EAAgB;cAJ5B,wDAI4B;eAJjB;AACRmB,oBAAU,EAAE;AADJ,S;AAIiB,Q;;;;;;;;;;;;;;ACX7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAWA,QAAMC,WAAW,GAAG;AAChBC,aAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,wBAAgB;AAAlB,OAAhB;AADO,KAApB;;QAOaC,a;;;;;AAkCT,6BAAoBrB,UAApB,EAA4C;AAAA;;AAAA;;AACxC;AADgB,eAAAA,UAAA,GAAAA,UAAA;AAhCZ,eAAAsB,SAAA,GAAY,gBAAZ;AACA,eAAAC,SAAA,GAAY,gBAAZ;AACA,eAAAC,SAAA,GAAY,oBAAZ;AACA,eAAAC,aAAA,GAAgB,oBAAhB;AACA,eAAAC,mBAAA,GAAsB,0BAAtB;AACA,eAAAC,qBAAA,GAAwB,4BAAxB;AACA,eAAAC,qBAAA,GAAwB,4BAAxB;AACA,eAAAC,qBAAA,GAAwB,gCAAxB;AACA,eAAAC,UAAA,GAAa,iBAAb;AACA,eAAAC,aAAA,GAAgB,oBAAhB;AACA,eAAAC,iBAAA,GAAoB,wBAApB;AACA,eAAAC,cAAA,GAAiB,qBAAjB;AACA,eAAAC,QAAA,GAAW,0CAAX;AACA,eAAAC,gBAAA,GAAmB,wCAAnB;AACA,eAAAC,8BAAA,GAAiC,2CAAjC;AACA,eAAAC,iBAAA,GAAoB,gDAApB;AACA,eAAAC,mBAAA,GAAsB,0BAAtB;AACA,eAAAC,mBAAA,GAAsB,oCAAtB;AACA,eAAAC,oBAAA,GAAuB,2BAAvB;AACA,eAAAC,oBAAA,GAAuB,2BAAvB;AACA,eAAAC,uBAAA,GAA0B,8BAA1B;AACA,eAAAC,uBAAA,GAA0B,+BAA1B;AACD,eAAAC,cAAA,GAAiB,qBAAjB;AACC,eAAAC,qBAAA,GAAwB,kDAAxB;AACA,eAAAC,oBAAA,GAAuB,oCAAvB;AACA,eAAAC,8BAAA,GAAiC,gEAAjC;AACA,eAAAC,0BAAA,GAA6B,uCAA7B;AACA,eAAAC,iBAAA,GAAoB,qCAApB;AACA,eAAAC,iBAAA,GAAoB,4BAApB;AACA,eAAAC,gBAAA,GAAmB,mCAAnB;AAKJ,eAAKC,gBAAL,GAAwB,IAAI,oDAAJ,CAAoB,KAApB,CAAxB;AAFwC;AAG3C;;;;eAED,mBAAO;AACH,iBAAO,KAAKpD,UAAL,CAAgBU,GAAhB,CAAoC,KAAKoB,UAAzC,EACFnB,IADE,CACG,kEAAW,KAAKC,WAAL,CAAiC,SAAjC,EAA4C,EAA5C,CAAX,CADH,CAAP;AAEH;;;eAED,sBAAU;AACN,iBAAO,KAAKZ,UAAL,CAAgBU,GAAhB,CAAoC,KAAKqB,aAAzC,EACFpB,IADE,CACG,kEAAW,KAAKC,WAAL,CAAiC,YAAjC,EAA+C,EAA/C,CAAX,CADH,CAAP;AAEH;;;eACD,0BAAiByC,SAAjB,EAA0B;AACtB,iBAAO,KAAKrD,UAAL,CAAgBU,GAAhB,CAAoC,KAAK6B,mBAAL,GAA2Bc,SAA/D,EACF1C,IADE,CACG,kEAAW,KAAKC,WAAL,CAAiC,YAAjC,EAA+C,EAA/C,CAAX,CADH,CAAP;AAEH;;;eACD,4BAAgB;AACZ,iBAAO,KAAKZ,UAAL,CAAgBU,GAAhB,CAAoC,KAAK4B,mBAAzC,EACF3B,IADE,CACG,kEAAW,KAAKC,WAAL,CAAiC,kBAAjC,EAAqD,EAArD,CAAX,CADH,CAAP;AAEH;;;eACD,2BAAkBH,QAAlB,EAAkC;AAC9B,iBAAO,KAAKT,UAAL,CAAgBU,GAAhB,CAA6C,KAAK2B,iBAAL,GAAyB5B,QAAtE,EACFE,IADE,CACG,kEAAW,KAAKC,WAAL,CAA0C,qBAA1C,EAAiE,EAAjE,CAAX,CADH,CAAP;AAEH;;;eAED,0BAAc;AACV,iBAAO,KAAKZ,UAAL,CAAgBU,GAAhB,CAAoC,KAAKsB,iBAAzC,EACFrB,IADE,CACG,kEAAW,KAAKC,WAAL,CAAiC,gBAAjC,EAAmD,EAAnD,CAAX,CADH,CAAP;AAEH;;;eAED,uBAAW;AACP,iBAAO,KAAKZ,UAAL,CAAgBU,GAAhB,CAAoC,KAAKuB,cAAzC,EACFtB,IADE,CACG,kEAAW,KAAKC,WAAL,CAAiC,aAAjC,EAAgD,EAAhD,CAAX,CADH,CAAP;AAEH;;;eAED,sBAAU;AACN,iBAAO,KAAKZ,UAAL,CAAgBU,GAAhB,CAAiC,KAAKe,aAAtC,EACFd,IADE,CACG,kEAAW,KAAKC,WAAL,CAA8B,YAA9B,EAA4C,IAA5C,CAAX,CADH,CAAP;AAEH;;;eAED,sBAAa0C,MAAb,EAA2B;AACvB,iBAAO,KAAKtD,UAAL,CAAgBe,IAAhB,CAA6B,KAAKO,SAAlC,EAA6CgC,MAA7C,EAAqDnC,WAArD,EACFR,IADE,CACG,kEAAW,KAAKC,WAAL,CAAyB,cAAzB,EAAyC0C,MAAzC,CAAX,CADH,CAAP;AAEH;;;eAED,sBAAaA,MAAb,EAA2B;AACvB,iBAAO,KAAKtD,UAAL,CAAgBe,IAAhB,CAA6B,KAAKQ,SAAlC,EAA6C+B,MAA7C,EAAqDnC,WAArD,EACFR,IADE,CACG,kEAAW,KAAKC,WAAL,CAAyB,cAAzB,EAAyC0C,MAAzC,CAAX,CADH,CAAP;AAEH;;;eAED,4BAAgB;AACZ,iBAAO,KAAKtD,UAAL,CAAgBU,GAAhB,CAAuC,KAAKgB,mBAA5C,EACFf,IADE,CACG,kEAAW,KAAKC,WAAL,CAAoC,kBAApC,EAAwD,IAAxD,CAAX,CADH,CAAP;AAEH;;;eAED,4BAAmB0C,MAAnB,EAAuC;AACnC,iBAAO,KAAKtD,UAAL,CAAgBe,IAAhB,CAAmC,KAAKY,qBAAxC,EAA+D2B,MAA/D,EAAuEnC,WAAvE,EACFR,IADE,CACG,kEAAW,KAAKC,WAAL,CAA+B,oBAA/B,EAAqD0C,MAArD,CAAX,CADH,CAAP;AAEH;;;eAED,iCAAwBC,IAAxB,EAAsCC,EAAtC,EAAgD;AAC5C,iBAAO,KAAKxD,UAAL,CAAgBU,GAAhB,CAAyB,KAAKsC,0BAAL,GAAkCO,IAAlC,GAAyC,MAAzC,GAAkDC,EAA3E,EACF7C,IADE,CACG,kEAAW,KAAKC,WAAL,CAAoC,yBAApC,EAA+D,IAA/D,CAAX,CADH,CAAP;AAEH;;;eAED,4BAAmB0C,MAAnB,EAAuC;AACnC,iBAAO,KAAKtD,UAAL,CAAgBe,IAAhB,CAAmC,KAAKa,qBAAxC,EAA+D0B,MAA/D,EAAuEnC,WAAvE,EACFR,IADE,CACG,kEAAW,KAAKC,WAAL,CAA+B,oBAA/B,EAAqD0C,MAArD,CAAX,CADH,CAAP;AAEH;;;eAED,sBAAaE,EAAb,EAAuB;AACnB,iBAAO,KAAKxD,UAAL,CAAgBe,IAAhB,CAA0B,KAAKS,SAAL,GAAiBgC,EAA3C,EAA+CA,EAA/C,EACF7C,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,cAAtB,EAAsC4C,EAAtC,CAAX,CADH,CAAP;AAEH;;;eAED,4BAAmBA,EAAnB,EAA6B;AACzB,iBAAO,KAAKxD,UAAL,CAAgBe,IAAhB,CAA0B,KAAKc,qBAAL,GAA6B2B,EAAvD,EAA2DA,EAA3D,EACF7C,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,oBAAtB,EAA4C4C,EAA5C,CAAX,CADH,CAAP;AAEH;;;eAED,mBAAUC,SAAV,EAA2B;AACvB,iBAAO,KAAKzD,UAAL,CAAgBU,GAAhB,CAAoC,KAAKwB,QAAL,GAAgBuB,SAApD,EACF9C,IADE,CACG,kEAAW,KAAKC,WAAL,CAAiC,WAAjC,EAA8C,EAA9C,CAAX,CADH,CAAP;AAEH,S,CAED;;;;eACA,2BAAkB8C,SAAlB,EAAkCC,YAAlC,EAAmD;AAC/C,iBAAO,KAAK3D,UAAL,CAAgBU,GAAhB,CAAyB,KAAKyB,gBAAL,GAAwBuB,SAAxB,GAAoC,gBAApC,GAAuDC,YAAhF,EACFhD,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,mBAAtB,EAA2C,EAA3C,CAAX,CADH,CAAP;AAEH;;;eAED,8BAAqBH,QAArB,EAAoCkD,YAApC,EAAqD;AACjD,iBAAO,KAAK3D,UAAL,CAAgBU,GAAhB,CAAyB,KAAK0B,8BAAL,GAAsC3B,QAAtC,GAAiD,gBAAjD,GAAoEkD,YAA7F,EACFhD,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,sBAAtB,EAA8C,EAA9C,CAAX,CADH,CAAP;AAEH;;;eAED,2BAAkBH,QAAlB,EAAoCmD,OAApC,EAAmD;AAC/C,iBAAO,KAAK5D,UAAL,CAAgBU,GAAhB,CAA+C,KAAKmC,qBAAL,GAA6BpC,QAA7B,GAAwC,WAAxC,GAAsDmD,OAArG,EACFjD,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,mBAAtB,EAA2C,EAA3C,CAAX,CADH,CAAP;AAEH;;;eAED,2BAAkBiD,KAAlB,EAA4B;AACxB,iBAAO,KAAK7D,UAAL,CAAgBe,IAAhB,CAA0B,KAAKyB,oBAA/B,EAAqDqB,KAArD,EAA4D1C,WAA5D,EACFR,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,mBAAtB,EAA2CiD,KAA3C,CAAX,CADH,CAAP;AAEH;;;eAED,2BAAkBA,KAAlB,EAA4B;AACxB,iBAAO,KAAK7D,UAAL,CAAgBe,IAAhB,CAA0B,KAAK0B,oBAA/B,EAAqDoB,KAArD,EAA4D1C,WAA5D,EACFR,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,mBAAtB,EAA2CiD,KAA3C,CAAX,CADH,CAAP;AAEH;;;eAED,8BAAqB/C,IAArB,EAAgCgD,IAAhC,EAAyC;AACrC,cAAIC,SAAS,GAAG;AAAEF,iBAAK,EAAE/C,IAAT;AAAekD,wBAAY,EAAEF;AAA7B,WAAhB;AACA,iBAAO,KAAK9D,UAAL,CAAgBe,IAAhB,CAA0B,KAAK2B,uBAA/B,EAAwDqB,SAAxD,EAAmE5C,WAAnE,EACFR,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,mBAAtB,EAA2CmD,SAA3C,CAAX,CADH,CAAP;AAEH;;;eAED,8BAAqBjD,IAArB,EAAgCgD,IAAhC,EAAyC;AACrC,cAAIC,SAAS,GAAG;AAAEE,2CAA+B,EAAEnD,IAAnC;AAAyCkD,wBAAY,EAAEF;AAAvD,WAAhB;AACA,iBAAO,KAAK9D,UAAL,CAAgBe,IAAhB,CAA0B,KAAK4B,uBAA/B,EAAwDoB,SAAxD,EAAmE5C,WAAnE,EACFR,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,sBAAtB,EAA8CmD,SAA9C,CAAX,CADH,CAAP;AAEH;;;eAED,uBAAW;AACP,iBAAO,KAAK/D,UAAL,CAAgBU,GAAhB,CAAoC,KAAKkC,cAAzC,EACFjC,IADE,CACG,kEAAW,KAAKC,WAAL,CAAiC,aAAjC,EAAgD,EAAhD,CAAX,CADH,CAAP;AAEH;;;eACD,6BAAiB;AACb,iBAAO,KAAKZ,UAAL,CAAgBU,GAAhB,CAAyB,KAAKoC,oBAA9B,EACFnC,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,mBAAtB,EAA2C,IAA3C,CAAX,CADH,CAAP;AAEH;;;eAED,qCAA4BH,QAA5B,EAA4C;AACxC,iBAAO,KAAKT,UAAL,CAAgBU,GAAhB,CAAyB,KAAKqC,8BAAL,GAAsCtC,QAA/D,EACFE,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,6BAAtB,EAAqD,IAArD,CAAX,CADH,CAAP;AAEH;;;eAED,0BAAc;AACV,iBAAO,KAAKZ,UAAL,CAAgBU,GAAhB,CAAyB,KAAKuC,iBAA9B,EACFtC,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,gBAAtB,EAAwC,EAAxC,CAAX,CADH,CAAP;AAEH;;;eACD,2BAAe;AACX,iBAAO,KAAKZ,UAAL,CAAgBU,GAAhB,CAAyB,KAAKwC,iBAA9B,EACFvC,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,iBAAtB,EAAwC,EAAxC,CAAX,CADH,CAAP;AAEH;;;eAED,uBAAcsD,UAAd,EAA+BC,WAA/B,EAAkD;AAC9C,iBAAO,KAAKnE,UAAL,CAAgBU,GAAhB,CAAyB,KAAKyC,gBAAL,GAAwBe,UAAxB,GAAqC,eAArC,GAAuDC,WAAhF,EACFxD,IADE,CACG,kEAAW,KAAKC,WAAL,CAAsB,eAAtB,EAAuC,IAAvC,CAAX,CADH,CAAP;AAEH;;;;MAzL8B,sE;;;uBAAtBS,a,EAAa,uH;AAAA,K;;;aAAbA,a;AAAa,eAAbA,aAAa,K;AAAA,kBAFV;;;;;sEAEHA,a,EAAa;cAHzB,wDAGyB;eAHd;AACRH,oBAAU,EAAE;AADJ,S;AAGc,Q","file":"default~carrier-carrier-module~driver-driver-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { HandleError } from 'src/app/errors/HandleError';\r\nimport { RouteInformationModel } from '../models/location';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class RouteInfoService extends HandleError {\r\n    routeInfoDetails: BehaviorSubject<any>;\r\n    routeInfo: any;\r\n    private urlGetRouteInfoDetails = '/Carrier/ScheduleBuilder/GetRouteInfoDetails';\r\n    private urlGetRegionLocationDetails = '/Carrier/ScheduleBuilder/GetRegionLocationDetails';\r\n    private urlGetRouteLocationDetails = '/Carrier/ScheduleBuilder/GetRouteLocationDetails';\r\n    private urlDeleteRouteInfo = '/Carrier/ScheduleBuilder/DeleteRouteInfo';\r\n    private urlCreateRouteInfo = '/Carrier/ScheduleBuilder/CreateRouteInfo';\r\n    private urlUpdateRouteInfo = '/Carrier/ScheduleBuilder/UpdateRouteInfo';\r\n\r\n\r\n    constructor(private httpClient: HttpClient) {\r\n        super();\r\n        this.routeInfoDetails = new BehaviorSubject(this.routeInfo);\r\n    }\r\n\r\n    getRoutesByRegion(regionId: string): Observable<any[]> {\r\n        return this.httpClient.get<any[]>(this.urlGetRouteInfoDetails + '?regionId=' + regionId)\r\n            .pipe(catchError(this.handleError<any>('getRoutesByRegion', null)));\r\n    }\r\n    getLocationsByRegion(regionId: string): Observable<any[]> {\r\n        return this.httpClient.get<any[]>(this.urlGetRegionLocationDetails + '?regionId=' + regionId)\r\n            .pipe(catchError(this.handleError<any>('getLocationsByRegion', null)));\r\n    }\r\n    getLocationsByRoute(Id: string, regionId: string): Observable<any[]> {\r\n        return this.httpClient.get<any[]>(this.urlGetRouteLocationDetails + '?Id=' + Id + '&regionId=' + regionId)\r\n            .pipe(catchError(this.handleError<any>('getLocationsByRegion', null)));\r\n    }\r\n    deleteRouteInfo(data: any): Observable<any[]> {\r\n        return this.httpClient.post<any>(this.urlDeleteRouteInfo, data)\r\n            .pipe(catchError(this.handleError<any>('deleteRouteInfo', null)));\r\n    }\r\n    createRouteInfo(data: RouteInformationModel): Observable<any[]> {\r\n        return this.httpClient.post<any>(this.urlCreateRouteInfo, data)\r\n            .pipe(catchError(this.handleError<any>('createRouteInfo', null)));\r\n    }\r\n    updateRouteInfo(data: RouteInformationModel): Observable<any[]> {\r\n        return this.httpClient.post<any>(this.urlUpdateRouteInfo, data)\r\n            .pipe(catchError(this.handleError<any>('createRouteInfo', null)));\r\n    }\r\n    sendRouteInfo(memberData: any) {\r\n        this.routeInfoDetails.next(memberData);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { Region, RegionModel,SourceRegion,SourceRegionModel, CarrierRegionModel, TfxCarrierDropdownDisplayItem } from '../model/region';\r\nimport { DropdownItem } from 'src/app/statelist.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { RouteInformationModel } from 'src/app/carrier/models/location';\r\nimport { RegionScheduleViewModel } from 'src/app/driver/models/regionSchedule';\r\nimport { HandleError } from 'src/app/errors/HandleError';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RegionService extends HandleError {\r\n\r\n    private createUrl = '/Region/Create';\r\n    private updateUrl = '/Region/Update';\r\n    private deleteUrl = '/Region/Delete?id=';\r\n    private getRegionsUrl = '/Region/GetRegions';\r\n    private getSourceRegionsUrl = '/Region/GetSourceRegions';\r\n    private createSourceRegionUrl = '/Region/CreateSourceRegion';\r\n    private updateSourceRegionUrl = '/Region/UpdateSourceRegion';\r\n    private deleteSourceRegionUrl = '/Region/DeleteSourceRegion?id=';\r\n    private getJobsUrl = '/Region/GetJobs';\r\n    private getDriversUrl = '/Region/GetDrivers';\r\n    private getDispatchersUrl = '/Region/GetDispatchers';\r\n    private getTrailersUrl = '/Region/GetTrailers';\r\n    private stateUrl = '/Settings/Profile/GetStatesEx?countryId=';\r\n    private shiftByDriverUrl = '/Freight/GetShiftByDrivers?driverList=';\r\n    private getRegionSchedulsbyRegionIdUrl = '/Freight/getRegionShiftSchedule?regionId=';\r\n    private getRouteByReginId = '/ScheduleBuilder/GetRouteInfoDetails?regionId=';\r\n    private getCompanyShiftsUrl = '/Region/GetCompanyShifts';\r\n    private getRegionDriversUrl = '/Region/GetRegionDrivers?regionId=';\r\n    private addDriverScheduleUrl = '/Region/AddDriverSchedule';\r\n    private addRegionScheduleUrl = '/Region/AddRegionSchedule';\r\n    private updateDriverScheduleUrl = '/Region/updateDriverSchedule';\r\n    private deleteDriverScheduleUrl = '/Region/DeleteDriverSchedules';\r\n    public getCarriersUrl = '/Region/GetCarriers';\r\n    private getRegionShiftMapping = '/Region/GetResionShiftSchedulesDetails?regionId=';\r\n    private getCarrierRegionsUrl = '/Carrier/Freight/GetCarrierRegions';\r\n    private getSelectedCarriersByRegionUrl = '/Carrier/ScheduleBuilder/GetSelectedCarriersByRegion?regionId=';\r\n    private isSourceRegionAvailableUrl = '/Validation/IsSourceRegionExist?name=';\r\n    private getProductTypeUrl = '/Supplier/FuelGroup/GetProductTypes';\r\n    private getFuelProductUrl = '/Region/GetMstFuelProducts';\r\n    private isPublishedDRUrl = '/Region/IsPublishedDR?productIds=';\r\n\r\n    onLoadingChanged: BehaviorSubject<any>;\r\n    constructor(private httpClient: HttpClient) {\r\n        super();\r\n        this.onLoadingChanged = new BehaviorSubject(false);\r\n    }\r\n\r\n    getJobs(): Observable<DropdownItem[]> {\r\n        return this.httpClient.get<DropdownItem[]>(this.getJobsUrl)\r\n            .pipe(catchError(this.handleError<DropdownItem[]>('getJobs', [])));\r\n    }\r\n\r\n    getDrivers(): Observable<DropdownItem[]> {\r\n        return this.httpClient.get<DropdownItem[]>(this.getDriversUrl)\r\n            .pipe(catchError(this.handleError<DropdownItem[]>('getDrivers', [])));\r\n    }\r\n    getRegionDrivers(regiondId): Observable<DropdownItem[]> {\r\n        return this.httpClient.get<DropdownItem[]>(this.getRegionDriversUrl + regiondId)\r\n            .pipe(catchError(this.handleError<DropdownItem[]>('getDrivers', [])));\r\n    }\r\n    getCompanyShifts(): Observable<DropdownItem[]> {\r\n        return this.httpClient.get<DropdownItem[]>(this.getCompanyShiftsUrl)\r\n            .pipe(catchError(this.handleError<DropdownItem[]>('getCompanyShifts', [])));\r\n    }\r\n    getRoutesByRegion(regionId: number): Observable<RouteInformationModel[]> {\r\n        return this.httpClient.get<RouteInformationModel[]>(this.getRouteByReginId + regionId)\r\n            .pipe(catchError(this.handleError<RouteInformationModel[]>('GetRouteInfoDetails', [])));\r\n    }\r\n\r\n    getDispatchers(): Observable<DropdownItem[]> {\r\n        return this.httpClient.get<DropdownItem[]>(this.getDispatchersUrl)\r\n            .pipe(catchError(this.handleError<DropdownItem[]>('getDispatchers', [])));\r\n    }\r\n\r\n    getTrailers(): Observable<DropdownItem[]> {\r\n        return this.httpClient.get<DropdownItem[]>(this.getTrailersUrl)\r\n            .pipe(catchError(this.handleError<DropdownItem[]>('getTrailers', [])));\r\n    }\r\n\r\n    getRegions(): Observable<RegionModel> {\r\n        return this.httpClient.get<RegionModel>(this.getRegionsUrl)\r\n            .pipe(catchError(this.handleError<RegionModel>('getRegions', null)));\r\n    }\r\n\r\n    createRegion(region: Region): Observable<Region> {\r\n        return this.httpClient.post<Region>(this.createUrl, region, httpOptions)\r\n            .pipe(catchError(this.handleError<Region>('createRegion', region)));\r\n    }\r\n\r\n    updateRegion(region: Region): any {\r\n        return this.httpClient.post<Region>(this.updateUrl, region, httpOptions)\r\n            .pipe(catchError(this.handleError<Region>('updateRegion', region)));\r\n    }\r\n\r\n    getSourceRegions(): Observable<SourceRegionModel> {\r\n        return this.httpClient.get<SourceRegionModel>(this.getSourceRegionsUrl)\r\n            .pipe(catchError(this.handleError<SourceRegionModel>('getSourceRegions', null)));\r\n    }\r\n\r\n    createSourceRegion(region: SourceRegion): Observable<SourceRegion> {\r\n        return this.httpClient.post<SourceRegion>(this.createSourceRegionUrl, region, httpOptions)\r\n            .pipe(catchError(this.handleError<SourceRegion>('createSourceRegion', region)));\r\n    }\r\n\r\n    isSourceRegionAvailable(name: string, id: string): Observable<any> {\r\n        return this.httpClient.get<any>(this.isSourceRegionAvailableUrl + name + \"&id=\" + id)\r\n            .pipe(catchError(this.handleError<SourceRegionModel>('isSourceRegionAvailable', null)));\r\n    }\r\n\r\n    updateSourceRegion(region: SourceRegion): any {\r\n        return this.httpClient.post<SourceRegion>(this.updateSourceRegionUrl, region, httpOptions)\r\n            .pipe(catchError(this.handleError<SourceRegion>('updateSourceRegion', region)));\r\n    }\r\n\r\n    deleteRegion(id: string): any {\r\n        return this.httpClient.post<any>(this.deleteUrl + id, id)\r\n            .pipe(catchError(this.handleError<any>('deleteRegion', id)));\r\n    }\r\n\r\n    deleteSourceRegion(id: string): any {\r\n        return this.httpClient.post<any>(this.deleteSourceRegionUrl + id, id)\r\n            .pipe(catchError(this.handleError<any>('deleteSourceRegion', id)));\r\n    }\r\n\r\n    getStates(countryId: number): Observable<DropdownItem[]> {\r\n        return this.httpClient.get<DropdownItem[]>(this.stateUrl + countryId)\r\n            .pipe(catchError(this.handleError<DropdownItem[]>('getStates', [])));\r\n    }\r\n\r\n    //for calender\r\n    getShiftByDrivers(driverIds: any, scheduleType: any): Observable<any> {\r\n        return this.httpClient.get<any>(this.shiftByDriverUrl + driverIds + \"&scheduleType=\" + scheduleType)\r\n            .pipe(catchError(this.handleError<any>('getShiftByDrivers', [])));\r\n    }\r\n\r\n    getSchedulesByRegion(regionId: any, scheduleType: any): Observable<any> {\r\n        return this.httpClient.get<any>(this.getRegionSchedulsbyRegionIdUrl + regionId + \"&scheduleType=\" + scheduleType)\r\n            .pipe(catchError(this.handleError<any>('getSchedulesByRegion', [])));\r\n    }\r\n\r\n    getRegionSchedule(regionId: string, routeId: string): Observable<RegionScheduleViewModel[]> {\r\n        return this.httpClient.get<RegionScheduleViewModel[]>(this.getRegionShiftMapping + regionId + \"&routeId=\" + routeId)\r\n            .pipe(catchError(this.handleError<any>('getRegionSchedule', [])));\r\n    }\r\n\r\n    addDriverSchedule(model: any): Observable<any> {\r\n        return this.httpClient.post<any>(this.addDriverScheduleUrl, model, httpOptions)\r\n            .pipe(catchError(this.handleError<any>('addDriverSchedule', model)));\r\n    }\r\n\r\n    addRegionSchedule(model: any): Observable<any> {\r\n        return this.httpClient.post<any>(this.addRegionScheduleUrl, model, httpOptions)\r\n            .pipe(catchError(this.handleError<any>('addRegionSchedule', model)));\r\n    }\r\n\r\n    updateDriverSchedule(data: any, date: any): Observable<any> {\r\n        var postModel = { model: data, SelectedDate: date};\r\n        return this.httpClient.post<any>(this.updateDriverScheduleUrl, postModel, httpOptions)\r\n            .pipe(catchError(this.handleError<any>('addDriverSchedule', postModel)));\r\n    }\r\n\r\n    deleteDriverSchedule(data: any, date: any): Observable<any> {\r\n        var postModel = { driverScheduleMappingViewModels: data, SelectedDate: date};\r\n        return this.httpClient.post<any>(this.deleteDriverScheduleUrl, postModel, httpOptions)\r\n            .pipe(catchError(this.handleError<any>('deleteDriverSchedule', postModel)));\r\n    }\r\n\r\n    getCarriers(): Observable<DropdownItem[]> {\r\n        return this.httpClient.get<DropdownItem[]>(this.getCarriersUrl)\r\n            .pipe(catchError(this.handleError<DropdownItem[]>('getCarriers', [])));\r\n    }\r\n    getCarrierRegions(): Observable<CarrierRegionModel[]> {\r\n        return this.httpClient.get<any>(this.getCarrierRegionsUrl)\r\n            .pipe(catchError(this.handleError<any>('getCarrierRegions', null)));\r\n    }\r\n\r\n    getSelectedCarriersByRegion(regionId: string): Observable<TfxCarrierDropdownDisplayItem[]> {\r\n        return this.httpClient.get<any>(this.getSelectedCarriersByRegionUrl + regionId)\r\n            .pipe(catchError(this.handleError<any>('getSelectedCarriersByRegion', null)));\r\n    }\r\n\r\n    getProductType(): Observable<any> {\r\n        return this.httpClient.get<any>(this.getProductTypeUrl)\r\n            .pipe(catchError(this.handleError<any>('getProductType', [])));\r\n    }\r\n    getFuelProducts(): Observable<any> {\r\n        return this.httpClient.get<any>(this.getFuelProductUrl)\r\n            .pipe(catchError(this.handleError<any>('getFuelProducts',[])));\r\n    }\r\n\r\n    isPublishedDR(productIds: any, fuelTypeIds: string): Observable<any> {\r\n        return this.httpClient.get<any>(this.isPublishedDRUrl + productIds + \"&fuelTypeIds=\" + fuelTypeIds)\r\n            .pipe(catchError(this.handleError<any>('isPublishedDR', null)));\r\n    }\r\n}\r\n"]}