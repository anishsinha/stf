{"version":3,"sources":["webpack:///src/app/carrier-companies/service/assigncarrier.service.ts","webpack:///src/app/carrier/service/deliveryrequest.service.ts","webpack:///src/app/fuelsurcharge/services/fuelsurcharge.service.ts","webpack:///src/app/invitation/invitation.service.ts","webpack:///src/app/lfv-dashboard/LiftFileModels.ts","webpack:///src/app/location/services/location.service.ts","webpack:///src/app/my.localstorage.ts"],"names":["httpOptions","headers","AssigncarrierService","httpClient","carrierUrl","carrierUsersUrl","jobsUrl","assignedCarriersUrl","createUrl","updateUrl","deleteUrl","createFreightOrderUrl","editFreightOnlyOrderUrl","closeFreightOnlyOrderUrl","GetCarrierUserEmailsUrl","BulkUploadCarrierUrl","assignedCarrierCompanyId","get","pipe","handleError","carriers","post","carrier","JobIdsToEdit","EditFreightOnlyOrder","file","IsCreateFreightOrder","formData","FormData","append","name","providedIn","DropdownItem","JobWithEmails","DriverModel","Carrier","CarrierJob","CarrierJobDetails","DeliveryrequestService","drs","drType","None","response","i","length","jobIndex","IsTBD","findIndex","t","JobId","TBDGroupId","job","JobName","DeliveryRequestType","JobCity","CarrierStatus","getCarrierStatus","filter","Priority","getPriority","ProductType","CustomerCompany","JobAddress","CustomerBrandId","TrailerTypes","TrailerCompatibility","map","Name","join","IsOnlyNightDelivery","IsAcceptNightDeliveries","HoursToCoverDistance","_HoursToCoverDistance","Number","replace","DRQueueAttributes","LoadQueueAttributes","DeliveryRequests","push","ProductTypeId","UoM","RequiredQuantity","ScheduleQuantityTypeText","time","hour","split","indexOf","timeIndex","startHour","getHourFromTime","ScheduleStartTime","toString","endHour","ScheduleEndTime","StartTime","EndTime","timeDrs","every","mustGoRequests","t1","forEach","MustGo","shouldGoRequests","ShouldGo","couldGoRequests","CouldGo","some","FuelSurchargeService","getTableTypesUrl","getSupplierCustomersUrl","getSourceRegionsUrl","getTerminalsAndBulkPlantsUrl","getFuelSurchargeProductsUrl","getFuelSurchargePeriodUrl","getFuelSurchargeAreaUrl","getEIAIndexPriceUrl","getNRCIndexPriceUrl","getGenerateSurchargeTableUrl","getViewFuelSurchargeSummaryUrl","getSurchargeTableNewUrl","createFuelSurchargeUrl","archiveFuelSurchargeTableUrl","getHistoricalPriceUrl","getFuelSurchargeTableUrl","onSelectedTabChanged","onSelectedFuelSurchargeId","input","regionIds","countryId","periodId","productType","fetchDate","areaId","fsm","pRSV","pREV","pRI","sI","fSSP","fuelSurchargeIndexId","forPeriod","fuelSurchargeTableId","InvitationService","isCompanyNameExistUrl","getCountrylistUrl","getStatesOfAllCountrieslistUrl","postInvitationRequestUrl","getThirdPartyCompanyTypesUrl","getAllTrailerAssetTypesUrl","getCitiesFromStatesUrl","getaddressByZipUrl","getCarrierOnboardingForBrandingUrl","GetPhoneTypesUrl","IsPhoneNumberValidUrl","isEmailExistUrl","GetCompaniesUrl","IsNewCompany","CompanyName","sourcingRequestModel","stateIds","zipCode","token","phoneNumber","email","LFRecordGridModel","statusChangeDate","LFBolEditModel","LiftRecord","DropDownItem","LFValidationGridViewModel","SupplierBOLReport","CarrierBOLReport","LFRecordsGridExport","LFVValidationParameters","IsTerminalCodeReq","IsBolReq","LocationService","GetTerminalsUrl","GetBulkPlantsUrl","PostBulkPlantLocationUrl","requestModel","data","MyLocalStorage","key","value","localStorage","removeItem","setItem","JSON","stringify","getItem","parse","DSB_DATE_KEY","DSB_REGION_KEY","DSB_OBJECTFILTER_KEY","DSB_DATEFILTER_KEY","DSB_WINDOWMODE_KEY","DSB_TOGGLEREQUESTMODE_KEY","DSB_READONLY_KEY","DSB_FILTER_KEY","WBF_REGION_KEY","WBF_CUSTOMER_KEY","WBF_SEARCHEDKEYWORD_KEY","WBF_SELECTEDSTATES_KEY","WBF_LOCATION_KEY","WBF_SELECTEDPRIORY_KEY","WBF_SELECTEDSUPPLIER_KEY","WBF_SELECTEDCARRIER_KEY","WBF_SELECTEDDISPACHER_KEY","WBF_FROMDATE_KEY","WBF_TODATE_KEY"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HandleError } from 'src/app/errors/HandleError';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nconst httpOptions = {\r\n\theaders: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class AssigncarrierService extends HandleError {\r\n\r\n\tprivate carrierUrl = '/Settings/Profile/GetCarriers';\r\n\tprivate carrierUsersUrl = '/Settings/Profile/GetAssignedCarriers';\r\n\tprivate jobsUrl = '/Settings/Profile/GetJobsForSupplierToCarrier';\r\n\tprivate assignedCarriersUrl = '/Settings/Profile/GetAssignedCarriersForSupplier';\r\n\tprivate createUrl = '/Settings/Profile/AssignCarriers';\r\n\tprivate updateUrl = '/Settings/Profile/UpdateAssignedCarrier';\r\n\tprivate deleteUrl = '/Settings/Profile/DeleteAssignedCarrier';\r\n    private createFreightOrderUrl = '/Carrier/Order/createFreightOrdersForAssignedCarrier';\r\n    private editFreightOnlyOrderUrl = '/Carrier/Order/EditFreightOnlyOrders';\r\n    private closeFreightOnlyOrderUrl = '/Carrier/Order/closeAssignedOrdersforCarrier';\r\n    private GetCarrierUserEmailsUrl = '/Supplier/Order/GetCarrierUserEmails';\r\n    private BulkUploadCarrierUrl = '/Settings/Profile/BulkUploadCarrier';\r\n\tconstructor(private httpClient: HttpClient) {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tGetCarrierUserEmails(assignedCarrierCompanyId: number): Observable<DropdownItem[]> {\r\n\t\treturn this.httpClient.get<DropdownItem[]>(this.GetCarrierUserEmailsUrl +'?assignedCarrierCompanyId='+assignedCarrierCompanyId)\r\n\t\t\t.pipe(catchError(this.handleError<DropdownItem[]>('GetCarrierUserEmails', [])));\r\n\t}\r\n\r\n\tgetCarriers(): Observable<DropdownItem[]> {\r\n\t\treturn this.httpClient.get<DropdownItem[]>(this.carrierUrl)\r\n\t\t\t.pipe(catchError(this.handleError<DropdownItem[]>('getCarriers', [])));\r\n\t}\r\n\tgetAssignedCarrierUsers(): Observable<CarrierJobDetails[]> {\r\n\t\treturn this.httpClient.get<CarrierJobDetails[]>(this.carrierUsersUrl)\r\n\t\t\t.pipe(catchError(this.handleError<CarrierJobDetails[]>('getAssignedCarrierUsers', [])));\r\n\t}\r\n\tgetJobs(): Observable<CarrierJob[]> {\r\n\t\treturn this.httpClient.get<CarrierJob[]>(this.jobsUrl)\r\n\t\t\t.pipe(catchError(this.handleError<CarrierJob[]>('getJobs', [])));\r\n\t}\r\n\r\n\tgetAssignedCarriers(): Observable<Carrier[]> {\r\n\t\treturn this.httpClient.get<Carrier[]>(this.assignedCarriersUrl)\r\n\t\t\t.pipe(catchError(this.handleError<Carrier[]>('getAssignedCarriers', [])));\r\n\t}\r\n\r\n\tassignCarriers(carriers: Carrier[]): Observable<any> {\r\n\t\treturn this.httpClient.post<any>(this.createUrl, carriers, httpOptions)\r\n\t\t\t.pipe(catchError(this.handleError<any>('assignCarriers', carriers)));\r\n\t}\r\n\r\n\tupdateAssignedCarrier(carrier: Carrier): Observable<any> {\r\n\t\treturn this.httpClient.post<any>(this.updateUrl, carrier, httpOptions)\r\n\t\t\t.pipe(catchError(this.handleError<any>('updateAssignedCarrier', carrier)));\r\n\t}\r\n\r\n\tdeleteAssignedCarrier(carrier: Carrier): Observable<any> {\r\n\t\treturn this.httpClient.post<any>(this.deleteUrl, carrier, httpOptions)\r\n\t\t\t.pipe(catchError(this.handleError<any>('deleteAssignedCarrier', carrier)));\r\n    }\r\n    createFreightOrder(carriers: Carrier[]): Observable<any> {\r\n        return this.httpClient.post<any>(this.createFreightOrderUrl, carriers)\r\n            .pipe(catchError(this.handleError<any>('createFreightOrder', carriers)))\r\n    }\r\n    editFreightOnlyOrders(JobIdsToEdit: EditFreightOnlyOrder): Observable<any> {\r\n        return this.httpClient.post<any>(this.editFreightOnlyOrderUrl, JobIdsToEdit)\r\n            .pipe(catchError(this.handleError<any>('editFreightOnlyOrders', JobIdsToEdit)))\r\n    }\r\n    closeAssignedOrdersforCarrier(EditFreightOnlyOrder: EditFreightOnlyOrder): Observable<any>{\r\n        return this.httpClient.post<any>(this.closeFreightOnlyOrderUrl, EditFreightOnlyOrder)\r\n            .pipe(catchError(this.handleError<any>('closeAssignedOrdersforCarrier', EditFreightOnlyOrder)))\r\n    }\r\n    upload(file, IsCreateFreightOrder): Observable<any> {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file, file.name);\r\n        formData.append(\"IsCreateFreightOrder\", IsCreateFreightOrder);\r\n        return this.httpClient.post(this.BulkUploadCarrierUrl, formData)\r\n    } \r\n}\r\n\r\nexport class DropdownItem {\r\n\tId: number;\r\n\tName: string;\r\n\tCode: string;\r\n\tIsSelected: boolean;\r\n}\r\nexport class JobWithEmails {\r\n\tId: number;\r\n\tName: string;\r\n\tCode: string;\r\n\tEmails: DropdownItem[];\r\n    IsSelected: boolean;\r\n    IsEmailEdit: boolean;\r\n}\r\nexport class DriverModel {\r\n    TfxId: number;\r\n    TfxName: string;\r\n}\r\nexport class Carrier {\r\n\tpublic Id: string;\r\n\tpublic Carrier: DropdownItem;\r\n    public Jobs: CarrierJob[];\r\n    public assignedLocations: string;\r\n}\r\n\r\nexport class CarrierJob {\r\n\tpublic Job: JobWithEmails;\r\n\tpublic BuyerCompanyId: number;\r\n\tpublic BuyerCompanyName: string;\r\n}\r\n\r\nexport class EditFreightOnlyOrder {\r\n    public removedJobsIds: number[];\r\n    public newJobsIds: number[];\r\n    public IsCreateOrder: boolean;\r\n    public CarrierCompanyId: number;\r\n}\r\n\r\nexport class CarrierJobDetails{\r\n\tpublic CarrierCompanyName: string;\r\n\tpublic CarrierCompanyId: number;\r\n\tpublic LocationCount: number;\r\n\tpublic AssignedLocations: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DelRequestsByJobModel, DeliveryRequestViewModel, DelRequestByTimeModel } from '../models/DispatchSchedulerModels';\r\nimport { sortBy, sortByDesc } from 'src/app/my.functions';\r\nimport { DeliveryReqPriority, DeliveryRequestTypes } from 'src/app/app.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DeliveryrequestService {\r\n\r\n    constructor() { }\r\n\r\n    public groupDrsByJob(drs: DeliveryRequestViewModel[], drType: DeliveryRequestTypes = DeliveryRequestTypes.None) {\r\n        var response = [] as DelRequestsByJobModel[];\r\n        for (var i = 0; i < drs.length; i++) {\r\n            var jobIndex = -1;\r\n            if (drs[i].IsTBD == false) {\r\n                jobIndex = response.findIndex(t => t.JobId == drs[i].JobId);\r\n            }\r\n            else {\r\n                jobIndex = response.findIndex(t => t.TBDGroupId == drs[i].TBDGroupId);\r\n            }\r\n            if (jobIndex == -1) {\r\n                var job = new DelRequestsByJobModel();\r\n                job.JobId = drs[i].JobId;\r\n                job.JobName = drs[i].JobName;\r\n                job.DeliveryRequestType = drType;\r\n                job.JobCity = drs[i].JobCity;\r\n                if (drs[i].IsTBD == false) {\r\n                    job.CarrierStatus = this.getCarrierStatus(drs.filter(t => t.JobId == job.JobId));\r\n                    job.Priority = this.getPriority(drs.filter(t => t.JobId == job.JobId));\r\n                } else {\r\n                    job.CarrierStatus = this.getCarrierStatus(drs.filter(t => t.TBDGroupId == job.TBDGroupId));\r\n                    job.Priority = this.getPriority(drs.filter(t => t.TBDGroupId == job.TBDGroupId));\r\n                    job.ProductType = drs[i].ProductType;\r\n                }\r\n                job.CustomerCompany = drs[i].CustomerCompany;\r\n                job.JobAddress = drs[i].JobAddress;\r\n                job.CustomerBrandId = drs[i].CustomerBrandId;\r\n                job.TBDGroupId = drs[i].TBDGroupId;\r\n                if (drs[i].TrailerTypes.length != 5) {\r\n                    job.TrailerCompatibility = drs[i].TrailerTypes.map(t => t.Name).join(',');\r\n                }\r\n                job.IsOnlyNightDelivery = drs[i].IsAcceptNightDeliveries;\r\n                job.HoursToCoverDistance = drs[i].HoursToCoverDistance;\r\n                job._HoursToCoverDistance = drs[i].HoursToCoverDistance ? Number(drs[i].HoursToCoverDistance.replace(/:/g, '')) : 0;\r\n                job.DRQueueAttributes = drs[i].DRQueueAttributes;\r\n                job.LoadQueueAttributes = drs[i].LoadQueueAttributes;\r\n                job.DeliveryRequests.push(drs[i]);\r\n                job.IsTBD = drs[i].IsTBD;\r\n                job.TBDGroupId = drs[i].TBDGroupId;\r\n                job.ProductType = drs[i].ProductType;\r\n                job.ProductTypeId = drs[i].ProductTypeId;\r\n                job.UoM = drs[i].UoM;\r\n                job.RequiredQuantity = drs[i].RequiredQuantity;\r\n                job.ScheduleQuantityTypeText = drs[i].ScheduleQuantityTypeText;\r\n                response.push(job);\r\n            }\r\n            else {\r\n                response[jobIndex].DeliveryRequests.push(drs[i]);\r\n            }\r\n        }\r\n        response = sortByDesc(response, '_HoursToCoverDistance');\r\n        return response;\r\n    }\r\n    private getHourFromTime(time :string) {\r\n        let hour: number = 0;\r\n        hour = Number(time.split(\":\")[0]);\r\n        if (time.indexOf(\"PM\") > -1 && hour < 12) {\r\n            hour += 12;\r\n        }\r\n        if (time.indexOf(\"AM\") > -1 && hour == 12) {\r\n            hour = 0;\r\n        }\r\n        return hour;\r\n    }\r\n    public groupDrsBySelectedTime(drs: DeliveryRequestViewModel[], drType: DeliveryRequestTypes = DeliveryRequestTypes.None) {\r\n        var response = [] as DelRequestByTimeModel[];\r\n        for (var i = 0; i < drs.length; i++) {\r\n            var timeIndex = -1;\r\n            const startHour: number = this.getHourFromTime(drs[i].ScheduleStartTime.toString());\r\n            const endHour: number = this.getHourFromTime(drs[i].ScheduleEndTime.toString());\r\n            if (drs[i].ScheduleStartTime && drs[i].ScheduleEndTime) { \r\n                timeIndex = response.findIndex(t => t.StartTime == startHour && t.EndTime == endHour);\r\n            }\r\n            if (timeIndex == -1) {\r\n                var timeDrs = new DelRequestByTimeModel();\r\n                timeDrs.StartTime = startHour;\r\n                timeDrs.EndTime = endHour;\r\n                timeDrs.DeliveryRequests.push(drs[i]);\r\n                response.push(timeDrs);\r\n            }\r\n            else {\r\n                response[timeIndex].DeliveryRequests.push(drs[i]);\r\n            }\r\n        }\r\n        response = sortBy(response, 'StartTime');\r\n        return response;\r\n    }\r\n\r\n    public getCarrierStatus(drs: DeliveryRequestViewModel[]) {\r\n        if (drs.every(t => t.CarrierStatus == 2)) {\r\n            return 2;\r\n        }\r\n        else if (drs.every(t => t.CarrierStatus == 3)) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public getMustGoRequests(drs: DelRequestsByJobModel[]) {\r\n        var mustGoRequests = drs.filter(t => t.DeliveryRequests.findIndex(t1 => t1.Priority == 1) != -1);\r\n        mustGoRequests.forEach(t => { t.DeliveryRequestType = DeliveryRequestTypes.MustGo; t.Priority = DeliveryReqPriority.MustGo; });\r\n        return mustGoRequests;\r\n    }\r\n\r\n    public getShouldGoRequests(drs: DelRequestsByJobModel[]) {\r\n        var shouldGoRequests = drs.filter(t => t.DeliveryRequests.findIndex(t1 => t1.Priority == 2) != -1\r\n            && t.DeliveryRequests.findIndex(t1 => t1.Priority == 1) == -1);\r\n        shouldGoRequests.forEach(t => { t.DeliveryRequestType = DeliveryRequestTypes.ShouldGo; t.Priority = DeliveryReqPriority.ShouldGo; });\r\n        return shouldGoRequests;\r\n    }\r\n\r\n    public getCouldGoRequests(drs: DelRequestsByJobModel[]) {\r\n        var couldGoRequests = drs.filter(t => t.DeliveryRequests.findIndex(t1 => t1.Priority == 3) != -1\r\n            && t.DeliveryRequests.findIndex(t1 => t1.Priority == 1) == -1\r\n            && t.DeliveryRequests.findIndex(t1 => t1.Priority == 2) == -1);\r\n        couldGoRequests.forEach(t => { t.DeliveryRequestType = DeliveryRequestTypes.CouldGo; t.Priority = DeliveryReqPriority.CouldGo; });\r\n        return couldGoRequests;\r\n    }\r\n\r\n    public getPriority(drs: DeliveryRequestViewModel[]) {\r\n        if (drs.some(t => t.Priority == 1)) {\r\n            return DeliveryReqPriority.MustGo;\r\n        }\r\n        else if (drs.some(t => t.Priority == 2) && !drs.some(t => t.Priority == 1)) {\r\n            return DeliveryReqPriority.ShouldGo;\r\n        }\r\n        else if (drs.some(t => t.Priority == 3) && !drs.some(t => t.Priority == 1) && !drs.some(t => t.Priority == 2)) {\r\n            return DeliveryReqPriority.CouldGo;\r\n        }\r\n        return DeliveryReqPriority.None;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HandleError } from 'src/app/errors/HandleError';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { FuelSurchargeIndexViewModel, FuelSurchargeGridModel } from 'src/app/fuelsurcharge/models/CreateFuelSurcharge';\r\nimport { DropdownItem, DropdownItemExt } from 'src/app/statelist.service';\r\nimport { SourceRegionInputModel } from 'src/app/app.enum';\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FuelSurchargeService extends HandleError {\r\n    public onSelectedTabChanged: BehaviorSubject<any>;\r\n    public onSelectedFuelSurchargeId: BehaviorSubject<any>;\r\n\r\n    public getTableTypesUrl = \"/FuelSurcharge/GetTableTypes\";\r\n    public getSupplierCustomersUrl = \"/FuelSurcharge/GetSupplierCustomers\";   \r\n    public getSourceRegionsUrl = \"/FuelSurcharge/GetSourceRegionsAsync\";  \r\n    public getTerminalsAndBulkPlantsUrl = \"/FuelSurcharge/GetTerminalsAndBulkPlantsAsync?regionIds=\";\r\n    public getFuelSurchargeProductsUrl = '/FuelSurcharge/GetFuelSurchargeProductAsync?countryId=';\r\n    public getFuelSurchargePeriodUrl = '/FuelSurcharge/GetFuelSurchargePeriodAsync?countryId=';\r\n    public getFuelSurchargeAreaUrl = '/FuelSurcharge/GetFuelSurchargeAreaAsync?countryId=';\r\n    public getEIAIndexPriceUrl = '/FuelSurcharge/GetEIAIndexPrice?periodId=';\r\n    public getNRCIndexPriceUrl = '/FuelSurcharge/GetNRCIndexPrice?periodId=';\r\n    public getGenerateSurchargeTableUrl = '/FuelSurcharge/GetGenerateSurchargeTable?pRSV=';\r\n    public getViewFuelSurchargeSummaryUrl = '/FuelSurcharge/GetViewFuelSurchargeSummary';\r\n    public getSurchargeTableNewUrl = '/FuelSurcharge/GetSurchargeTableNew?fuelSurchargeIndexId=';\r\n    public createFuelSurchargeUrl = '/FuelSurcharge/CreateFuelSurchargeAsync';\r\n    public archiveFuelSurchargeTableUrl = '/FuelSurcharge/ArchiveFuelSurchargeTable';\r\n    public getHistoricalPriceUrl = '/FuelSurcharge/GetHistoricalPrice?fuelSurchargeIndexId=';\r\n    \r\n    public getFuelSurchargeTableUrl = '/FuelSurcharge/GetFuelSurchargeTableAsync?fuelSurchargeTableId=';\r\n    constructor(private httpClient: HttpClient) {\r\n        super();\r\n        this.onSelectedTabChanged = new BehaviorSubject(1);\r\n        this.onSelectedFuelSurchargeId = new BehaviorSubject(null);\r\n    }\r\n\r\n\r\n    getTableTypes(): Observable<DropdownItem[]> {\r\n        return this.httpClient.get<any>(this.getTableTypesUrl)\r\n            .pipe(catchError(this.handleError<any>('GetTableTypes', null)));\r\n    }\r\n\r\n    getSupplierCustomers(): Observable<DropdownItem[]> {\r\n        return this.httpClient.get<any>(this.getSupplierCustomersUrl)\r\n            .pipe(catchError(this.handleError<any>('GetSupplierCustomers', null)));\r\n    }\r\n\r\n    getSourceRegions(input: SourceRegionInputModel): Observable<any> {\r\n        return this.httpClient.post<any>(this.getSourceRegionsUrl, input)\r\n            .pipe(catchError(this.handleError<any>('getSourceRegions', null)));\r\n    }\r\n\r\n    getTerminalsAndBulkPlants(regionIds: string): Observable<DropdownItemExt[]> {       \r\n        return this.httpClient.get<any>(this.getTerminalsAndBulkPlantsUrl + regionIds)\r\n            .pipe(catchError(this.handleError<any>('GetTerminalsAndBulkPlants', null)));\r\n    }\r\n\r\n    getFuelSurchargeProducts(countryId: number): Observable<DropdownItemExt[]> {\r\n        return this.httpClient.get<any>(this.getFuelSurchargeProductsUrl + countryId)\r\n            .pipe(catchError(this.handleError<any>('GetFuelSurchargeProduct', null)));\r\n    }\r\n\r\n    getFuelSurchargePeriod(countryId: number): Observable<DropdownItemExt[]> {\r\n        return this.httpClient.get<any>(this.getFuelSurchargePeriodUrl + countryId)\r\n            .pipe(catchError(this.handleError<any>('getFuelSurchargePeriod', null)));\r\n    }\r\n\r\n    getFuelSurchargeArea(countryId: number): Observable<DropdownItemExt[]> {\r\n        return this.httpClient.get<any>(this.getFuelSurchargeAreaUrl + countryId)\r\n            .pipe(catchError(this.handleError<any>('getFuelSurchargeArea', null)));\r\n    }\r\n\r\n    getEIAIndexPrice(periodId: number, productType: number, fetchDate: string, areaId: number): Observable<any> {\r\n        return this.httpClient.get<any>(this.getEIAIndexPriceUrl + periodId + \"&productType=\" + productType + \"&fetchDate=\" + fetchDate + \"&areaId=\" + areaId)\r\n            .pipe(catchError(this.handleError<any>('getEIAIndexPrice', null)));\r\n    }\r\n\r\n    getNRCIndexPrice(periodId: number, productType: number, fetchDate: string): Observable<any> {\r\n        return this.httpClient.get<any>(this.getNRCIndexPriceUrl + periodId + \"&productType=\" + productType + \"&fetchDate=\" + fetchDate)\r\n            .pipe(catchError(this.handleError<any>('getNRCIndexPrice', null)));\r\n    }\r\n\r\n    createFuelSurcharge(fsm: FuelSurchargeIndexViewModel): Observable<FuelSurchargeIndexViewModel> {\r\n        return this.httpClient.post<FuelSurchargeIndexViewModel>(this.createFuelSurchargeUrl, fsm, httpOptions)\r\n            .pipe(catchError(this.handleError<FuelSurchargeIndexViewModel>('createFuelSurcharge', fsm)));\r\n    }\r\n\r\n    getGenerateSurchargeTable(pRSV: string, pREV: string, pRI: string, sI: string, fSSP: string): Observable<any> {\r\n        return this.httpClient.get<any>(this.getGenerateSurchargeTableUrl + pRSV + \"&pREV=\" + pREV + \"&pRI=\" + pRI + \"&sI=\" + sI + \"&fSSP=\" + fSSP)\r\n            .pipe(catchError(this.handleError<any>('getGenerateSurchargeTable', null)));\r\n    }\r\n\r\n    getFuelSurchargeGridDetails(filter: any): Observable<any> {\r\n        return this.httpClient.post<any>(this.getViewFuelSurchargeSummaryUrl, filter)\r\n            .pipe(catchError(this.handleError<any>('getFuelSurchargeGridDetails', null)));\r\n    }\r\n\r\n    getSurchargeTableNew(fuelSurchargeIndexId: number): Observable<any> {\r\n        return this.httpClient.get<any>(this.getSurchargeTableNewUrl + fuelSurchargeIndexId)\r\n            .pipe(catchError(this.handleError<any>('getSurchargeTableNew', null)));\r\n    }\r\n\r\n    getHistoricalPrice(fuelSurchargeIndexId: number, forPeriod: number): Observable<any> {\r\n        return this.httpClient.get<any>(this.getHistoricalPriceUrl + fuelSurchargeIndexId + \"&forPeriod=\" + forPeriod)\r\n            .pipe(catchError(this.handleError<any>('getHistoricalPrice', null)));\r\n    }\r\n\r\n    archiveFuelSurchargeTable(fuelSurchargeIndexId: number): Observable<any> {\r\n        return this.httpClient.post<any>(this.archiveFuelSurchargeTableUrl, { fuelSurchargeIndexId: fuelSurchargeIndexId } )\r\n            .pipe(catchError(this.handleError<any>('archiveFuelSurchargeTable', null)));\r\n    }\r\n\r\n    getFuelSurchargeTable(fuelSurchargeTableId: number): Observable<any> {\r\n        return this.httpClient.get<any>(this.getFuelSurchargeTableUrl + fuelSurchargeTableId)\r\n            .pipe(catchError(this.handleError<any>('getFuelSurchargeTable', null)));\r\n    }\r\n\r\n    \r\n}","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, timer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HandleError } from '../../app/errors/HandleError';\nimport { DropdownItem } from '../statelist.service';\nimport { ServiceArea, StateListViewModel } from './third-party-invitation.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InvitationService extends HandleError {\n    private isCompanyNameExistUrl = \"Validation/IsCompanyNameExist\";\n    private getCountrylistUrl = \"Invitation/GetCountryList\";\n    private getStatesOfAllCountrieslistUrl = \"Invitation/GetStateList\";\n    private postInvitationRequestUrl = \"Invitation/Save\";\n    private getThirdPartyCompanyTypesUrl = \"Invitation/GetThirdPartyCompanyTypes\";\n    private getAllTrailerAssetTypesUrl = \"Invitation/GetAllTrailerAssetTypes\";\n    private getCitiesFromStatesUrl = \"Invitation/GetCityAndZipsByState\";\n    private getaddressByZipUrl = \"Validation/GetAddressByZip\";\n    private getCarrierOnboardingForBrandingUrl = \"Invitation/getCarrierOnboardingForBranding\";\n    \n    private GetPhoneTypesUrl = \"Invitation/GetPhoneTypes\";\n    private IsPhoneNumberValidUrl = \"/Validation/IsPhoneNumberValid\";\n    //private GetaddressbyLatLongUrl = \"https://maps.googleapis.com/maps/api/geocode/json\";\n    private isEmailExistUrl = \"Invitation/IsEmailExist\";\n    private GetCompaniesUrl = \"/Invitation/GetCompanies\";\n\n    constructor(private httpClient: HttpClient) { super(); }\n\n    public IsCompanyNameExist(IsNewCompany:any,CompanyName:any): Observable<any>{\n        return this.httpClient.get<any>(`${this.isCompanyNameExistUrl}?IsNewCompany=${IsNewCompany}&CompanyName=${CompanyName}`)\n            .pipe(catchError(this.handleError<any>('IsCompanyNameExist', null))); \n    }\n    public GetCountryList(): Observable<DropdownItem[]> {\n        return this.httpClient.get<any>(this.getCountrylistUrl)\n            .pipe(catchError(this.handleError<any>('GetCountryList', null)));\n    }\n    public GetStatesOfAllCountries(): Observable<StateListViewModel[]> {\n        return this.httpClient.get<any>(this.getStatesOfAllCountrieslistUrl)\n            .pipe(catchError(this.handleError<any>('GetStatesOfAllCountries', null)));\n    }\n    SaveInvitedRequest(sourcingRequestModel: any): Observable<any> {\n        return this.httpClient.post<any>(this.postInvitationRequestUrl, sourcingRequestModel)\n            .pipe(catchError(this.handleError<any>('SaveInvitedRequest', null)));\n    }\n    public GetThirdPartyCompanyTypes(): Observable<any> {\n        return this.httpClient.get<any>(this.getThirdPartyCompanyTypesUrl)\n            .pipe(catchError(this.handleError<any>('GetThirdPartyCompanyTypes', null)));\n    }\n    public GetAllTrailerAssetTypes(): Observable<any> {\n        return this.httpClient.get<any>(this.getAllTrailerAssetTypesUrl)\n            .pipe(catchError(this.handleError<any>('GetAllTrailerAssetTypes', null)));\n    }\n    public GetCitiesFromStates(stateIds: string): Observable<ServiceArea[]> {\n        return this.httpClient.get<any>(`${this.getCitiesFromStatesUrl}?stateIds=${stateIds}`)\n            .pipe(catchError(this.handleError<any>('GetCitiesFromStates', null)));\n    }\n    public GetAddressByZip(zipCode: string) {\n        return this.httpClient.get<any>(`${this.getaddressByZipUrl}?zipCode=${zipCode}`)\n            .pipe(catchError(this.handleError<any>('GetAddressByZip', null)));\n    }\n    public GetCarrierOnboardingForBranding(token: string) {\n        return this.httpClient.get<any>(`${this.getCarrierOnboardingForBrandingUrl}?token=${token}`)\n            .pipe(catchError(this.handleError<any>('GetCarrierOnboardingForBranding', null)));\n    }\n    public GetPhoneTypes(): Observable<any> {\n        return this.httpClient.get<any>(this.GetPhoneTypesUrl)\n            .pipe(catchError(this.handleError<any>('GetPhoneTypes', null)));\n    }\n    public IsPhoneNumberValid(phoneNumber: string): Observable<boolean> {\n        return this.httpClient.get<any>(`${this.IsPhoneNumberValidUrl}?phoneNumber='${phoneNumber}`)\n            .pipe(catchError(this.handleError<any>('IsPhoneNumberValid', null)));\n    }\n    public IsEmailExist(email: string): Observable<any> {\n        return this.httpClient.get<any>(`${this.isEmailExistUrl}?email=${email}`)\n            .pipe(catchError(this.handleError<any>('IsEmailExist', null)));\n    }\n    public GetCompanies(): Observable<DropdownItem[]> {\n        return this.httpClient.get<any>(this.GetCompaniesUrl)\n            .pipe(catchError(this.handleError<any>('GetCompanies', null)));\n    }\n}\n","import { PickupLocationType } from 'src/app/app.enum';\r\n\r\nexport class LFRecordGridModel {\r\n    public LiftFileRecordId: number;//refers Id of LiftFileValidationRecords table\r\n    public bol: string;\r\n    public TerminalName: string; // Represents terminal code as received in Parkland API Json\r\n    public Terminals: string;\r\n    public correctedQuantity: number;\r\n    public RecordDate: string;\r\n    public statusChangeDate: string = \"\";\r\n    public Status: string;\r\n    public TerminalItemCode: string;\r\n    public ProductType: string;\r\n    public LoadDate: string;\r\n    public InvFtlDetailId: number;\r\n    public InvId: number;\r\n    public LiftTicketNumber: string;\r\n    public Reason: string;\r\n    public CarrierID: string;\r\n    public FileName: string;\r\n    public CallId: string;\r\n    public Terminal: string //== mapped terminal/Bulk plant as per terminal mapping.\r\n    public CarrierName: string;\r\n    public recordStatus: string; // string denoting current status of records like \"No Match\" ,\"Active Exception\"\"\r\n    public IsFromScratchReport: boolean;\r\n    public ProductTypeId: number;\r\n    public CIN: string;\r\n    public GrossQuantity: number;\r\n    public ModifiedDate: string;\r\n    public Username: string;\r\n    public ReasonCode: string;\r\n    public ReasonCategory: string;\r\n    public TimeToBol: string;\r\n}\r\n\r\nexport class LFBolEditModel {\r\n    constructor() {\r\n        this.LiftRecord = new LFRecordGridModel();\r\n    }\r\n    public LiftRecord: LFRecordGridModel;\r\n    public LiftDate: string;\r\n    public GrossQuantity: number;\r\n    public NetQuantity: number;\r\n    public BadgeNumber: string;\r\n    public FuelTypeId: number;\r\n    public TerminalId: number;\r\n    public Notes: string;\r\n    public BolNumber: string;\r\n    public InvoiceFtlDetailId: number;\r\n    //public int InvoiceFtlDetailIdFromList { get; set; }\r\n    public InvoiceFtlDetailsList: DropDownItem[];\r\n    public OrderId: number;\r\n    public DisplayTerminalName: string;\r\n    public PricingSourceId: number;\r\n    public PickupLocationType: PickupLocationType;\r\n    public IsBulkPlantLift: boolean;\r\n    public DisplayLiftDate: string;\r\n    public SelectedTerminal: DropDownItem;\r\n    public TerminalList: DropDownItem[];\r\n    public SelectedFuelType: DropDownItem;\r\n    public FuelTypeList: DropDownItem[];\r\n    public SelectedInvoiceFtlDetailId: DropDownItem;\r\n}\r\n\r\nexport class DropDownItem {\r\n    Id: number;\r\n    Name: string;\r\n    Code:string;\r\n    DisplayName:string;\r\n}\r\n\r\nexport class LFValidationGridViewModel {\r\n    CallId?: number; // Refers LF DETAILS table Id\r\n    TotalRecordCount?: number;\r\n    MatchedRecordCount?: number;\r\n    ActiveExceptionRecordCount: number;\r\n    NoMatchRecordCount?: number;\r\n    RecordDate?: string; //REFERES AddedDate column in LF DETAILS TABLE\r\n    IgnoredMatchRecordCount?: number;\r\n    UnmatchedRecordCount?: number;\r\n    UpdatedOn?: string;\r\n    PendingMatchCount?: number;\r\n    DuplicateRecordCount?: number;\r\n    PartialMatchRecordCount?: number;\r\n    CarrierName?: string;\r\n    CarrierID?: string;\r\n    ForcedIgnoredMatchRecordCount?: number;\r\n}\r\n\r\nexport interface LFRecordsGridViewModel {\r\n    LiftFileRecordId: number; //refers Id of LiftFileValidationRecords column\r\n    bol: string;\r\n    TerminalName: string; // Represents terminal code as received in Parkland API Json\r\n    correctedQuantity: number;\r\n    // validatedQuantity: number;\r\n    RecordDate: string;\r\n    statusChangeDate: string;\r\n    Status: number;\r\n    TerminalItemCode: string;\r\n    ProductType: string;\r\n    LoadDate: string;\r\n    InvFtlDetailId: number | null;\r\n    // DisplayTerminalName: string;\r\n    InvId: number | null;\r\n    LiftTicketNumber: string;\r\n    Reason: string;\r\n    CarrierID: string;\r\n    FileName: string;\r\n    CallId: number;\r\n    recordStatus: string; // used in searchby bol filename grid\r\n    Terminal: string; //== mapped terminal/Bulk plant as per terminal mapping.\r\n    CarrierName: string;\r\n    IsInvoiceFtlDetailListRequired: boolean;\r\n    IsRecordPushedToExternalApi: boolean;\r\n    NetQuantity: number;\r\n    GrossQuantity: number;\r\n    BadgeNumber: string;\r\n    IsFromScratchReport: boolean;\r\n    LfvValidationParameters: LFVValidationParameters;\r\n    IsAdminUser: boolean;\r\n    CIN: string;\r\n    Username: string;\r\n    ModifiedDate: string;\r\n    ReasonCode: string;\r\n    ReasonCategory: string;\r\n    TimeToBol: string;\r\n}\r\n\r\n//LiftFileRecordsWithMissingTFXDeliveryDetails\r\nexport class SupplierBOLReport {\r\n    public CallId: number;\r\n    public BOL: string;\r\n    public TerminalCode: string; //Represents terminal code as received in Parkland API Json\r\n    public CorrectedQuanity: number;\r\n    public TerminalItemCode: string;\r\n    public LoadDate: string;\r\n    public RecordStatus: string;\r\n    public Reason: string;\r\n    public CarrierID: string;\r\n    public RecordDate: string;\r\n    public CarrierName: string;\r\n    public Terminal: string;\r\n    public FileName: string;\r\n    public Status: number;\r\n    public ProductType: string;\r\n    public ReasonCode: string;\r\n    public ReasonCategory: string;\r\n}\r\n\r\n//TFXDeliveryDetailsWithMissingLiftFileRecords\r\nexport class CarrierBOLReport {\r\n    public BOL: string;\r\n    public TerminalName: string;\r\n    public LoadDate: string;\r\n    public NetQuantity: number;\r\n    public GrossQuantity: number;\r\n    public BadgeNumber: string;\r\n    public CarrierName: string;\r\n    public CarrierID: string;\r\n    public FuelTypeName: string;\r\n}\r\n\r\nexport class LFRecordsGridExport {  \r\n    bol: string;\r\n    TerminalName: string;\r\n    Terminals: string;\r\n    correctedQuantity: number;\r\n     RecordDate: string;\r\n    TerminalItemCode: string;\r\n    ProductType: string;\r\n    LoadDate: string;\r\n    Reason: string;\r\n    CarrierID: string;\r\n    CarrierName: string;\r\n    Username: string;\r\n    ModifiedDate: string;\r\n    ReasonCode: string;\r\n    ReasonCategory: string;\r\n    LFVResolutionTime: string;\r\n    TimeToBol: string;\r\n}\r\n\r\nexport class LFVValidationParameters {\r\n    public IsTerminalCodeReq: boolean = true;\r\n    public IsBolReq: boolean = true;\r\n    public IsCINReq: boolean;\r\n    public IsCarrierNameReq: boolean;\r\n    public IsLoadDateReq: boolean;\r\n    public IsTermItemCodeReq: boolean;\r\n    public IsCorrectedQtyRes: boolean;\r\n    public IsGrossReq: boolean;\r\n    public IsCorrectedQtyOrGrossReq: boolean;\r\n}","import { HandleError } from 'src/app/errors/HandleError';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationService extends HandleError{\n    private GetTerminalsUrl = '/Location/GetTerminals';\n    private GetBulkPlantsUrl = '/Location/GetBulkPlants?countryId=';\n    private PostBulkPlantLocationUrl = '/Location/SaveBulkPlantLocation';\n\n    constructor(private httpClient: HttpClient) { super(); }\n\n    getTerminals(requestModel: any): Observable<any> {\n        return this.httpClient.post<any>(this.GetTerminalsUrl, requestModel)\n            .pipe(catchError(this.handleError<any>('getTerminals', null)));\n    }\n\n    GetBulkPlants(countryId: number): Observable<any> {\n        return this.httpClient.get<any>(this.GetBulkPlantsUrl + countryId)\n            .pipe(catchError(this.handleError<any>('GetBulkPlants', null)));\n    }\n\n    PostBulkPlantLocation(data: any): Observable<any> {\n        return this.httpClient.post<any>(this.PostBulkPlantLocationUrl, data)\n            .pipe(catchError(this.handleError<any>('PostBulkPlantLocation', null)));\n    }\n}\n","\r\nexport class MyLocalStorage {\r\n\r\n    // Schedule Builder filter Keys---------------------------------\r\n    public static DSB_DATE_KEY = \"date\";\r\n    public static DSB_REGION_KEY = \"regionId\";\r\n    public static DSB_OBJECTFILTER_KEY = \"objectFilter\";\r\n    public static DSB_DATEFILTER_KEY = \"dateFilter\";\r\n    public static DSB_WINDOWMODE_KEY = \"windowMode\";\r\n    public static DSB_TOGGLEREQUESTMODE_KEY = \"toggleRequestMode\";\r\n    public static DSB_READONLY_KEY = \"readOnlyMode\";\r\n    public static DSB_FILTER_KEY = \"dsbviewFilter\";\r\n    // Wally Boards Filter Keys-------------------------------------\r\n    public static WBF_REGION_KEY = \"wbf_regionId\";\r\n    public static WBF_CUSTOMER_KEY = \"wbf_customerId\";\r\n    public static WBF_SEARCHEDKEYWORD_KEY = \"wbf_searchedKeyword\";\r\n    public static WBF_SELECTEDSTATES_KEY = \"wbf_selectedStates\";\r\n    public static WBF_LOCATION_KEY = \"wbf_selectedLocations\";\r\n    public static WBF_SELECTEDPRIORY_KEY = \"wbf_selectedPriority\";\r\n    public static WBF_SELECTEDSUPPLIER_KEY = \"wbf_selectedSupplier\";\r\n    public static WBF_SELECTEDCARRIER_KEY = \"wbf_selectedCarrier\";\r\n    public static WBF_SELECTEDDISPACHER_KEY = \"wbf_selectedDispacher\";\r\n    public static WBF_FROMDATE_KEY = \"wbf_fromDate\";\r\n    public static WBF_TODATE_KEY = \"wbf_toDate\";\r\n    \r\n    public static setData(key: string, value: any): void {\r\n        if (!value) {\r\n            localStorage.removeItem(key);\r\n        } else {\r\n            localStorage.setItem(key, JSON.stringify(value));\r\n        }\r\n    }\r\n\r\n    public static getData(key: string): any {\r\n        let value = localStorage.getItem(key);\r\n        if (value) {\r\n            value = JSON.parse(value);\r\n        }\r\n        if (value == 'null') {\r\n            value = null;\r\n        }\r\n        return value || '';\r\n    }\r\n}"]}