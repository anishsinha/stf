{"version":3,"sources":["./src/app/location/lazy-loading/location-routing.module.ts","./src/app/location/lazy-loading/location.module.ts","./src/app/location/models/location.ts","./src/app/location/pickup-location/bulk-plants/bulk-plants.component.ts","./src/app/location/pickup-location/bulk-plants/bulk-plants.component.html","./src/app/location/pickup-location/pickup-location.component.ts","./src/app/location/pickup-location/pickup-location.component.html","./src/app/location/pickup-location/terminals/terminals.component.ts","./src/app/location/pickup-location/terminals/terminals.component.html"],"names":[],"mappings":"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","file":"location-lazy-loading-location-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { PickupLocationComponent } from 'src/app/location/pickup-location/pickup-location.component';\r\n\r\nconst routelocation: Routes = [\r\n    {\r\n        path: \"\", component: PickupLocationComponent,\r\n        data: { title: 'Supplier Location' }\r\n    }\r\n];\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routelocation)],\r\n    exports: [RouterModule]\r\n})\r\nexport class LocationRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PickupLocationComponent } from '../pickup-location/pickup-location.component';\r\nimport { LocationRoutingModule } from './location-routing.module';\r\nimport { SharedModule } from 'src/app/modules/shared.module';\r\nimport { BulkPlantsComponent } from '../pickup-location/bulk-plants/bulk-plants.component';\r\nimport { TerminalsComponent } from '../pickup-location/terminals/terminals.component';\r\nimport { DirectiveModule } from 'src/app/modules/directive.module';\r\nimport { DataTablesModule } from 'angular-datatables';\r\n\r\n\r\n\r\n@NgModule({\r\n\r\n    declarations: [        \r\n        PickupLocationComponent,\r\n        BulkPlantsComponent,\r\n        TerminalsComponent\r\n    ],\r\n    imports: [\r\n        LocationRoutingModule,\r\n        SharedModule,\r\n        DirectiveModule,\r\n        DataTablesModule,\r\n    ]\r\n})\r\nexport class LocationModule { }\r\n","export class LocationDetailsModel {\r\n    public Id: number;\r\n    public Name: string;\r\n    public Abbreviation: string;\r\n    public ControlNumber: string;\r\n    public Address: string;\r\n    public StateCode: string;\r\n    public Latitude: number;\r\n    public Longitude: number;\r\n    public City: string;\r\n    public County: string;\r\n    public ZipCode: string;\r\n    public StateId: number;\r\n    public CountryId: number;\r\n    public CountryCode: string;\r\n    public CountryGroupId: number;\r\n}\r\n\r\nexport enum Country {\r\n    \"USA\" = 1,\r\n    \"CAN\" = 2,\r\n    \"CAR\" = 4\r\n}","import { Component, OnInit, ViewChildren, QueryList, ElementRef, ViewChild } from '@angular/core';\r\nimport { LocationService } from '../../services/location.service';\r\nimport { Subject } from 'rxjs';\r\nimport { DataTableDirective } from 'angular-datatables';\r\nimport { LocationDetailsModel, Country } from '../../models/location';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { DropdownItem, StateDropdownExtendedItem, StatelistService } from '../../../statelist.service';\r\nimport { AddressService } from '../../../address.service';\r\nimport { Declarations } from '../../../declarations.module';\r\n\r\nexport declare var google: any;\r\n\r\n@Component({\r\n  selector: 'app-bulk-plants',\r\n  templateUrl: './bulk-plants.component.html',\r\n  styleUrls: ['./bulk-plants.component.css']\r\n})\r\n\r\nexport class BulkPlantsComponent implements OnInit {\r\n    public dtOptions: any = {};\r\n    public dtTrigger: Subject<any> = new Subject();\r\n    public locations: LocationDetailsModel[] = [];\r\n    public IsLoading: boolean;\r\n    @ViewChildren(DataTableDirective) dtElements: QueryList<DataTableDirective>;\r\n    public PickupForm: FormGroup;\r\n    public StateList: StateDropdownExtendedItem[] = [];\r\n    public CountryList: DropdownItem[] = [];\r\n    public CountryGroupList: DropdownItem[] = [];\r\n    public _loadingAddress: boolean = false;\r\n    //public GridName: typeof GridName = GridName; \r\n\r\n    @ViewChild('closePickUpModal') closePickUpModal: ElementRef;\r\n\r\n    public zoomLevel = 4;\r\n    public toogleMap: Boolean = true;\r\n    public googleMap: any;\r\n    public screenOptions = { position: 3 };\r\n    public centerLocationLat = 47.1853106;\r\n    public centerLocationLog = -125.36955;\r\n    private CountryCentre = {\r\n        USA: { lat: 39.11757961, lng: -103.8784 },\r\n        CAN: { lat: 57.88251631, lng: -98.54842922 }\r\n    };\r\n    constructor(private locationSercice: LocationService, private fb: FormBuilder, private stateService: StatelistService, private addresService: AddressService) { }\r\n\r\n    ngOnInit() {\r\n        this.PickupForm = this.initPickupForm(new LocationDetailsModel());\r\n        let countryId = this.getCountryFilter();\r\n        this.setAddressValidator(countryId);\r\n        this.stateService.getStates().subscribe(x => this.StateList = x);\r\n        this.stateService.getCountries().subscribe(x => this.CountryList = x);\r\n        this.stateService.getCountryGroup(Country.CAR).subscribe(x => this.CountryGroupList = x);\r\n        let exportColumns = { columns: ':visible' };\r\n        this.dtOptions = {\r\n            pagingType: 'simple_numbers',\r\n            pageLength: 10,\r\n            lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, \"All\"]],\r\n            searching: true,\r\n            destroy: true,\r\n            dom: '<\"html5buttons\"B>lTfgitp',\r\n            buttons: [\r\n                { extend: 'copy', exportOptions: exportColumns },\r\n                { extend: 'csv', title: 'Terminals Detail', exportOptions: exportColumns },\r\n                { extend: 'pdf', title: 'Terminals Detail', orientation: 'landscape', exportOptions: exportColumns },\r\n                { extend: 'print', exportOptions: exportColumns }\r\n            ],\r\n        };\r\n\r\n        this.loadDataTable();    \r\n    }\r\n\r\n    loadDataTable(): void {\r\n        this.IsLoading = true;\r\n        this.locationSercice.GetBulkPlants(this.getCountryFilter()).subscribe((data) => {\r\n            if (data != null) {\r\n                this.locations = data;\r\n                this.refreshDatatable();\r\n            }\r\n            this.IsLoading = false;\r\n        });\r\n    }\r\n    refreshDatatable(): void {\r\n        this.dtElements.forEach((dtElement: DataTableDirective) => {\r\n            if (dtElement.dtInstance) {\r\n                dtElement.dtInstance.then((dtInstance: DataTables.Api) => { dtInstance.destroy(); });\r\n            }\r\n        });\r\n        this.dtTrigger.next();\r\n    }\r\n\r\n    getCountryFilter(): any{\r\n        return (localStorage.getItem('countryFilterType')) ? (localStorage.getItem('countryFilterType')) : (localStorage.getItem('countryIdForDashboard') ? localStorage.getItem('countryIdForDashboard') : 1);\r\n    }\r\n    \r\n    get StatesListByCountry(): any[] {\r\n        let countryCode = this.PickupForm.get('CountryCode').value;\r\n        if (countryCode && this.CountryList && this.CountryList.length > 0) {\r\n\r\n            countryCode = countryCode == \"US\" ? \"USA\" : countryCode;\r\n            let countryId = 0;\r\n            let county = this.CountryList.find(c => c.Code == countryCode);\r\n            if(county && county.Id)\r\n                countryId = county.Id;\r\n                \r\n            if (countryId == Country.CAR) {\r\n                let countryGroupId = this.PickupForm.get(\"CountryGroupId\").value;\r\n                return this.StateList.filter(t => t.CountryId == countryId && (countryGroupId ==0 || t.CountryGroupId == countryGroupId));\r\n            }\r\n            else {\r\n                return this.StateList.filter(t => t.CountryId == countryId);\r\n            }\r\n        }\r\n    }\r\n    \r\n    initPickupForm(loc: LocationDetailsModel): FormGroup {\r\n        let _pForm = this.fb.group({\r\n            Address: this.fb.control(loc.Address),\r\n            City: this.fb.control(loc.City),\r\n            StateId: this.fb.control(loc.StateId, [Validators.required]),\r\n            StateCode: this.fb.control(loc.StateCode, [Validators.required]),\r\n            CountryCode: this.fb.control(loc.CountryCode, [Validators.required]),\r\n            CountryId: this.fb.control(loc.CountryId, [Validators.required]),\r\n            ZipCode: this.fb.control(loc.ZipCode),\r\n            County: this.fb.control(loc.County),\r\n            Latitude: this.fb.control(loc.Latitude),\r\n            Longitude: this.fb.control(loc.Longitude),\r\n            Name: this.fb.control(loc.Name, [Validators.required]),\r\n            CountryGroupId: this.fb.control(loc.CountryGroupId)\r\n        });\r\n        return _pForm;\r\n    }\r\n\r\n    setAddressValidator(countryId: any) {\r\n        if (countryId == Country.CAR) {\r\n            this.PickupForm.get('Address').clearValidators();\r\n            this.PickupForm.get('Address').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('City').clearValidators();\r\n            this.PickupForm.get('City').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('ZipCode').clearValidators();\r\n            this.PickupForm.get('ZipCode').updateValueAndValidity();\r\n\r\n            //this.PickupForm.get('County').clearValidators();\r\n            //this.PickupForm.get('County').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('Latitude').clearValidators();\r\n            this.PickupForm.get('Latitude').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('Longitude').clearValidators();\r\n            this.PickupForm.get('Longitude').updateValueAndValidity();\r\n        }\r\n        else {\r\n            let validator = [Validators.required];\r\n            this.PickupForm.get('Address').setValidators(validator);\r\n            this.PickupForm.get('Address').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('City').setValidators(validator);\r\n            this.PickupForm.get('City').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('ZipCode').setValidators(validator);\r\n            this.PickupForm.get('ZipCode').updateValueAndValidity();\r\n\r\n            //this.PickupForm.get('County').setValidators(validator);\r\n            //this.PickupForm.get('County').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('Latitude').setValidators(validator);\r\n            this.PickupForm.get('Latitude').updateValueAndValidity();\r\n\r\n            this.PickupForm.get('Longitude').setValidators(validator);\r\n            this.PickupForm.get('Longitude').updateValueAndValidity();\r\n\r\n\r\n        }\r\n    }\r\n    \r\n    getAddressByZip(event: any): void {\r\n        const zipCode: string = event.target.value;\r\n        //const regexUsa = new RegExp(this.regexUsaZip);\r\n        //const regexCan = new RegExp(this.regexCanZip);\r\n        if (zipCode.length > 2) {\r\n            this._loadingAddress = true;\r\n            this.addresService.getAddress(zipCode)\r\n                .subscribe(data => {\r\n                    this._loadingAddress = true;\r\n                    const _address = this.PickupForm.get('Address');\r\n                    if (data != null && data != undefined && data.CountryCode != null) {\r\n                        this.setCountryCode(data);\r\n                        data.Address = _address.value;\r\n                        let countryGroupId = null;\r\n                        const state = this.StateList.find(x => x.Code == data.StateCode);\r\n                        let country = this.CountryList.find(x => x.Code == data.CountryCode);\r\n                        let countrygroup = new DropdownItem();\r\n                        if (country && country.Id > 0) {\r\n                            countryGroupId = 1;\r\n                            countrygroup.Id = 1;\r\n                        } else {\r\n                            countrygroup = this.CountryGroupList.find(x => x.Code == data.CountryCode);\r\n                            country = new DropdownItem();\r\n                            country.Id = 4;\r\n                            country.Code = \"CAR\";\r\n                        }\r\n                        this.PickupForm.patchValue({\r\n                            City: data.City,\r\n                            StateId: state ? state.Id : null,\r\n                            StateCode: data.StateCode,\r\n                            CountryId: country.Id, \r\n                            CountryCode: country.Code,\r\n                            CountryGroupId: countrygroup.Id,\r\n                            ZipCode: data.ZipCode,\r\n                            County: data.CountyName,\r\n                            Latitude: data.Latitude,\r\n                            Longitude: data.Longitude\r\n                        });\r\n                        this.PickupForm.markAllAsTouched();\r\n                        this.PickupForm.markAsDirty();\r\n                    }\r\n                    this._loadingAddress = false;\r\n                });\r\n        }\r\n    }\r\n    setCountryCode(data) {\r\n        if (data.CountryCode == 'US')\r\n        {\r\n            data.CountryCode = 'USA'\r\n        }\r\n        else if (data.CountryCode == 'CA')\r\n        {\r\n            data.CountryCode = 'CAN'\r\n        }\r\n    }\r\n    \r\n    setStateCode(event: any) {\r\n        this.PickupForm.get('StateCode').setValue(event.target.selectedOptions[0].text);\r\n    }\r\n\r\n    mapReady(map: any): void {\r\n        this.googleMap = map;\r\n        this.setMapCenter();\r\n    }\r\n\r\n    public setCenterMap($event): void {\r\n        if (!this.locations.length) {\r\n        let selectedCountryId = this.getCountryFilter();\r\n        this.centerLocationLat = this.CountryCentre[Country[selectedCountryId]].lat;\r\n        this.centerLocationLog = this.CountryCentre[Country[selectedCountryId]].lng;\r\n        if (this.googleMap) {\r\n            this.googleMap.setCenter({ lat: this.centerLocationLat, lng: this.centerLocationLog });\r\n            this.googleMap.setZoom(4);\r\n            }\r\n        }\r\n    }\r\n\r\n    setMapCenter(): void {\r\n        let selectedCountryId = this.getCountryFilter();\r\n        this.centerLocationLat = this.CountryCentre[Country[selectedCountryId]].lat;\r\n        this.centerLocationLog = this.CountryCentre[Country[selectedCountryId]].lng;\r\n        if (this.googleMap && this.locations.length == 0 && this.locations.length == 0) {\r\n            const bounds = new google.maps.LatLngBounds();\r\n            bounds.extend(new google.maps.LatLng(this.centerLocationLat, this.centerLocationLog));\r\n            this.googleMap.fitBounds(bounds);\r\n            this.googleMap.setZoom(4);\r\n        } else {\r\n            const bounds = new google.maps.LatLngBounds();\r\n            this.locations.forEach(x => {\r\n                bounds.extend(new google.maps.LatLng(x.Latitude, x.Longitude));\r\n            });\r\n            this.googleMap.fitBounds(bounds);\r\n        }\r\n    }\r\n\r\n    savePickupLocation(): void {\r\n        this.locationSercice.PostBulkPlantLocation(this.PickupForm.value).subscribe((response) => {\r\n            if (response != null && response.StatusCode == 0) {\r\n                Declarations.msgsuccess(response.StatusMessage, undefined, undefined);\r\n                this.closePickUpModal.nativeElement.click();\r\n                this.loadDataTable();\r\n            } else {\r\n                Declarations.msgerror(response.StatusMessage, undefined, undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    clearPickUpform() {\r\n        this.PickupForm.reset();\r\n    }\r\n\r\n    countryChanged() {\r\n        let countryId = 1;\r\n        let countryCode = this.PickupForm.get('CountryCode').value;\r\n        if (countryCode) {\r\n            if (countryCode == \"CAN\") {\r\n                countryId = 2;\r\n            }\r\n            else if (countryCode == \"CAR\") {\r\n                countryId = 4;\r\n            }\r\n            this.setAddressValidator(countryId);\r\n            this.PickupForm.get('CountryId').setValue(countryId);\r\n        }\r\n    }\r\n}","<div class=\"row mb10\">\r\n    <div class=\"col-sm-12\">\r\n        <agm-map [maxZoom]=\"16\" [fitBounds]=\"true\" [latitude]=\"centerLocationLat\" [zoom]=\"zoomLevel\" [longitude]=\"centerLocationLog\" (boundsChange)=\"setCenterMap($event)\"\r\n                 (mapReady)=\"mapReady($event)\" [fullscreenControl]=\"true\" [fullscreenControlOptions]=\"screenOptions\" [mapTypeControl]=\"true\">\r\n            <ng-container *ngFor=\"let loc of locations\">\r\n                <agm-marker [latitude]=\"loc.Latitude\" [longitude]=\"loc.Longitude\" [agmFitBounds]=\"true\" (mouseOver)=\"infoWindow.open()\" (mouseOut)=\"infoWindow.close()\">\r\n                    <agm-info-window [disableAutoPan]=\"false\" #infoWindow>\r\n                        <div>\r\n                            <p>\r\n                                <span>{{loc.Name}}</span> <br />\r\n                                <span *ngIf=\"loc.Address\">{{loc.Address}}, {{loc.City}}, </span>{{loc.StateCode}}\r\n                            </p>\r\n                        </div>\r\n                    </agm-info-window>\r\n                </agm-marker>\r\n            </ng-container>\r\n        </agm-map>\r\n    </div>\r\n</div>\r\n<div class=\"row mb10\">\r\n    <div class=\"col-md-12\">\r\n        <button class=\"btn btn-default btn-xs pull-left\" data-toggle=\"modal\" data-target=\"#pickup-location\" (click)=\"clearPickUpform()\">\r\n            <i class=\"fas fa-map-marker-alt\"></i> Add New Pick-Up Location\r\n        </button>\r\n    </div>\r\n</div>\r\n<div class=\"well bg-white shadow-b pr\">\r\n    <div class=\"ibox mb0\">\r\n        <div class=\"ibox-content no-padding no-border\">\r\n            <div class=\"table-responsive\">\r\n                <table id=\"table-bulk-plants\" class=\"table table-bordered table-hover\" datatable [dtOptions]=\"dtOptions\" [dtTrigger]=\"dtTrigger\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th data-key=\"tName\">Name</th>\r\n                            <th data-key=\"tAddress\">Address</th>\r\n                            <th data-key=\"tCity\">City</th>\r\n                            <th data-key=\"tStateCode\">State</th>\r\n                            <th data-key=\"tCounty\">County</th>\r\n                            <th data-key=\"tLatitude\">Latitude</th>\r\n                            <th data-key=\"tLongitude\">Longitude</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let row of locations\">\r\n                            <td>{{row.Name}}</td>\r\n                            <td>{{row.Address}}</td>\r\n                            <td>{{row.City}}</td>\r\n                            <td>{{row.StateCode}}</td>\r\n                            <td>{{row.County}}</td>\r\n                            <td>{{row.Latitude}}</td>\r\n                            <td>{{row.Longitude}}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Modal -->\r\n<div class=\"modal fade\" id=\"pickup-location\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\">\r\n    <div class=\"modal-dialog\" role=\"document\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-body\">\r\n                <div class=\"mt10 mb10\">\r\n                    <div class=\"row pr\" [formGroup]=\"PickupForm\">\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Bulk Plant</label>\r\n                                <input type=\"text\" formControlName=\"Name\" class=\"form-control\" placeholder=\"Bulk Plant Name\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('Name').errors\r\n                                      && (PickupForm.get('Name').touched || PickupForm.get('Name').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Name').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Address</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"Address\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('Address').errors\r\n                                      && (PickupForm.get('Address').touched || PickupForm.get('Address').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Address').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Address').errors.pattern\">\r\n                                        Invalid (alphanumeric with comma spaces only)\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Zip</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"ZipCode\" (input)=\"getAddressByZip($event)\" />\r\n                                <!--<input type=\"text\" class=\"form-control\" formControlName=\"ZipCode\" (input)=\"getAddressByZip($event)\" />-->\r\n                                <ng-container *ngIf=\"PickupForm.get('ZipCode').errors\r\n                                      && (PickupForm.get('ZipCode').touched || PickupForm.get('ZipCode').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('ZipCode').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('ZipCode').errors.pattern\">\r\n                                        Invalid zipcode\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>City</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"City\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('City').errors\r\n                                      && (PickupForm.get('City').touched || PickupForm.get('City').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('City').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('City').errors.pattern\">\r\n                                        Invalid (alphanumeric with comma spaces only)\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>State</label>\r\n                                <select formControlName=\"StateId\" class=\"form-control\" placeholder=\"Select State\" (change)=\"setStateCode($event)\">\r\n                                    <option [value]=\"null\">Select State</option>\r\n                                    <option *ngFor=\"let st of StatesListByCountry\" [value]=\"st.Id\">\r\n                                        {{st.Name}}\r\n                                    </option>\r\n                                </select>\r\n                                <ng-container *ngIf=\"PickupForm.get('StateId').errors\r\n                                      && (PickupForm.get('StateId').touched || PickupForm.get('StateId').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('StateId').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                </ng-container>\r\n                                <input type=\"hidden\" formControlName=\"StateCode\" />\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Country/Group</label>\r\n                                <select formControlName=\"CountryCode\" class=\"form-control\" placeholder=\"Select Country\"\r\n                                        (change)=\"countryChanged()\">\r\n                                    <option [value]=\"null\">Select Country</option>\r\n                                    <option *ngFor=\"let ct of CountryList\" [value]=\"ct.Code\">\r\n                                        {{ct.Code}}\r\n                                    </option>\r\n                                </select>\r\n                                <ng-container *ngIf=\"PickupForm.get('CountryCode').errors\r\n                                      && (PickupForm.get('CountryCode').touched || PickupForm.get('CountryCode').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('CountryCode').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\" *ngIf=\"PickupForm.get('CountryCode').value == 'CAR'\">\r\n                            <div class=\"form-group\">\r\n                                <label>Country</label>\r\n                                <select formControlName=\"CountryGroupId\" class=\"form-control\" placeholder=\"Select CountryGroup\">\r\n                                    <option [value]=\"null\">Select Country</option>\r\n                                    <option *ngFor=\"let ct of CountryGroupList\" [value]=\"ct.Id\">\r\n                                        {{ct.Name}}\r\n                                    </option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>County</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"County\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('County').errors\r\n                                      && (PickupForm.get('County').touched || PickupForm.get('County').dirty)\">\r\n                                    <!--<label style=\"color:red\" *ngIf=\"PickupForm.get('County').errors.required\">\r\n                                        Required\r\n                                    </label>-->\r\n                                    <!--<label style=\"color:red\" *ngIf=\"PickupForm.get('County').errors.pattern\">\r\n                                        Invalid (alphanumeric with comma spaces only)\r\n                                    </label>-->\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Latitude</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"Latitude\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('Latitude').errors\r\n                                      && (PickupForm.get('Latitude').touched || PickupForm.get('Latitude').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Latitude').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Latitude').errors.pattern\">\r\n                                        Invalid\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label>Longitude</label>\r\n                                <input type=\"text\" class=\"form-control\" formControlName=\"Longitude\" />\r\n                                <ng-container *ngIf=\"PickupForm.get('Longitude').errors\r\n                                      && (PickupForm.get('Longitude').touched || PickupForm.get('Longitude').dirty)\">\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Longitude').errors.required\">\r\n                                        Required\r\n                                    </label>\r\n                                    <label style=\"color:red\" *ngIf=\"PickupForm.get('Longitude').errors.pattern\">\r\n                                        Invalid\r\n                                    </label>\r\n                                </ng-container>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"pa bg-white z-index5 loading-wrapper\" *ngIf=\"_loadingAddress\">\r\n                            <span class='spinner-dashboard pa'></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"text-right\">\r\n                    <button type=\"button\" class=\"btn\" data-dismiss=\"modal\" #closePickUpModal id=\"btnPickupClose\">Cancel</button>\r\n                    <button type=\"button\" [disabled]=\"!PickupForm.valid\" (click)=\"savePickupLocation()\" class=\"btn btn-primary\">Add</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"loader\" *ngIf=\"IsLoading\">\r\n    <div class=\"loading-content text-center\">\r\n        <div class=\"spinner\"></div>\r\n        <div class=\"font-bold\">Loading...</div>\r\n    </div>\r\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Country } from '../models/location';\nimport { DropdownItem } from '../../statelist.service';\nimport { TerminalsComponent } from './terminals/terminals.component';\nimport { BulkPlantsComponent } from './bulk-plants/bulk-plants.component';\n\n@Component({\n  selector: 'app-pickup-location',\n  templateUrl: './pickup-location.component.html',\n  styleUrls: ['./pickup-location.component.css']\n})\nexport class PickupLocationComponent implements OnInit {\n    public locationViewType: any;\n    public CountryFilter: any;\n    public CountryEnum: typeof Country = Country;\n    public CountryType: any = [];\n\n    @ViewChild(TerminalsComponent) terminalComponent: TerminalsComponent;\n    @ViewChild(BulkPlantsComponent) bulkPLantComponent: BulkPlantsComponent;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.checkWindowSelection();\n        this.CountryType = (Object.keys(this.CountryEnum).filter(k => typeof this.CountryEnum[k] === \"number\") as string[]).map(x => { return { Id: this.CountryEnum[x], Name: x, Code: \"\" } as DropdownItem });\n    }\n\n    public onCountryChange() {\n        localStorage.setItem('countryFilterType', <string>this.CountryFilter);\n        if (this.locationViewType == 2) {\n            this.bulkPLantComponent.loadDataTable();\n        } else {\n            this.terminalComponent.loadDataTable();\n        }\n    }\n\n    public changeViewType(type: any): void {\n        localStorage.setItem('locationViewType', <string>type);\n        this.locationViewType = type;\n    }\n    private checkWindowSelection(): void {\n        this.locationViewType = (localStorage.getItem('locationViewType')) ? (localStorage.getItem('locationViewType')) : 1;\n        this.CountryFilter = (localStorage.getItem('countryFilterType')) ? (localStorage.getItem('countryFilterType')) : (localStorage.getItem('countryIdForDashboard') ? localStorage.getItem('countryIdForDashboard') : 1);\n    }\n}\n","<div class=\"row\">\r\n    <div class=\"col-sm-12 pull-left\">\r\n        <div class=\"dib border pa5 radius-capsule shadow-b\">\r\n            <div class=\"btn-group btn-filter\">\r\n                <input class=\"hide-element\" type=\"radio\" [name]=\"'type'\" [value]=\"1\" [checked]=\"locationViewType==1\">\r\n                <label class=\"btn ml0\" (click)=\"changeViewType(1)\">Terminals</label>\r\n                <input class=\"hide-element\" type=\"radio\" [name]=\"'type'\" [value]=\"2\" [checked]=\"locationViewType==2\">\r\n                <label class=\"btn\" (click)=\"changeViewType(2)\">Bulk Plants</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group pull-right\">\r\n            <select class=\"form-control\" [(ngModel)]=\"CountryFilter\" (change)=\"onCountryChange()\">\r\n                <option *ngFor=\"let key of CountryType\" [value]=\"key.Id\">{{key.Name}}</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<app-terminals *ngIf=\"locationViewType==1\">Loading...</app-terminals>\r\n<app-bulk-plants *ngIf=\"locationViewType==2\">Loading...</app-bulk-plants>","import { Component, OnInit, ViewChildren, QueryList, ViewChild, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { LocationService } from '../../services/location.service';\r\nimport { Subject } from 'rxjs';\r\nimport { DataTableDirective } from 'angular-datatables';\r\nimport { LocationDetailsModel, Country } from '../../models/location';\r\nimport { DataTablesResponse } from '../../../shared/models/DataTable-models';\r\nexport declare var google: any;\r\n\r\n@Component({\r\n    selector: 'app-terminals',\r\n    templateUrl: './terminals.component.html',\r\n    styleUrls: ['./terminals.component.css']\r\n})\r\n\r\nexport class TerminalsComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    public dtOptions: any = {};\r\n    public dtTrigger: Subject<any> = new Subject();\r\n    public terminals: LocationDetailsModel[] = [];\r\n    public mapTerminals: LocationDetailsModel[] = [];\r\n    public IsLoading: boolean;\r\n\r\n    @ViewChild(DataTableDirective) dtElement: DataTableDirective;\r\n\r\n    public zoomLevel = 4;\r\n    public toogleMap: Boolean = true;\r\n    public googleMap: any;\r\n    public screenOptions = { position: 3 };\r\n    public centerLocationLat = 47.1853106;\r\n    public centerLocationLog = -125.36955;\r\n    private CountryCentre = {\r\n        USA: { lat: 39.11757961, lng: -103.8784 },\r\n        CAN: { lat: 57.88251631, lng: -98.54842922 }\r\n    };\r\n\r\n    constructor(private locationService: LocationService) { }\r\n\r\n\r\n    ngOnInit() {\r\n        let exportColumns = { columns: ':visible' };\r\n        this.dtOptions = {\r\n            pagingType: 'simple_numbers',\r\n            pageLength: 5,\r\n            lengthMenu: [[5, 10, 25, 50], [5, 10, 25, 50]],\r\n            serverSide: true,\r\n            processing: true,\r\n            ajax: (dataTablesParameters: any, callback) => {\r\n                let requestModel = dataTablesParameters;\r\n                requestModel['CountryId'] = this.getCountryFilter();\r\n                this.locationService.getTerminals(requestModel).subscribe((resp: DataTablesResponse) => {\r\n                    this.terminals = resp.data;\r\n                    this.SetMapTerminals();\r\n                        callback({\r\n                            recordsTotal: resp.recordsTotal,\r\n                            recordsFiltered: resp.recordsFiltered,\r\n                            data: resp.data\r\n                        });\r\n                    });\r\n            },\r\n            dom: '<\"html5buttons\"B>lTfgitp',\r\n            buttons: [\r\n                { extend: 'copy', exportOptions: exportColumns },\r\n                { extend: 'csv', title: 'Terminals Detail', exportOptions: exportColumns },\r\n                { extend: 'pdf', title: 'Terminals Detail', orientation: 'landscape', exportOptions: exportColumns },\r\n                { extend: 'print', exportOptions: exportColumns }\r\n            ],\r\n            columns: [\r\n                { title: 'Name', data: 'Name', name: 'Name' },\r\n                { title: 'Abbreviation', data: 'Abbreviation', name: 'Abbreviation'  }, \r\n                { title: 'Control Number', data: 'ControlNumber', name: 'ControlNumber' }, \r\n                { title: 'Address', data: 'Address', name: 'Address' }, \r\n                { title: 'City', data: 'City', name: 'City' }, \r\n                { title: 'State', data: 'StateCode', name: 'StateCode' }]\r\n        };\r\n    }\r\n    ngAfterViewInit(): void {\r\n        this.dtTrigger.next();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        // Do not forget to unsubscribe the event\r\n        this.dtTrigger.unsubscribe();\r\n    }\r\n    SetMapTerminals() {\r\n        this.mapTerminals = this.terminals.filter(t => t.Latitude != 0 && t.Longitude != 0);\r\n    }\r\n\r\n    loadDataTable(): void {\r\n        this.refreshDatatable();\r\n    }\r\n\r\n    refreshDatatable() {\r\n        if (this.dtElement.dtInstance) {\r\n            this.dtElement.dtInstance.then((dtInstance: DataTables.Api) => {\r\n                dtInstance.draw();\r\n            });\r\n        }\r\n    }\r\n\r\n    getCountryFilter(): any {\r\n        return (localStorage.getItem('countryFilterType')) ? (localStorage.getItem('countryFilterType')) : (localStorage.getItem('countryIdForDashboard') ? localStorage.getItem('countryIdForDashboard') : 1);\r\n    }\r\n\r\n    mapReady(map: any): void {\r\n        this.googleMap = map;\r\n        this.setMapCenter();\r\n    }\r\n\r\n    public setCenterMap($event): void {\r\n        if (!this.mapTerminals.length) {\r\n        let selectedCountryId = this.getCountryFilter();\r\n        this.centerLocationLat = this.CountryCentre[Country[selectedCountryId]].lat;\r\n        this.centerLocationLog = this.CountryCentre[Country[selectedCountryId]].lng;\r\n        if (this.googleMap) {\r\n            this.googleMap.setCenter({ lat: this.centerLocationLat, lng: this.centerLocationLog });\r\n            this.googleMap.setZoom(4);\r\n            }\r\n        }\r\n    }\r\n\r\n    setMapCenter(): void {\r\n        let selectedCountryId = this.getCountryFilter();\r\n        this.centerLocationLat = this.CountryCentre[Country[selectedCountryId]].lat;\r\n        this.centerLocationLog = this.CountryCentre[Country[selectedCountryId]].lng;\r\n        if (this.googleMap && this.terminals.length == 0 && this.terminals.length == 0) {\r\n            const bounds = new google.maps.LatLngBounds();\r\n            bounds.extend(new google.maps.LatLng(this.centerLocationLat, this.centerLocationLog));\r\n            this.googleMap.fitBounds(bounds);\r\n            this.googleMap.setZoom(4);\r\n        } else {\r\n            const bounds = new google.maps.LatLngBounds();\r\n            this.terminals.forEach(x => {\r\n                bounds.extend(new google.maps.LatLng(x.Latitude, x.Longitude));\r\n            });\r\n            this.googleMap.fitBounds(bounds);\r\n        }\r\n    }\r\n}\r\n","<div class=\"row mb10\">\r\n    <div class=\"col-sm-12\">\r\n        <agm-map [maxZoom]=\"16\" [fitBounds]=\"true\" [latitude]=\"centerLocationLat\" [zoom]=\"zoomLevel\" [longitude]=\"centerLocationLog\" (boundsChange)=\"setCenterMap($event)\"\r\n                 (mapReady)=\"mapReady($event)\" [fullscreenControl]=\"true\" [fullscreenControlOptions]=\"screenOptions\" [mapTypeControl]=\"true\">\r\n            <ng-container *ngFor=\"let loc of mapTerminals\">\r\n                <agm-marker [latitude]=\"loc.Latitude\" [longitude]=\"loc.Longitude\" [agmFitBounds]=\"true\" (mouseOver)=\"infoWindow.open()\" (mouseOut)=\"infoWindow.close()\" >\r\n                    <agm-info-window [disableAutoPan]=\"false\" #infoWindow>\r\n                        <div>\r\n                            {{loc.Name}}\r\n                        </div>\r\n                    </agm-info-window>\r\n                </agm-marker>\r\n            </ng-container>\r\n        </agm-map>\r\n    </div>\r\n</div>\r\n<div class=\"well bg-white shadow-b pr\">\r\n    <div class=\"ibox mb0\">\r\n        <div class=\"ibox-content no-padding no-border\">\r\n            <div class=\"table-responsive\">\r\n                <table id=\"table-terminals\" class=\"table table-bordered table-hover serverside-table\" datatable [dtOptions]=\"dtOptions\" [dtTrigger]=\"dtTrigger\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th data-key=\"tName\">Name</th>\r\n                            <th data-key=\"tAbbreviation\">Abbreviation</th>\r\n                            <th data-key=\"tControlNumber\">Control Number</th>\r\n                            <th data-key=\"tAddress\">Address</th>\r\n                            <th data-key=\"tCity\">City</th>\r\n                            <th data-key=\"tStateCode\">State</th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"loader\" *ngIf=\"IsLoading\">\r\n    <div class=\"loading-content text-center\">\r\n        <div class=\"spinner\"></div>\r\n        <div class=\"font-bold\">Loading...</div>\r\n    </div>\r\n</div>"],"sourceRoot":"webpack:///"}